package test_randoop_pre;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    java.util.Locale locale4 = null;
    // The following exception was thrown during execution in test generation
    try {
      money1.setLocale(locale4);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money3 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money4 = money1.subtract(money3);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    java.util.Currency currency1 = null;
    java.util.Locale locale2 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money3 = new core.Money(10.0d, currency1, locale2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    java.util.Currency currency1 = null;
    java.util.Locale locale2 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money3 = new core.Money((-1.0d), currency1, locale2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(1L, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    java.util.Currency currency1 = null;
    java.util.Locale locale2 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money3 = new core.Money(0.0d, currency1, locale2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    java.util.Currency currency1 = null;
    java.util.Locale locale2 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money3 = new core.Money(1.0d, currency1, locale2);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    java.util.Locale locale10 = null;
    // The following exception was thrown during execution in test generation
    try {
      money1.setLocale(locale10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(100.0d, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money7 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money8 = money3.add(money7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    money1.setAmount((-1.0d));
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array6 = money1.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    // The following exception was thrown during execution in test generation
    try {
      double d1 = core.Money.parseDouble("hi!");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    double d1 = core.Money.parseDouble("$1.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 1.0d);

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(0.0d, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    java.util.Locale locale9 = null;
    // The following exception was thrown during execution in test generation
    try {
      money1.setLocale(locale9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money((-1.0d), currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    core.Money money0 = new core.Money();
    java.util.Locale locale1 = null;
    // The following exception was thrown during execution in test generation
    try {
      money0.setLocale(locale1);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(10L, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array19 = money17.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    // The following exception was thrown during execution in test generation
    try {
      double d1 = core.Money.parseDouble("");
      org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NumberFormatException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NumberFormatException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    double d1 = core.Money.parseDouble("$10.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 10.0d);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array11 = money3.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    java.math.BigDecimal bigDecimal7 = money3.amount();
    java.lang.String str8 = money3.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money10.subtract(money12);
    java.lang.String str19 = money12.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    core.Money money30 = money12.add(money29);
    boolean b31 = money3.equals(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array4 = money1.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money7 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b8 = money6.equals(money7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(1L, currency16);
    core.Money money21 = new core.Money(10.0d, currency16);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array23 = money21.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money43 = new core.Money(10.0d, currency41);
    core.Money money44 = new core.Money(1.0d, currency41);
    core.Money money45 = new core.Money(0L, currency41);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money[] money_array53 = money49.divide(1);
    boolean b55 = money49.equals((java.lang.Object)(-1.0d));
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    java.util.Currency currency60 = money57.getCurrency();
    money49.setCurrency(currency60);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(1);
    boolean b69 = money63.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale70 = money63.getLocale();
    core.Money money71 = new core.Money(1.0d, currency60, locale70);
    core.Money money73 = core.Money.dollars(10.0d);
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    core.Money[] money_array79 = money75.divide(1);
    boolean b81 = money75.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale82 = money75.getLocale();
    money73.setLocale(locale82);
    core.Money money84 = new core.Money(1.0d, currency60, locale82);
    core.Money money85 = new core.Money(0.0d, currency41, locale82);
    boolean b86 = money24.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    java.util.Locale locale9 = money8.getLocale();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array11 = money8.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    money18.setAmount(1.0d);
    java.lang.String str25 = money18.toString();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale49 = money42.getLocale();
    core.Money money50 = new core.Money(1.0d, currency39, locale49);
    money18.setCurrency(currency39);
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.subtract(money55);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(1);
    boolean b69 = money63.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale70 = money63.getLocale();
    money55.setLocale(locale70);
    money18.setLocale(locale70);
    core.Money money73 = new core.Money(1.0d, currency14, locale70);
    java.util.Locale locale74 = money73.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$1.00"+ "'", str25.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale74);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money31 = money28.add(money30);
    boolean b32 = money3.equals(money28);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    core.Money money39 = new core.Money(0L, currency38);
    boolean b40 = money28.equals(money39);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(10);
    money42.setAmount(1.0d);
    java.lang.String str49 = money42.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money52.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    core.Money money74 = new core.Money(1.0d, currency63, locale73);
    money42.setCurrency(currency63);
    core.Money money76 = money39.add(money42);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money[] money_array85 = money81.divide(10);
    boolean b86 = money78.equals((java.lang.Object)money81);
    core.Money money88 = core.Money.dollars(10.0d);
    core.Money money90 = core.Money.dollars(10.0d);
    java.lang.String str91 = money90.toString();
    java.math.BigDecimal bigDecimal92 = money90.amount();
    core.Money money93 = money88.add(money90);
    core.Money money94 = money81.add(money93);
    core.Money money96 = core.Money.dollars(10.0d);
    core.Money money97 = money94.add(money96);
    java.util.Currency currency98 = money97.getCurrency();
    boolean b99 = money39.equals((java.lang.Object)currency98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$1.00"+ "'", str49.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "$10.00"+ "'", str91.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(0L, currency16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    core.Money money46 = new core.Money(1.0d, currency35, locale45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    money48.setLocale(locale57);
    core.Money money59 = new core.Money(1.0d, currency35, locale57);
    core.Money money60 = new core.Money(0.0d, currency16, locale57);
    java.util.Locale locale61 = money60.getLocale();
    money60.setAmount(100.0d);
    core.Money money64 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money65 = money60.subtract(money64);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money15 = new core.Money(10.0d, currency13);
    money15.setAmount(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money25 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b26 = money4.equals(money25);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    core.Money money1 = core.Money.dollars(1.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    java.lang.String str8 = money5.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money5.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.subtract(money18);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    money18.setLocale(locale33);
    core.Money money35 = new core.Money(100.0d, currency13, locale33);
    core.Money money36 = new core.Money(100L, currency13);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    boolean b46 = money38.equals((java.lang.Object)money41);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money41.add(money53);
    core.Money money55 = money36.subtract(money41);
    core.Money money56 = money1.subtract(money55);
    core.Money[] money_array58 = money56.divide(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    java.math.BigDecimal bigDecimal7 = money3.amount();
    java.lang.String str8 = money3.toString();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array10 = money3.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(10);
    money3.setAmount(1.0d);
    java.lang.String str10 = money3.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(1);
    boolean b19 = money13.equals((java.lang.Object)(-1.0d));
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money13.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    core.Money money35 = new core.Money(1.0d, currency24, locale34);
    money3.setCurrency(currency24);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money money45 = money40.add(money42);
    core.Money money46 = money38.subtract(money40);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale55 = money48.getLocale();
    money40.setLocale(locale55);
    core.Money money57 = new core.Money(1.0d, currency24, locale55);
    core.Money money58 = new core.Money(0.0d, currency24);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array60 = money58.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$1.00"+ "'", str10.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale55);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    java.lang.String str30 = money27.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money27.setCurrency(currency35);
    core.Money money37 = new core.Money(100L, currency35);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money[] money_array44 = money40.divide(10);
    money40.setAmount(1.0d);
    java.lang.String str47 = money40.toString();
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    java.util.Currency currency61 = money58.getCurrency();
    money50.setCurrency(currency61);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    core.Money money72 = new core.Money(1.0d, currency61, locale71);
    money40.setCurrency(currency61);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    core.Money money82 = money77.add(money79);
    core.Money money83 = money75.subtract(money77);
    core.Money money85 = core.Money.dollars(10.0d);
    java.lang.String str86 = money85.toString();
    java.math.BigDecimal bigDecimal87 = money85.amount();
    core.Money[] money_array89 = money85.divide(1);
    boolean b91 = money85.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale92 = money85.getLocale();
    money77.setLocale(locale92);
    core.Money money94 = new core.Money(1.0d, currency61, locale92);
    money37.setLocale(locale92);
    java.util.Locale locale96 = money37.getLocale();
    money4.setLocale(locale96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$1.00"+ "'", str47.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "$10.00"+ "'", str86.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale96);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money36 = new core.Money(1L, currency23);
    core.Money[] money_array38 = money36.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    core.Money money1 = core.Money.dollars(10.0d);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array3 = money1.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    money32.setAmount(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.util.Currency currency4 = money1.getCurrency();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(1);
    boolean b15 = money9.equals((java.lang.Object)(-1.0d));
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.util.Currency currency20 = money17.getCurrency();
    money9.setCurrency(currency20);
    core.Money money22 = new core.Money(10.0d, currency20);
    core.Money money23 = new core.Money(1.0d, currency20);
    core.Money money24 = new core.Money(0L, currency20);
    core.Money money25 = money1.subtract(money24);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money32.setCurrency(currency43);
    core.Money money45 = new core.Money(10.0d, currency43);
    core.Money money46 = new core.Money(1.0d, currency43);
    core.Money money47 = new core.Money(0L, currency43);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    money51.setCurrency(currency62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(1);
    boolean b71 = money65.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale72 = money65.getLocale();
    core.Money money73 = new core.Money(1.0d, currency62, locale72);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(1);
    boolean b83 = money77.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale84 = money77.getLocale();
    money75.setLocale(locale84);
    core.Money money86 = new core.Money(1.0d, currency62, locale84);
    core.Money money87 = new core.Money(0.0d, currency43, locale84);
    java.util.Locale locale88 = money87.getLocale();
    money87.setAmount(100.0d);
    java.util.Currency currency91 = money87.getCurrency();
    core.Money money92 = new core.Money(0.0d, currency91);
    boolean b93 = money25.equals((java.lang.Object)currency91);
    java.lang.String str94 = money25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "$10.00"+ "'", str94.equals("$10.00"));

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    double d1 = core.Money.parseDouble("$11.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 11.0d);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    java.util.Currency currency1 = null;
    core.Money money3 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal4 = money3.amount();
    money3.setAmount((-1.0d));
    java.util.Locale locale7 = money3.getLocale();
    // The following exception was thrown during execution in test generation
    try {
      core.Money money8 = new core.Money((-1.0d), currency1, locale7);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale7);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    core.Money money26 = money16.subtract(money21);
    core.Money money27 = money7.add(money26);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money44 = new core.Money(10.0d, currency42);
    core.Money money45 = new core.Money(1.0d, currency42);
    money26.setCurrency(currency42);
    core.Money money47 = new core.Money(1L, currency42);
    core.Money money48 = new core.Money((-1.0d), currency42);
    core.Money money49 = new core.Money(100L, currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    double d1 = core.Money.parseDouble("$0.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 0.0d);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(0L, currency16);
    core.Money money21 = new core.Money(10.0d, currency16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    core.Money money46 = new core.Money(1.0d, currency35, locale45);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money[] money_array53 = money49.divide(1);
    boolean b55 = money49.equals((java.lang.Object)(-1.0d));
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    java.util.Currency currency60 = money57.getCurrency();
    money49.setCurrency(currency60);
    core.Money money62 = new core.Money(100.0d, currency60);
    boolean b63 = money46.equals(money62);
    boolean b64 = money21.equals((java.lang.Object)b63);
    java.lang.String str65 = money21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(10);
    boolean b68 = money60.equals((java.lang.Object)money63);
    core.Money money70 = core.Money.dollars(10.0d);
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money money75 = money70.add(money72);
    core.Money money76 = money63.add(money75);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.lang.String str80 = money78.toString();
    money78.setAmount(0.0d);
    core.Money money83 = money76.subtract(money78);
    money83.setAmount((-1.0d));
    boolean b86 = money57.equals((java.lang.Object)money83);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array88 = money57.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    java.lang.String str59 = money58.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$70.00"+ "'", str59.equals("$70.00"));

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money[] money_array20 = money18.divide(10);
    java.util.Locale locale21 = money18.getLocale();
    core.Money money22 = money1.subtract(money18);
    java.util.Locale locale23 = money18.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    boolean b16 = money8.equals(money12);
    java.util.Locale locale17 = money8.getLocale();
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(1);
    boolean b26 = money20.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale27 = money20.getLocale();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    money32.setAmount(1.0d);
    java.lang.String str39 = money32.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money42.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    core.Money money64 = new core.Money(1.0d, currency53, locale63);
    money32.setCurrency(currency53);
    core.Money money66 = new core.Money(1L, currency53);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money[] money_array74 = money70.divide(1);
    boolean b76 = money70.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale77 = money70.getLocale();
    money68.setLocale(locale77);
    core.Money money79 = new core.Money(10.0d, currency53, locale77);
    core.Money money80 = new core.Money(1.0d, currency53);
    boolean b81 = money20.equals(money80);
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    core.Money[] money_array87 = money83.divide(1);
    boolean b89 = money83.equals((java.lang.Object)(-1.0d));
    core.Money money91 = core.Money.dollars(10.0d);
    java.lang.String str92 = money91.toString();
    java.math.BigDecimal bigDecimal93 = money91.amount();
    java.util.Currency currency94 = money91.getCurrency();
    money83.setCurrency(currency94);
    money80.setCurrency(currency94);
    core.Money money97 = new core.Money(1L, currency94);
    money8.setCurrency(currency94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$1.00"+ "'", str39.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "$10.00"+ "'", str92.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency94);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    java.util.Locale locale9 = money1.getLocale();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array11 = money1.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    double d1 = core.Money.parseDouble("$70.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 70.0d);

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(0L, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    money5.setAmount(1.0d);
    java.lang.String str12 = money5.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(1);
    boolean b21 = money15.equals((java.lang.Object)(-1.0d));
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money15.setCurrency(currency26);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale36 = money29.getLocale();
    core.Money money37 = new core.Money(1.0d, currency26, locale36);
    money5.setCurrency(currency26);
    core.Money money39 = new core.Money(1L, currency26);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    money41.setLocale(locale50);
    core.Money money52 = new core.Money(10.0d, currency26, locale50);
    core.Money money53 = new core.Money(1.0d, currency26);
    core.Money money54 = new core.Money(0L, currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$1.00"+ "'", str12.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    java.lang.String str31 = money30.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(0L, currency16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    core.Money money46 = new core.Money(1.0d, currency35, locale45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    money48.setLocale(locale57);
    core.Money money59 = new core.Money(1.0d, currency35, locale57);
    core.Money money60 = new core.Money(0.0d, currency16, locale57);
    java.util.Locale locale61 = money60.getLocale();
    money60.setAmount(100.0d);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array65 = money60.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(100.0d, currency17);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    money21.setAmount(1.0d);
    java.lang.String str28 = money21.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    core.Money money53 = new core.Money(1.0d, currency42, locale52);
    money21.setCurrency(currency42);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money64 = money56.subtract(money58);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money58.setLocale(locale73);
    money21.setLocale(locale73);
    core.Money money76 = new core.Money(1.0d, currency17, locale73);
    core.Money money77 = money1.subtract(money76);
    java.util.Locale locale78 = money77.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$1.00"+ "'", str28.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale78);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    double d1 = core.Money.parseDouble("($10.00)");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 10.0d);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(1.0d, currency15);
    core.Money money19 = new core.Money(1L, currency15);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    java.lang.String str30 = money23.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    boolean b40 = money32.equals((java.lang.Object)money35);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money48 = money35.add(money47);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money51 = money48.add(money50);
    boolean b52 = money23.equals(money48);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.util.Currency currency58 = money55.getCurrency();
    core.Money money59 = new core.Money(0L, currency58);
    boolean b60 = money48.equals(money59);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(10);
    money62.setAmount(1.0d);
    java.lang.String str69 = money62.toString();
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money[] money_array76 = money72.divide(1);
    boolean b78 = money72.equals((java.lang.Object)(-1.0d));
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    java.util.Currency currency83 = money80.getCurrency();
    money72.setCurrency(currency83);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money[] money_array90 = money86.divide(1);
    boolean b92 = money86.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale93 = money86.getLocale();
    core.Money money94 = new core.Money(1.0d, currency83, locale93);
    money62.setCurrency(currency83);
    core.Money money96 = money59.add(money62);
    boolean b97 = money19.equals((java.lang.Object)money62);
    core.Money[] money_array99 = money19.divide(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$1.00"+ "'", str69.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array99);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.math.BigDecimal bigDecimal10 = money1.amount();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money[] money_array22 = money15.divide(10);
    boolean b23 = money1.equals((java.lang.Object)money_array22);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(10);
    money28.setAmount(1.0d);
    java.lang.String str35 = money28.toString();
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money38.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale59 = money52.getLocale();
    core.Money money60 = new core.Money(1.0d, currency49, locale59);
    money28.setCurrency(currency49);
    core.Money money62 = new core.Money(1L, currency49);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money64.setLocale(locale73);
    core.Money money75 = new core.Money(10.0d, currency49, locale73);
    core.Money money76 = new core.Money(1.0d, currency49);
    core.Money money77 = money1.add(money76);
    java.math.BigDecimal bigDecimal78 = money77.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$1.00"+ "'", str35.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    double d1 = core.Money.parseDouble("$100.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 100.0d);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal12 = money11.amount();
    money11.setAmount((-1.0d));
    boolean b15 = money1.equals(money11);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array17 = money11.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money20 = money17.add(money19);
    java.util.Currency currency21 = money19.getCurrency();
    money19.setAmount(11.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.lang.String str19 = money16.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money16.setCurrency(currency24);
    core.Money money26 = new core.Money(100L, currency24);
    core.Money money27 = money3.add(money26);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array29 = money26.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal26 = money25.amount();
    money25.setAmount((-1.0d));
    core.Money money29 = money23.add(money25);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    money31.setAmount(1.0d);
    java.lang.String str38 = money31.toString();
    java.util.Locale locale39 = money31.getLocale();
    core.Money money40 = money29.add(money31);
    core.Money money42 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal43 = money42.amount();
    core.Money[] money_array45 = money42.divide(100);
    core.Money money46 = money40.subtract(money42);
    core.Money money47 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money48 = money42.subtract(money47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$1.00"+ "'", str38.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    money8.setAmount(1.0d);
    core.Money money15 = money6.add(money8);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array17 = money15.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(10);
    boolean b35 = money27.equals((java.lang.Object)money30);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money30.add(money42);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money46 = money43.add(money45);
    java.util.Currency currency47 = money45.getCurrency();
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money55 = money45.subtract(money49);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money59.setCurrency(currency70);
    core.Money money72 = new core.Money(10.0d, currency70);
    core.Money money73 = new core.Money(0L, currency70);
    money55.setCurrency(currency70);
    core.Money money75 = new core.Money(100L, currency70);
    core.Money money76 = money23.subtract(money75);
    core.Money[] money_array78 = money23.divide(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    double d1 = core.Money.parseDouble("$9.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 9.0d);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(0.0d, currency14);
    core.Money money17 = new core.Money(0.0d, currency14);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    java.util.Currency currency34 = money31.getCurrency();
    money23.setCurrency(currency34);
    core.Money money36 = new core.Money(10.0d, currency34);
    core.Money money37 = new core.Money(1.0d, currency34);
    core.Money money38 = new core.Money(0L, currency34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money42.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    core.Money money64 = new core.Money(1.0d, currency53, locale63);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(1);
    boolean b74 = money68.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale75 = money68.getLocale();
    money66.setLocale(locale75);
    core.Money money77 = new core.Money(1.0d, currency53, locale75);
    core.Money money78 = new core.Money(0.0d, currency34, locale75);
    java.util.Locale locale79 = money78.getLocale();
    core.Money money80 = money17.add(money78);
    core.Money money84 = core.Money.dollars(10.0d);
    java.lang.String str85 = money84.toString();
    java.math.BigDecimal bigDecimal86 = money84.amount();
    core.Money[] money_array88 = money84.divide(1);
    boolean b90 = money84.equals((java.lang.Object)(-1.0d));
    core.Money money92 = core.Money.dollars(10.0d);
    java.lang.String str93 = money92.toString();
    java.math.BigDecimal bigDecimal94 = money92.amount();
    java.util.Currency currency95 = money92.getCurrency();
    money84.setCurrency(currency95);
    core.Money money97 = new core.Money(10.0d, currency95);
    core.Money money98 = new core.Money(1.0d, currency95);
    boolean b99 = money78.equals((java.lang.Object)currency95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "$10.00"+ "'", str85.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "$10.00"+ "'", str93.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(10.0d, currency14);
    core.Money money17 = new core.Money(0L, currency14);
    java.util.Locale locale18 = null;
    // The following exception was thrown during execution in test generation
    try {
      money17.setLocale(locale18);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(100.0d, currency15);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(1.0d, currency15, locale71);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    java.util.Currency currency80 = money77.getCurrency();
    core.Money money81 = new core.Money(0L, currency80);
    money74.setCurrency(currency80);
    java.util.Locale locale83 = null;
    core.Money money84 = new core.Money(1.0d, currency80, locale83);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str85 = money84.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency80);

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    java.math.BigDecimal bigDecimal25 = money23.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    core.Money money9 = core.Money.dollars(10.0d);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money money14 = money9.add(money11);
    core.Money money15 = money7.subtract(money9);
    core.Money money16 = money1.subtract(money7);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array18 = money7.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.util.Currency currency9 = money6.getCurrency();
    money1.setCurrency(currency9);
    java.math.BigDecimal bigDecimal11 = money1.amount();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(10);
    money13.setAmount(1.0d);
    java.lang.String str20 = money13.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    java.util.Currency currency34 = money31.getCurrency();
    money23.setCurrency(currency34);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(1);
    boolean b43 = money37.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale44 = money37.getLocale();
    core.Money money45 = new core.Money(1.0d, currency34, locale44);
    money13.setCurrency(currency34);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money56 = money48.subtract(money50);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(1);
    boolean b64 = money58.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale65 = money58.getLocale();
    money50.setLocale(locale65);
    money13.setLocale(locale65);
    boolean b68 = money1.equals((java.lang.Object)money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$1.00"+ "'", str20.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(1L, currency16);
    core.Money money21 = new core.Money(10.0d, currency16);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array23 = money21.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array25 = money22.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money60.subtract(money69);
    boolean b76 = money58.equals(money60);
    core.Money[] money_array78 = money60.divide(100);
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    core.Money[] money_array87 = money83.divide(1);
    boolean b89 = money83.equals((java.lang.Object)(-1.0d));
    core.Money money91 = core.Money.dollars(10.0d);
    java.lang.String str92 = money91.toString();
    java.math.BigDecimal bigDecimal93 = money91.amount();
    java.util.Currency currency94 = money91.getCurrency();
    money83.setCurrency(currency94);
    core.Money money96 = new core.Money(10.0d, currency94);
    core.Money money97 = new core.Money(1.0d, currency94);
    core.Money money98 = new core.Money(10.0d, currency94);
    money60.setCurrency(currency94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "$10.00"+ "'", str92.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency94);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.lang.String str6 = money3.toString();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    java.util.Currency currency11 = money8.getCurrency();
    money3.setCurrency(currency11);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money money21 = money16.add(money18);
    core.Money money22 = money14.subtract(money16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    money16.setLocale(locale31);
    core.Money money33 = new core.Money(100.0d, currency11, locale31);
    core.Money money34 = new core.Money(10.0d, currency11);
    java.util.Locale locale35 = money34.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.util.Currency currency4 = money1.getCurrency();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(1);
    boolean b15 = money9.equals((java.lang.Object)(-1.0d));
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.util.Currency currency20 = money17.getCurrency();
    money9.setCurrency(currency20);
    core.Money money22 = new core.Money(10.0d, currency20);
    core.Money money23 = new core.Money(1.0d, currency20);
    core.Money money24 = new core.Money(0L, currency20);
    core.Money money25 = money1.subtract(money24);
    java.util.Currency currency26 = money1.getCurrency();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array28 = money1.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array66 = money10.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    core.Money money11 = core.Money.dollars(10.0d);
    boolean b12 = money9.equals(money11);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    boolean b22 = money14.equals((java.lang.Object)money17);
    money17.setAmount(100.0d);
    core.Money money25 = money9.add(money17);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array27 = money17.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money12 = new core.Money(100L, currency10);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    money15.setAmount(1.0d);
    java.lang.String str22 = money15.toString();
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(1);
    boolean b45 = money39.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale46 = money39.getLocale();
    core.Money money47 = new core.Money(1.0d, currency36, locale46);
    money15.setCurrency(currency36);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money money57 = money52.add(money54);
    core.Money money58 = money50.subtract(money52);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    money52.setLocale(locale67);
    core.Money money69 = new core.Money(1.0d, currency36, locale67);
    money12.setLocale(locale67);
    java.util.Locale locale71 = money12.getLocale();
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    core.Money money84 = core.Money.dollars(10.0d);
    java.lang.String str85 = money84.toString();
    java.math.BigDecimal bigDecimal86 = money84.amount();
    java.util.Currency currency87 = money84.getCurrency();
    money76.setCurrency(currency87);
    core.Money money89 = new core.Money(10.0d, currency87);
    core.Money money90 = new core.Money(1.0d, currency87);
    core.Money money91 = new core.Money(0L, currency87);
    money12.setCurrency(currency87);
    java.util.Currency currency93 = money12.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$1.00"+ "'", str22.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "$10.00"+ "'", str85.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency93);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(1);
    boolean b13 = money7.equals((java.lang.Object)(-1.0d));
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money7.setCurrency(currency18);
    core.Money money20 = new core.Money(10.0d, currency18);
    core.Money money21 = new core.Money(1.0d, currency18);
    core.Money money22 = new core.Money(1L, currency18);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money24.subtract(money33);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    money33.setCurrency(currency49);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.lang.String str58 = money55.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money55.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money money73 = money68.add(money70);
    core.Money money74 = money66.subtract(money68);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    money68.setLocale(locale83);
    core.Money money85 = new core.Money(100.0d, currency63, locale83);
    core.Money money86 = new core.Money(100L, currency63);
    core.Money money87 = money33.add(money86);
    money33.setAmount(100.0d);
    java.util.Locale locale90 = money33.getLocale();
    core.Money money91 = new core.Money(100.0d, currency18, locale90);
    core.Money money92 = new core.Money(1L, currency18);
    java.util.Locale locale93 = null;
    core.Money money94 = new core.Money(9.0d, currency18, locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale90);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    java.lang.String str15 = money2.toString();
    money2.setAmount(0.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money[] money_array21 = money19.divide(10);
    java.util.Locale locale22 = money19.getLocale();
    core.Money money23 = money2.subtract(money19);
    java.util.Currency currency24 = money2.getCurrency();
    core.Money money25 = new core.Money(10.0d, currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    java.util.Currency currency17 = money16.getCurrency();
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(10.0d, currency17, locale71);
    money74.setAmount(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money25.subtract(money34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.lang.String str45 = money42.toString();
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    java.util.Currency currency50 = money47.getCurrency();
    money42.setCurrency(currency50);
    money34.setCurrency(currency50);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.lang.String str59 = money56.toString();
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    java.util.Currency currency64 = money61.getCurrency();
    money56.setCurrency(currency64);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money67.subtract(money69);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(1);
    boolean b83 = money77.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale84 = money77.getLocale();
    money69.setLocale(locale84);
    core.Money money86 = new core.Money(100.0d, currency64, locale84);
    core.Money money87 = new core.Money(100L, currency64);
    core.Money money88 = money34.add(money87);
    money34.setAmount(100.0d);
    boolean b91 = money23.equals(money34);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array93 = money34.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0.0d, currency5);
    core.Money money7 = new core.Money();
    core.Money money9 = core.Money.dollars(10.0d);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money money14 = money9.add(money11);
    core.Money money15 = money7.add(money11);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money money22 = money17.add(money19);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(10);
    core.Money money29 = money19.subtract(money24);
    core.Money money30 = money11.add(money29);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    boolean b40 = money32.equals((java.lang.Object)money35);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money48 = money35.add(money47);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money51 = money48.add(money50);
    java.util.Currency currency52 = money51.getCurrency();
    money29.setCurrency(currency52);
    money6.setCurrency(currency52);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array56 = money6.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency52);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money20 = money17.add(money19);
    java.util.Currency currency21 = money19.getCurrency();
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money19.subtract(money23);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(1);
    boolean b39 = money33.equals((java.lang.Object)(-1.0d));
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.util.Currency currency44 = money41.getCurrency();
    money33.setCurrency(currency44);
    core.Money money46 = new core.Money(10.0d, currency44);
    core.Money money47 = new core.Money(0L, currency44);
    money29.setCurrency(currency44);
    java.util.Currency currency49 = money29.getCurrency();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(10);
    money52.setAmount(1.0d);
    java.lang.String str59 = money52.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(1);
    boolean b68 = money62.equals((java.lang.Object)(-1.0d));
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    java.util.Currency currency73 = money70.getCurrency();
    money62.setCurrency(currency73);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    core.Money money84 = new core.Money(1.0d, currency73, locale83);
    money52.setCurrency(currency73);
    core.Money money86 = new core.Money(1L, currency73);
    core.Money money87 = money29.add(money86);
    java.util.Currency currency88 = money86.getCurrency();
    java.lang.String str89 = money86.toString();
    java.lang.String str90 = money86.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$1.00"+ "'", str59.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "$1.00"+ "'", str89.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "$1.00"+ "'", str90.equals("$1.00"));

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money36 = new core.Money(1L, currency23);
    core.Money money37 = new core.Money();
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.add(money41);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money money52 = money47.add(money49);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(10);
    core.Money money59 = money49.subtract(money54);
    core.Money money60 = money41.add(money59);
    java.util.Locale locale61 = money60.getLocale();
    money36.setLocale(locale61);
    java.util.Locale locale63 = money36.getLocale();
    money36.setAmount(70.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money12.subtract(money14);
    core.Money money21 = money3.add(money20);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    boolean b27 = money20.equals(money23);
    java.util.Currency currency28 = money20.getCurrency();
    java.math.BigDecimal bigDecimal29 = money20.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array18 = money10.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money31 = money28.add(money30);
    boolean b32 = money3.equals(money28);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array34 = money3.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    money24.setAmount(70.0d);
    java.math.BigDecimal bigDecimal41 = money24.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    money1.setAmount(0.0d);
    java.lang.String str37 = money1.toString();
    java.math.BigDecimal bigDecimal38 = money1.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$0.00"+ "'", str37.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money money9 = money4.add(money6);
    core.Money money10 = money2.subtract(money4);
    java.lang.String str11 = money4.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money22 = money4.add(money21);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    boolean b28 = money21.equals(money24);
    java.util.Currency currency29 = money21.getCurrency();
    core.Money money30 = new core.Money(100.0d, currency29);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    core.Money money37 = new core.Money(0L, currency36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(10);
    money39.setAmount(1.0d);
    core.Money money46 = money37.add(money39);
    boolean b47 = money30.equals(money46);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array49 = money46.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(10);
    money13.setAmount(1.0d);
    java.lang.String str20 = money13.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    java.util.Currency currency34 = money31.getCurrency();
    money23.setCurrency(currency34);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(1);
    boolean b43 = money37.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale44 = money37.getLocale();
    core.Money money45 = new core.Money(1.0d, currency34, locale44);
    money13.setCurrency(currency34);
    core.Money money47 = new core.Money(1L, currency34);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale58 = money51.getLocale();
    money49.setLocale(locale58);
    core.Money money60 = new core.Money(10.0d, currency34, locale58);
    core.Money money61 = new core.Money(1.0d, currency34);
    boolean b62 = money1.equals(money61);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    java.util.Currency currency75 = money72.getCurrency();
    money64.setCurrency(currency75);
    money61.setCurrency(currency75);
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money[] money_array86 = money82.divide(10);
    boolean b87 = money79.equals((java.lang.Object)money82);
    core.Money money89 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal90 = money89.amount();
    money89.setAmount((-1.0d));
    boolean b93 = money79.equals(money89);
    boolean b94 = money61.equals(money89);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array96 = money61.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$1.00"+ "'", str20.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    java.lang.String str25 = money24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.subtract(money39);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money[] money_array51 = money47.divide(1);
    boolean b53 = money47.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale54 = money47.getLocale();
    money39.setLocale(locale54);
    money2.setLocale(locale54);
    java.lang.String str57 = money2.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    java.util.Currency currency71 = money68.getCurrency();
    money60.setCurrency(currency71);
    core.Money money73 = new core.Money(0.0d, currency71);
    money2.setCurrency(currency71);
    core.Money money75 = new core.Money(10L, currency71);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array77 = money75.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$1.00"+ "'", str57.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency71);

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    core.Money money51 = new core.Money(100L, currency49);
    boolean b52 = money38.equals(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money money29 = money24.add(money26);
    core.Money money30 = money20.subtract(money24);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money32.setCurrency(currency43);
    java.lang.String str45 = money32.toString();
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money55 = money47.subtract(money49);
    java.lang.String str56 = money49.toString();
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money money65 = money60.add(money62);
    core.Money money66 = money58.subtract(money60);
    core.Money money67 = money49.add(money66);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    java.util.Currency currency72 = money69.getCurrency();
    boolean b73 = money66.equals(money69);
    java.util.Currency currency74 = money66.getCurrency();
    money32.setCurrency(currency74);
    money30.setCurrency(currency74);
    core.Money money77 = new core.Money(1.0d, currency74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency74);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    java.math.BigDecimal bigDecimal4 = money1.amount();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    core.Money[] money_array14 = money10.divide(1);
    boolean b16 = money10.equals((java.lang.Object)(-1.0d));
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.util.Currency currency21 = money18.getCurrency();
    money10.setCurrency(currency21);
    core.Money money23 = new core.Money(10.0d, currency21);
    core.Money money24 = new core.Money(1.0d, currency21);
    core.Money money25 = new core.Money(0L, currency21);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(1);
    boolean b61 = money55.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale62 = money55.getLocale();
    money53.setLocale(locale62);
    core.Money money64 = new core.Money(1.0d, currency40, locale62);
    core.Money money65 = new core.Money(0.0d, currency21, locale62);
    java.util.Locale locale66 = money65.getLocale();
    money1.setLocale(locale66);
    java.lang.String str68 = money1.toString();
    java.util.Locale locale69 = money1.getLocale();
    java.math.BigDecimal bigDecimal70 = money1.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.util.Currency currency6 = money3.getCurrency();
    core.Money money7 = new core.Money(0L, currency6);
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(10);
    money9.setAmount(1.0d);
    core.Money money16 = money7.add(money9);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(1);
    boolean b25 = money19.equals((java.lang.Object)(-1.0d));
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    java.util.Currency currency30 = money27.getCurrency();
    money19.setCurrency(currency30);
    core.Money money32 = new core.Money(100.0d, currency30);
    java.util.Currency currency33 = money32.getCurrency();
    money7.setCurrency(currency33);
    core.Money money35 = new core.Money(70.0d, currency33);
    java.math.BigDecimal bigDecimal36 = money35.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array66 = money63.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(1.0d, currency15);
    core.Money money19 = new core.Money(1L, currency15);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    java.lang.String str30 = money23.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    boolean b40 = money32.equals((java.lang.Object)money35);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money48 = money35.add(money47);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money51 = money48.add(money50);
    boolean b52 = money23.equals(money48);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.util.Currency currency58 = money55.getCurrency();
    core.Money money59 = new core.Money(0L, currency58);
    boolean b60 = money48.equals(money59);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(10);
    money62.setAmount(1.0d);
    java.lang.String str69 = money62.toString();
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money[] money_array76 = money72.divide(1);
    boolean b78 = money72.equals((java.lang.Object)(-1.0d));
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    java.util.Currency currency83 = money80.getCurrency();
    money72.setCurrency(currency83);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money[] money_array90 = money86.divide(1);
    boolean b92 = money86.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale93 = money86.getLocale();
    core.Money money94 = new core.Money(1.0d, currency83, locale93);
    money62.setCurrency(currency83);
    core.Money money96 = money59.add(money62);
    boolean b97 = money19.equals((java.lang.Object)money62);
    java.lang.String str98 = money62.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$1.00"+ "'", str69.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str98 + "' != '" + "$1.00"+ "'", str98.equals("$1.00"));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money[] money_array18 = money16.divide(1);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array20 = money16.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array18);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money36.subtract(money38);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(1);
    boolean b52 = money46.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale53 = money46.getLocale();
    money38.setLocale(locale53);
    money1.setLocale(locale53);
    java.lang.String str56 = money1.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money59.setCurrency(currency70);
    core.Money money72 = new core.Money(0.0d, currency70);
    money1.setCurrency(currency70);
    java.util.Locale locale74 = money1.getLocale();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array76 = money1.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$1.00"+ "'", str56.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale74);

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    java.lang.String str65 = money10.toString();
    java.util.Currency currency66 = money10.getCurrency();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array68 = money10.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency66);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money15 = new core.Money(100.0d, currency13);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.lang.String str20 = money17.toString();
    core.Money money21 = new core.Money();
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.add(money25);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    java.lang.String str44 = money31.toString();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    java.lang.String str51 = money48.toString();
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    java.util.Currency currency56 = money53.getCurrency();
    money48.setCurrency(currency56);
    core.Money money59 = core.Money.dollars(10.0d);
    core.Money money61 = core.Money.dollars(10.0d);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money money66 = money61.add(money63);
    core.Money money67 = money59.subtract(money61);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money[] money_array73 = money69.divide(1);
    boolean b75 = money69.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale76 = money69.getLocale();
    money61.setLocale(locale76);
    core.Money money78 = new core.Money(100.0d, currency56, locale76);
    core.Money money79 = new core.Money(10.0d, currency56);
    money31.setCurrency(currency56);
    money25.setCurrency(currency56);
    boolean b82 = money17.equals(money25);
    core.Money money83 = money15.subtract(money17);
    java.util.Locale locale84 = money17.getLocale();
    java.lang.String str85 = money17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "$10.00"+ "'", str85.equals("$10.00"));

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money10.subtract(money12);
    java.lang.String str19 = money12.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    core.Money money30 = money12.add(money29);
    boolean b31 = money0.equals((java.lang.Object)money12);
    java.util.Locale locale32 = money0.getLocale();
    java.math.BigDecimal bigDecimal33 = money0.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    money17.setAmount(1.0d);
    java.math.BigDecimal bigDecimal27 = money17.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    core.Money money15 = core.Money.dollars((-1.0d));
    core.Money money16 = money13.subtract(money15);
    java.lang.String str17 = money13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$0.00"+ "'", str17.equals("$0.00"));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(0.0d, currency14);
    core.Money money17 = new core.Money(0.0d, currency14);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    java.util.Currency currency34 = money31.getCurrency();
    money23.setCurrency(currency34);
    core.Money money36 = new core.Money(10.0d, currency34);
    core.Money money37 = new core.Money(1.0d, currency34);
    core.Money money38 = new core.Money(0L, currency34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money42.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    core.Money money64 = new core.Money(1.0d, currency53, locale63);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(1);
    boolean b74 = money68.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale75 = money68.getLocale();
    money66.setLocale(locale75);
    core.Money money77 = new core.Money(1.0d, currency53, locale75);
    core.Money money78 = new core.Money(0.0d, currency34, locale75);
    java.util.Locale locale79 = money78.getLocale();
    core.Money money80 = money17.add(money78);
    java.lang.String str81 = money80.toString();
    money80.setAmount(9.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$0.00"+ "'", str81.equals("$0.00"));

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(10.0d, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(100.0d, currency38);
    java.util.Currency currency41 = money40.getCurrency();
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(10);
    core.Money money55 = money45.subtract(money50);
    core.Money money56 = money40.add(money55);
    core.Money money57 = money24.subtract(money56);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money59.setCurrency(currency70);
    java.lang.String str72 = money59.toString();
    money59.setAmount(0.0d);
    java.lang.String str75 = money59.toString();
    core.Money money76 = money56.add(money59);
    java.util.Locale locale77 = money76.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$0.00"+ "'", str75.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    money18.setAmount(1.0d);
    java.lang.String str25 = money18.toString();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale49 = money42.getLocale();
    core.Money money50 = new core.Money(1.0d, currency39, locale49);
    money18.setCurrency(currency39);
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.subtract(money55);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(1);
    boolean b69 = money63.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale70 = money63.getLocale();
    money55.setLocale(locale70);
    money18.setLocale(locale70);
    core.Money money73 = new core.Money(1.0d, currency14, locale70);
    java.math.BigDecimal bigDecimal74 = money73.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$1.00"+ "'", str25.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(100.0d, currency17);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    money21.setAmount(1.0d);
    java.lang.String str28 = money21.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    core.Money money53 = new core.Money(1.0d, currency42, locale52);
    money21.setCurrency(currency42);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money64 = money56.subtract(money58);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money58.setLocale(locale73);
    money21.setLocale(locale73);
    core.Money money76 = new core.Money(1.0d, currency17, locale73);
    core.Money money77 = money1.subtract(money76);
    core.Money[] money_array79 = money77.divide(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$1.00"+ "'", str28.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array79);

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(1);
    boolean b14 = money8.equals((java.lang.Object)(-1.0d));
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    money8.setCurrency(currency19);
    core.Money money21 = new core.Money(10.0d, currency19);
    core.Money money22 = new core.Money(1.0d, currency19);
    core.Money money23 = new core.Money(0L, currency19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(1);
    boolean b47 = money41.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale48 = money41.getLocale();
    core.Money money49 = new core.Money(1.0d, currency38, locale48);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money51.setLocale(locale60);
    core.Money money62 = new core.Money(1.0d, currency38, locale60);
    core.Money money63 = new core.Money(0.0d, currency19, locale60);
    java.util.Locale locale64 = money63.getLocale();
    money63.setAmount(100.0d);
    java.util.Currency currency67 = money63.getCurrency();
    core.Money money68 = new core.Money(0.0d, currency67);
    core.Money money69 = new core.Money(1.0d, currency67);
    core.Money money70 = new core.Money(1L, currency67);
    java.util.Currency currency71 = money70.getCurrency();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.lang.String str14 = money8.toString();
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money37 = new core.Money(10.0d, currency35);
    core.Money money38 = new core.Money(1.0d, currency35);
    core.Money money39 = new core.Money(0L, currency35);
    core.Money money40 = money16.subtract(money39);
    boolean b41 = money8.equals(money16);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(10);
    boolean b51 = money43.equals((java.lang.Object)money46);
    core.Money[] money_array53 = money46.divide(10);
    boolean b54 = money16.equals((java.lang.Object)10);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array56 = money16.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    core.Money money9 = core.Money.dollars(10.0d);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money money14 = money9.add(money11);
    core.Money money15 = money7.subtract(money9);
    core.Money money16 = money1.subtract(money7);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array18 = money16.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money9 = new core.Money();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money9.add(money13);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    core.Money money31 = money21.subtract(money26);
    core.Money money32 = money13.add(money31);
    core.Money money34 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal35 = money34.amount();
    money34.setAmount((-1.0d));
    core.Money money38 = money32.add(money34);
    core.Money money39 = money8.add(money32);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    java.util.Currency currency54 = money51.getCurrency();
    money43.setCurrency(currency54);
    core.Money money56 = new core.Money(10.0d, currency54);
    core.Money money57 = new core.Money(1.0d, currency54);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(10);
    money59.setAmount(1.0d);
    java.lang.String str66 = money59.toString();
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money[] money_array73 = money69.divide(1);
    boolean b75 = money69.equals((java.lang.Object)(-1.0d));
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    java.util.Currency currency80 = money77.getCurrency();
    money69.setCurrency(currency80);
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    core.Money[] money_array87 = money83.divide(1);
    boolean b89 = money83.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale90 = money83.getLocale();
    core.Money money91 = new core.Money(1.0d, currency80, locale90);
    money59.setCurrency(currency80);
    money57.setCurrency(currency80);
    money8.setCurrency(currency80);
    java.math.BigDecimal bigDecimal95 = money8.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$1.00"+ "'", str66.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal95);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(1);
    boolean b40 = money34.equals((java.lang.Object)(-1.0d));
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money34.setCurrency(currency45);
    core.Money money47 = new core.Money(10.0d, currency45);
    core.Money money48 = new core.Money(1.0d, currency45);
    core.Money money49 = new core.Money(1L, currency45);
    core.Money money50 = new core.Money(10.0d, currency45);
    boolean b51 = money10.equals((java.lang.Object)10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    java.util.Currency currency67 = money64.getCurrency();
    money56.setCurrency(currency67);
    core.Money money69 = new core.Money(10.0d, currency67);
    core.Money money70 = new core.Money(1.0d, currency67);
    core.Money money71 = new core.Money(0L, currency67);
    core.Money money72 = money10.subtract(money71);
    java.util.Locale locale73 = money71.getLocale();
    money71.setAmount(9.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal26 = money25.amount();
    money25.setAmount((-1.0d));
    core.Money money29 = money23.add(money25);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    money31.setAmount(1.0d);
    java.lang.String str38 = money31.toString();
    java.util.Locale locale39 = money31.getLocale();
    core.Money money40 = money29.add(money31);
    core.Money money42 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal43 = money42.amount();
    core.Money[] money_array45 = money42.divide(100);
    core.Money money46 = money40.subtract(money42);
    core.Money money47 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money48 = money40.subtract(money47);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$1.00"+ "'", str38.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money60.subtract(money69);
    boolean b76 = money58.equals(money60);
    core.Money[] money_array78 = money60.divide(100);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array80 = money60.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.util.Locale locale14 = money8.getLocale();
    java.lang.String str15 = money8.toString();
    core.Money money17 = core.Money.dollars(0.0d);
    core.Money money18 = money8.subtract(money17);
    core.Money money19 = new core.Money();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.add(money23);
    core.Money money28 = new core.Money();
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money28.add(money32);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(10);
    core.Money money50 = money40.subtract(money45);
    core.Money money51 = money32.add(money50);
    core.Money money53 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal54 = money53.amount();
    money53.setAmount((-1.0d));
    core.Money money57 = money51.add(money53);
    core.Money money58 = money27.add(money51);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(10);
    money61.setAmount(1.0d);
    java.lang.String str68 = money61.toString();
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money[] money_array75 = money71.divide(1);
    boolean b77 = money71.equals((java.lang.Object)(-1.0d));
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    java.util.Currency currency82 = money79.getCurrency();
    money71.setCurrency(currency82);
    core.Money money85 = core.Money.dollars(10.0d);
    java.lang.String str86 = money85.toString();
    java.math.BigDecimal bigDecimal87 = money85.amount();
    core.Money[] money_array89 = money85.divide(1);
    boolean b91 = money85.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale92 = money85.getLocale();
    core.Money money93 = new core.Money(1.0d, currency82, locale92);
    money61.setCurrency(currency82);
    core.Money money95 = new core.Money(1L, currency82);
    core.Money money96 = money51.subtract(money95);
    boolean b97 = money8.equals(money51);
    money8.setAmount(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$1.00"+ "'", str68.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "$10.00"+ "'", str86.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    core.Money money3 = new core.Money();
    core.Money money5 = core.Money.dollars(10.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money money10 = money5.add(money7);
    core.Money money11 = money3.add(money7);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    boolean b19 = money11.equals(money15);
    java.util.Currency currency20 = money11.getCurrency();
    core.Money money21 = new core.Money(100L, currency20);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money38 = new core.Money(100.0d, currency36);
    java.util.Currency currency39 = money38.getCurrency();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    money41.setAmount(1.0d);
    java.lang.String str48 = money41.toString();
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    money51.setCurrency(currency62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(1);
    boolean b71 = money65.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale72 = money65.getLocale();
    core.Money money73 = new core.Money(1.0d, currency62, locale72);
    money41.setCurrency(currency62);
    core.Money money76 = core.Money.dollars(10.0d);
    core.Money money78 = core.Money.dollars(10.0d);
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    core.Money money83 = money78.add(money80);
    core.Money money84 = money76.subtract(money78);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money[] money_array90 = money86.divide(1);
    boolean b92 = money86.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale93 = money86.getLocale();
    money78.setLocale(locale93);
    money41.setLocale(locale93);
    core.Money money96 = new core.Money(10.0d, currency39, locale93);
    core.Money money97 = new core.Money(100.0d, currency20, locale93);
    core.Money money98 = new core.Money((-1.0d), currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$1.00"+ "'", str48.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    java.lang.String str24 = money4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(10);
    boolean b11 = money3.equals((java.lang.Object)money6);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(10);
    core.Money money25 = money15.subtract(money20);
    core.Money money26 = money6.add(money25);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money43 = new core.Money(10.0d, currency41);
    core.Money money44 = new core.Money(1.0d, currency41);
    money25.setCurrency(currency41);
    core.Money money46 = new core.Money(1L, currency41);
    core.Money money47 = new core.Money((-1.0d), currency41);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(10);
    core.Money money61 = money51.subtract(money56);
    java.util.Locale locale62 = money56.getLocale();
    java.util.Locale locale63 = money56.getLocale();
    money47.setLocale(locale63);
    java.math.BigDecimal bigDecimal65 = money47.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.subtract(money21);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale36 = money29.getLocale();
    money21.setLocale(locale36);
    core.Money money38 = new core.Money(0.0d, currency16, locale36);
    core.Money money39 = new core.Money(1.0d, currency16);
    core.Money money40 = new core.Money(0.0d, currency16);
    core.Money money41 = new core.Money(0.0d, currency16);
    core.Money money42 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b43 = money41.equals(money42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale36);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.util.Currency currency9 = money6.getCurrency();
    money1.setCurrency(currency9);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array12 = money1.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money12.subtract(money14);
    core.Money money21 = money3.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money24.subtract(money26);
    java.lang.String str33 = money26.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money35.subtract(money37);
    core.Money money44 = money26.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    boolean b50 = money43.equals(money46);
    java.util.Currency currency51 = money43.getCurrency();
    core.Money money52 = money20.add(money43);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array54 = money52.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array11 = money9.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(1.0d, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    java.lang.String str17 = money1.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.subtract(money34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale49 = money42.getLocale();
    money34.setLocale(locale49);
    core.Money money51 = new core.Money(100.0d, currency29, locale49);
    core.Money money52 = new core.Money(1L, currency29);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(10);
    money54.setAmount(1.0d);
    java.lang.String str61 = money54.toString();
    java.math.BigDecimal bigDecimal62 = money54.amount();
    core.Money money63 = money52.add(money54);
    core.Money money64 = money1.add(money63);
    java.lang.Object obj65 = null;
    boolean b66 = money1.equals(obj65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$1.00"+ "'", str61.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money20 = money17.add(money19);
    java.util.Currency currency21 = money19.getCurrency();
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money19.subtract(money23);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(1);
    boolean b39 = money33.equals((java.lang.Object)(-1.0d));
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.util.Currency currency44 = money41.getCurrency();
    money33.setCurrency(currency44);
    core.Money money46 = new core.Money(10.0d, currency44);
    core.Money money47 = new core.Money(0L, currency44);
    money29.setCurrency(currency44);
    java.util.Currency currency49 = money29.getCurrency();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(10);
    money52.setAmount(1.0d);
    java.lang.String str59 = money52.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(1);
    boolean b68 = money62.equals((java.lang.Object)(-1.0d));
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    java.util.Currency currency73 = money70.getCurrency();
    money62.setCurrency(currency73);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    core.Money money84 = new core.Money(1.0d, currency73, locale83);
    money52.setCurrency(currency73);
    core.Money money86 = new core.Money(1L, currency73);
    core.Money money87 = money29.add(money86);
    java.math.BigDecimal bigDecimal88 = money87.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$1.00"+ "'", str59.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(100.0d, currency15);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(1.0d, currency15, locale71);
    core.Money money75 = new core.Money(10L, currency15);
    java.lang.String str76 = money75.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    java.util.Currency currency17 = money16.getCurrency();
    money16.setAmount(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    java.util.Locale locale24 = money23.getLocale();
    java.util.Locale locale25 = money23.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money16.setCurrency(currency27);
    core.Money money29 = new core.Money(10.0d, currency27);
    java.lang.String str30 = money29.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.subtract(money34);
    java.lang.String str41 = money34.toString();
    core.Money money42 = money29.add(money34);
    core.Money money43 = money8.add(money29);
    core.Money money45 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal46 = money45.amount();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(10);
    boolean b56 = money48.equals((java.lang.Object)money51);
    money51.setAmount(100.0d);
    boolean b59 = money45.equals(money51);
    core.Money money60 = money29.subtract(money51);
    java.lang.String str61 = money60.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "($90.00)"+ "'", str61.equals("($90.00)"));

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    java.util.Currency currency9 = money1.getCurrency();
    money1.setAmount((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    core.Money money40 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal41 = money40.amount();
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(10);
    boolean b51 = money43.equals((java.lang.Object)money46);
    money46.setAmount(100.0d);
    boolean b54 = money40.equals(money46);
    money46.setAmount(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money money65 = money60.add(money62);
    core.Money money66 = money58.subtract(money60);
    core.Money money68 = core.Money.dollars(10.0d);
    boolean b69 = money66.equals(money68);
    boolean b70 = money46.equals((java.lang.Object)b69);
    java.util.Currency currency71 = money46.getCurrency();
    boolean b72 = money24.equals(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    java.util.Currency currency17 = money16.getCurrency();
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(10.0d, currency17, locale71);
    java.util.Locale locale75 = money74.getLocale();
    money74.setAmount(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.lang.String str13 = money10.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money10.setCurrency(currency18);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money38 = new core.Money(10.0d, currency36);
    core.Money money39 = new core.Money(1.0d, currency36);
    core.Money money40 = new core.Money(0L, currency36);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    java.util.Currency currency55 = money52.getCurrency();
    money44.setCurrency(currency55);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(1);
    boolean b64 = money58.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale65 = money58.getLocale();
    core.Money money66 = new core.Money(1.0d, currency55, locale65);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money[] money_array74 = money70.divide(1);
    boolean b76 = money70.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale77 = money70.getLocale();
    money68.setLocale(locale77);
    core.Money money79 = new core.Money(1.0d, currency55, locale77);
    core.Money money80 = new core.Money(0.0d, currency36, locale77);
    java.util.Locale locale81 = money80.getLocale();
    java.util.Currency currency82 = money80.getCurrency();
    core.Money money83 = money10.subtract(money80);
    core.Money money84 = money0.add(money83);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array86 = money84.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.subtract(money21);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale36 = money29.getLocale();
    money21.setLocale(locale36);
    core.Money money38 = new core.Money(0.0d, currency16, locale36);
    core.Money money39 = new core.Money(1.0d, currency16);
    core.Money money40 = new core.Money(1L, currency16);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    java.util.Currency currency54 = money51.getCurrency();
    money43.setCurrency(currency54);
    core.Money money56 = new core.Money(10.0d, currency54);
    java.lang.String str57 = money56.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    core.Money money61 = core.Money.dollars(10.0d);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money money66 = money61.add(money63);
    core.Money money67 = money59.subtract(money61);
    java.lang.String str68 = money61.toString();
    core.Money money69 = money56.add(money61);
    core.Money money71 = core.Money.dollars(10.0d);
    core.Money money73 = core.Money.dollars(10.0d);
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    core.Money money78 = money73.add(money75);
    core.Money money79 = money71.subtract(money73);
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money[] money_array85 = money81.divide(1);
    boolean b87 = money81.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale88 = money81.getLocale();
    money73.setLocale(locale88);
    money69.setLocale(locale88);
    core.Money money91 = new core.Money(11.0d, currency16, locale88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    java.math.BigDecimal bigDecimal4 = money1.amount();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money24 = new core.Money(10.0d, currency22);
    core.Money money25 = new core.Money(1.0d, currency22);
    core.Money money26 = new core.Money(0L, currency22);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    core.Money money52 = new core.Money(1.0d, currency41, locale51);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money54.setLocale(locale63);
    core.Money money65 = new core.Money(1.0d, currency41, locale63);
    core.Money money66 = new core.Money(0.0d, currency22, locale63);
    java.util.Locale locale67 = money66.getLocale();
    money66.setAmount(100.0d);
    java.util.Currency currency70 = money66.getCurrency();
    core.Money money71 = new core.Money(0.0d, currency70);
    money71.setAmount(0.0d);
    boolean b74 = money1.equals(money71);
    core.Money money75 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money76 = money1.add(money75);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(0.0d, currency15);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(10.0d, currency38);
    core.Money money41 = new core.Money(1.0d, currency38);
    core.Money money42 = new core.Money(0L, currency38);
    core.Money money43 = money19.subtract(money42);
    core.Money money44 = money17.add(money19);
    core.Money money46 = new core.Money();
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money46.add(money50);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(10);
    core.Money money68 = money58.subtract(money63);
    core.Money money69 = money50.add(money68);
    core.Money money71 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal72 = money71.amount();
    money71.setAmount((-1.0d));
    core.Money money75 = money69.add(money71);
    java.util.Currency currency76 = money69.getCurrency();
    core.Money money77 = new core.Money((-1L), currency76);
    money17.setCurrency(currency76);
    core.Money money79 = new core.Money(100.0d, currency76);
    core.Money money80 = new core.Money(70.0d, currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    core.Money money1 = new core.Money();
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.add(money5);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    boolean b17 = money9.equals(money13);
    java.util.Currency currency18 = money9.getCurrency();
    core.Money money19 = new core.Money(100L, currency18);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money37 = new core.Money(100.0d, currency35);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(10);
    money39.setAmount(1.0d);
    java.lang.String str46 = money39.toString();
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money[] money_array53 = money49.divide(1);
    boolean b55 = money49.equals((java.lang.Object)(-1.0d));
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    java.util.Currency currency60 = money57.getCurrency();
    money49.setCurrency(currency60);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(1);
    boolean b69 = money63.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale70 = money63.getLocale();
    core.Money money71 = new core.Money(1.0d, currency60, locale70);
    money39.setCurrency(currency60);
    core.Money money74 = core.Money.dollars(10.0d);
    core.Money money76 = core.Money.dollars(10.0d);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    core.Money money81 = money76.add(money78);
    core.Money money82 = money74.subtract(money76);
    core.Money money84 = core.Money.dollars(10.0d);
    java.lang.String str85 = money84.toString();
    java.math.BigDecimal bigDecimal86 = money84.amount();
    core.Money[] money_array88 = money84.divide(1);
    boolean b90 = money84.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale91 = money84.getLocale();
    money76.setLocale(locale91);
    money39.setLocale(locale91);
    core.Money money94 = new core.Money(1.0d, currency35, locale91);
    core.Money money95 = new core.Money(10L, currency35);
    java.util.Currency currency96 = money95.getCurrency();
    money19.setCurrency(currency96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$1.00"+ "'", str46.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "$10.00"+ "'", str85.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency96);

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money60.subtract(money69);
    boolean b76 = money58.equals(money60);
    core.Money[] money_array78 = money60.divide(100);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array80 = money60.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    money10.setAmount(100.0d);
    core.Money money67 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b68 = money10.equals(money67);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    java.lang.String str8 = money5.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money5.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.subtract(money18);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    money18.setLocale(locale33);
    core.Money money35 = new core.Money(100.0d, currency13, locale33);
    core.Money money36 = new core.Money(1L, currency13);
    core.Money money37 = new core.Money(100L, currency13);
    core.Money money38 = new core.Money(1.0d, currency13);
    java.math.BigDecimal bigDecimal39 = money38.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array8 = money3.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    core.Money money1 = new core.Money();
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.add(money5);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money5.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal27 = money26.amount();
    money26.setAmount((-1.0d));
    core.Money money30 = money24.add(money26);
    java.util.Currency currency31 = money24.getCurrency();
    core.Money money32 = new core.Money((-1L), currency31);
    money32.setAmount(70.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money38.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(1);
    boolean b68 = money62.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale69 = money62.getLocale();
    money54.setLocale(locale69);
    core.Money money71 = new core.Money(0.0d, currency49, locale69);
    core.Money money72 = new core.Money(1.0d, currency49);
    java.util.Currency currency73 = money72.getCurrency();
    money32.setCurrency(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(10.0d, currency39);
    core.Money money42 = new core.Money(1.0d, currency39);
    money23.setCurrency(currency39);
    java.util.Locale locale44 = money23.getLocale();
    core.Money[] money_array46 = money23.divide(10);
    money23.setAmount(9.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    java.util.Locale locale18 = money17.getLocale();
    core.Money money20 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal21 = money20.amount();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    boolean b31 = money23.equals((java.lang.Object)money26);
    money26.setAmount(100.0d);
    boolean b34 = money20.equals(money26);
    boolean b35 = money17.equals((java.lang.Object)b34);
    core.Money money36 = new core.Money();
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money36.add(money40);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(10);
    core.Money money58 = money48.subtract(money53);
    core.Money money59 = money40.add(money58);
    core.Money money61 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal62 = money61.amount();
    money61.setAmount((-1.0d));
    core.Money money65 = money59.add(money61);
    java.util.Currency currency66 = money59.getCurrency();
    money59.setAmount(100.0d);
    boolean b69 = money17.equals((java.lang.Object)100.0d);
    java.math.BigDecimal bigDecimal70 = money17.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money7.add(money19);
    java.util.Currency currency21 = money7.getCurrency();
    core.Money money22 = new core.Money(10L, currency21);
    core.Money money23 = new core.Money(0.0d, currency21);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(100.0d, currency38);
    java.util.Currency currency41 = money40.getCurrency();
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(10);
    money43.setAmount(1.0d);
    java.lang.String str50 = money43.toString();
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    java.util.Currency currency64 = money61.getCurrency();
    money53.setCurrency(currency64);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money[] money_array71 = money67.divide(1);
    boolean b73 = money67.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale74 = money67.getLocale();
    core.Money money75 = new core.Money(1.0d, currency64, locale74);
    money43.setCurrency(currency64);
    core.Money money78 = core.Money.dollars(10.0d);
    core.Money money80 = core.Money.dollars(10.0d);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money money85 = money80.add(money82);
    core.Money money86 = money78.subtract(money80);
    core.Money money88 = core.Money.dollars(10.0d);
    java.lang.String str89 = money88.toString();
    java.math.BigDecimal bigDecimal90 = money88.amount();
    core.Money[] money_array92 = money88.divide(1);
    boolean b94 = money88.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale95 = money88.getLocale();
    money80.setLocale(locale95);
    money43.setLocale(locale95);
    core.Money money98 = new core.Money(10.0d, currency41, locale95);
    core.Money money99 = new core.Money(10.0d, currency21, locale95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$1.00"+ "'", str50.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "$10.00"+ "'", str89.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale95);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.util.Currency currency9 = money6.getCurrency();
    money1.setCurrency(currency9);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    boolean b29 = money1.equals((java.lang.Object)money15);
    java.util.Locale locale30 = money15.getLocale();
    java.lang.String str31 = money15.toString();
    java.util.Currency currency32 = money15.getCurrency();
    java.lang.String str33 = money15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.subtract(money39);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money[] money_array51 = money47.divide(1);
    boolean b53 = money47.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale54 = money47.getLocale();
    money39.setLocale(locale54);
    core.Money money56 = new core.Money(1.0d, currency23, locale54);
    java.util.Locale locale57 = money56.getLocale();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(10);
    boolean b67 = money59.equals((java.lang.Object)money62);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money62.add(money74);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.lang.String str79 = money77.toString();
    money77.setAmount(0.0d);
    core.Money money82 = money75.subtract(money77);
    money82.setAmount(11.0d);
    java.util.Locale locale85 = money82.getLocale();
    money56.setLocale(locale85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale85);

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money money6 = core.Money.dollars(10.0d);
    core.Money money8 = core.Money.dollars(10.0d);
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    core.Money money13 = money8.add(money10);
    core.Money money14 = money6.subtract(money8);
    java.lang.String str15 = money8.toString();
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money25 = money17.subtract(money19);
    core.Money money26 = money8.add(money25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    java.util.Currency currency31 = money28.getCurrency();
    boolean b32 = money25.equals(money28);
    java.util.Currency currency33 = money25.getCurrency();
    core.Money money34 = new core.Money(100.0d, currency33);
    boolean b35 = money1.equals((java.lang.Object)100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money[] money_array26 = money22.divide(10);
    money22.setAmount(1.0d);
    java.lang.String str29 = money22.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money32.setCurrency(currency43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(1);
    boolean b52 = money46.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale53 = money46.getLocale();
    core.Money money54 = new core.Money(1.0d, currency43, locale53);
    money22.setCurrency(currency43);
    money20.setCurrency(currency43);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(10);
    core.Money money70 = money60.subtract(money65);
    java.util.Locale locale71 = money65.getLocale();
    core.Money money72 = new core.Money((-1.0d), currency43, locale71);
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(10);
    boolean b82 = money74.equals((java.lang.Object)money77);
    core.Money money84 = core.Money.dollars(10.0d);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money money89 = money84.add(money86);
    core.Money money90 = money77.add(money89);
    java.util.Locale locale91 = money90.getLocale();
    core.Money money92 = new core.Money(1.0d, currency43, locale91);
    core.Money money93 = new core.Money(10L, currency43);
    java.lang.String str94 = money93.toString();
    money93.setAmount(11.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$1.00"+ "'", str29.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "$10.00"+ "'", str94.equals("$10.00"));

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(10);
    money3.setAmount(1.0d);
    java.lang.String str10 = money3.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(1);
    boolean b19 = money13.equals((java.lang.Object)(-1.0d));
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money13.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    core.Money money35 = new core.Money(1.0d, currency24, locale34);
    money3.setCurrency(currency24);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money money45 = money40.add(money42);
    core.Money money46 = money38.subtract(money40);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale55 = money48.getLocale();
    money40.setLocale(locale55);
    core.Money money57 = new core.Money(1.0d, currency24, locale55);
    core.Money money58 = new core.Money(0.0d, currency24);
    java.lang.String str59 = money58.toString();
    core.Money money61 = core.Money.dollars(10.0d);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money money66 = money61.add(money63);
    java.util.Locale locale67 = money63.getLocale();
    money58.setLocale(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$1.00"+ "'", str10.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$0.00"+ "'", str59.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(1);
    boolean b21 = money15.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale22 = money15.getLocale();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money money29 = money24.add(money26);
    core.Money money30 = money15.subtract(money24);
    core.Money money31 = money1.add(money30);
    java.math.BigDecimal bigDecimal32 = money31.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money20.subtract(money22);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale37 = money30.getLocale();
    money22.setLocale(locale37);
    core.Money money39 = new core.Money(0.0d, currency17, locale37);
    core.Money money40 = new core.Money(1.0d, currency17);
    core.Money money41 = new core.Money(0.0d, currency17);
    core.Money money42 = new core.Money(0.0d, currency17);
    core.Money money43 = new core.Money((-1L), currency17);
    java.math.BigDecimal bigDecimal44 = money43.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    money7.setAmount(100.0d);
    boolean b15 = money1.equals(money7);
    money7.setAmount(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.subtract(money21);
    core.Money money29 = core.Money.dollars(10.0d);
    boolean b30 = money27.equals(money29);
    boolean b31 = money7.equals((java.lang.Object)b30);
    java.util.Currency currency32 = money7.getCurrency();
    java.util.Locale locale33 = money7.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(10.0d, currency14);
    core.Money money17 = new core.Money(1.0d, currency14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    money17.setCurrency(currency40);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.lang.String str58 = money55.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money55.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money[] money_array73 = money69.divide(10);
    boolean b74 = money66.equals((java.lang.Object)money69);
    core.Money money76 = core.Money.dollars(10.0d);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    core.Money money81 = money76.add(money78);
    core.Money money82 = money69.add(money81);
    boolean b83 = money55.equals((java.lang.Object)money69);
    java.util.Locale locale84 = money69.getLocale();
    core.Money money85 = money17.add(money69);
    money85.setAmount(11.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    core.Money money24 = money14.subtract(money19);
    core.Money money25 = money5.add(money24);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money42 = new core.Money(10.0d, currency40);
    core.Money money43 = new core.Money(1.0d, currency40);
    money24.setCurrency(currency40);
    core.Money money45 = new core.Money(1L, currency40);
    java.util.Locale locale46 = money45.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money((-1L), currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale10 = money3.getLocale();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    money15.setAmount(1.0d);
    java.lang.String str22 = money15.toString();
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(1);
    boolean b45 = money39.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale46 = money39.getLocale();
    core.Money money47 = new core.Money(1.0d, currency36, locale46);
    money15.setCurrency(currency36);
    core.Money money49 = new core.Money(1L, currency36);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money51.setLocale(locale60);
    core.Money money62 = new core.Money(10.0d, currency36, locale60);
    core.Money money63 = new core.Money(1.0d, currency36);
    boolean b64 = money3.equals(money63);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    java.math.BigDecimal bigDecimal76 = money74.amount();
    java.util.Currency currency77 = money74.getCurrency();
    money66.setCurrency(currency77);
    money63.setCurrency(currency77);
    core.Money money80 = new core.Money(1L, currency77);
    core.Money money81 = new core.Money((-1L), currency77);
    java.lang.String str82 = money81.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$1.00"+ "'", str22.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "($1.00)"+ "'", str82.equals("($1.00)"));

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(100.0d, currency16);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(10);
    money20.setAmount(1.0d);
    java.lang.String str27 = money20.toString();
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    core.Money money52 = new core.Money(1.0d, currency41, locale51);
    money20.setCurrency(currency41);
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money money62 = money57.add(money59);
    core.Money money63 = money55.subtract(money57);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(1);
    boolean b71 = money65.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale72 = money65.getLocale();
    money57.setLocale(locale72);
    money20.setLocale(locale72);
    core.Money money75 = new core.Money(1.0d, currency16, locale72);
    java.util.Locale locale76 = null;
    core.Money money77 = new core.Money(0.0d, currency16, locale76);
    core.Money money78 = new core.Money(1.0d, currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$1.00"+ "'", str27.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    double d1 = core.Money.parseDouble("$20.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 20.0d);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money15 = new core.Money(100.0d, currency13);
    java.util.Currency currency16 = money15.getCurrency();
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(10);
    core.Money money30 = money20.subtract(money25);
    core.Money money31 = money15.add(money30);
    core.Money money32 = new core.Money();
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.add(money36);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money42.subtract(money44);
    java.lang.String str51 = money44.toString();
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.subtract(money55);
    core.Money money62 = money44.add(money61);
    boolean b63 = money32.equals((java.lang.Object)money44);
    boolean b65 = money44.equals((java.lang.Object)10.0d);
    java.math.BigDecimal bigDecimal66 = money44.amount();
    core.Money money67 = money15.subtract(money44);
    java.util.Currency currency68 = money44.getCurrency();
    java.lang.String str69 = money44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(1);
    boolean b13 = money7.equals((java.lang.Object)(-1.0d));
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money7.setCurrency(currency18);
    core.Money money20 = new core.Money(10.0d, currency18);
    core.Money money21 = new core.Money(1.0d, currency18);
    core.Money money22 = new core.Money(1L, currency18);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money24.subtract(money33);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    money33.setCurrency(currency49);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.lang.String str58 = money55.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money55.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money money73 = money68.add(money70);
    core.Money money74 = money66.subtract(money68);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    money68.setLocale(locale83);
    core.Money money85 = new core.Money(100.0d, currency63, locale83);
    core.Money money86 = new core.Money(100L, currency63);
    core.Money money87 = money33.add(money86);
    money33.setAmount(100.0d);
    java.util.Locale locale90 = money33.getLocale();
    core.Money money91 = new core.Money(100.0d, currency18, locale90);
    core.Money money92 = new core.Money(1L, currency18);
    core.Money money93 = new core.Money(0L, currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale90);

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money9 = new core.Money();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money9.add(money13);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    core.Money money31 = money21.subtract(money26);
    core.Money money32 = money13.add(money31);
    core.Money money34 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal35 = money34.amount();
    money34.setAmount((-1.0d));
    core.Money money38 = money32.add(money34);
    core.Money money39 = money8.add(money32);
    core.Money money42 = new core.Money();
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money42.add(money46);
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money money57 = money52.add(money54);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(10);
    core.Money money64 = money54.subtract(money59);
    core.Money money65 = money46.add(money64);
    core.Money money67 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal68 = money67.amount();
    money67.setAmount((-1.0d));
    core.Money money71 = money65.add(money67);
    java.util.Currency currency72 = money65.getCurrency();
    core.Money money73 = new core.Money((-1L), currency72);
    core.Money money74 = new core.Money(11.0d, currency72);
    money39.setCurrency(currency72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency72);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(1);
    boolean b24 = money18.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale25 = money18.getLocale();
    core.Money money26 = new core.Money(1.0d, currency15, locale25);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale37 = money30.getLocale();
    money28.setLocale(locale37);
    core.Money money39 = new core.Money(1.0d, currency15, locale37);
    core.Money money40 = new core.Money((-1L), currency15);
    core.Money money41 = new core.Money();
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.add(money45);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money money56 = money51.add(money53);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(10);
    core.Money money63 = money53.subtract(money58);
    core.Money money64 = money45.add(money63);
    core.Money money65 = money40.add(money63);
    money65.setAmount(11.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    boolean b26 = money18.equals((java.lang.Object)money21);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money money33 = money28.add(money30);
    core.Money money34 = money21.add(money33);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.lang.String str38 = money36.toString();
    money36.setAmount(0.0d);
    core.Money money41 = money21.add(money36);
    core.Money money42 = money16.add(money36);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money52 = money44.subtract(money46);
    core.Money money54 = core.Money.dollars(10.0d);
    boolean b55 = money52.equals(money54);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(10);
    boolean b65 = money57.equals((java.lang.Object)money60);
    money60.setAmount(100.0d);
    core.Money money68 = money52.add(money60);
    core.Money money69 = money36.add(money68);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array71 = money68.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(1.0d, currency5);
    java.util.Currency currency7 = money6.getCurrency();
    core.Money money9 = new core.Money();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money9.add(money13);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    core.Money money31 = money21.subtract(money26);
    core.Money money32 = money13.add(money31);
    core.Money money34 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal35 = money34.amount();
    money34.setAmount((-1.0d));
    core.Money money38 = money32.add(money34);
    java.util.Currency currency39 = money32.getCurrency();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(10);
    boolean b49 = money41.equals((java.lang.Object)money44);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money money56 = money51.add(money53);
    core.Money money57 = money44.add(money56);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.lang.String str61 = money59.toString();
    money59.setAmount(0.0d);
    core.Money money64 = money57.subtract(money59);
    core.Money[] money_array66 = money59.divide(1);
    core.Money money67 = new core.Money();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money67.add(money71);
    core.Money money77 = core.Money.dollars(10.0d);
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    core.Money money82 = money77.add(money79);
    core.Money money84 = core.Money.dollars(10.0d);
    java.lang.String str85 = money84.toString();
    java.math.BigDecimal bigDecimal86 = money84.amount();
    core.Money[] money_array88 = money84.divide(10);
    core.Money money89 = money79.subtract(money84);
    core.Money money90 = money71.add(money89);
    java.util.Locale locale91 = money90.getLocale();
    money59.setLocale(locale91);
    core.Money money93 = new core.Money(11.0d, currency39, locale91);
    money6.setLocale(locale91);
    core.Money[] money_array96 = money6.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "$10.00"+ "'", str85.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array96);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money money30 = money25.add(money27);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    core.Money money37 = money27.subtract(money32);
    java.lang.String str38 = money32.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.util.Currency currency59 = money56.getCurrency();
    money48.setCurrency(currency59);
    core.Money money61 = new core.Money(10.0d, currency59);
    core.Money money62 = new core.Money(1.0d, currency59);
    core.Money money63 = new core.Money(0L, currency59);
    core.Money money64 = money40.subtract(money63);
    boolean b65 = money32.equals(money40);
    boolean b66 = money22.equals((java.lang.Object)money32);
    java.util.Locale locale67 = money22.getLocale();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money money76 = money71.add(money73);
    core.Money money77 = money69.subtract(money71);
    java.math.BigDecimal bigDecimal78 = money69.amount();
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    core.Money[] money_array87 = money83.divide(10);
    boolean b88 = money80.equals((java.lang.Object)money83);
    core.Money[] money_array90 = money83.divide(10);
    boolean b91 = money69.equals((java.lang.Object)money_array90);
    core.Money money92 = money22.subtract(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(1L, currency16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    core.Money money46 = new core.Money(1.0d, currency35, locale45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    money48.setLocale(locale57);
    core.Money money59 = new core.Money(1.0d, currency35, locale57);
    money20.setCurrency(currency35);
    core.Money money61 = new core.Money(1L, currency35);
    java.lang.String str62 = money61.toString();
    money61.setAmount(11.0d);
    money61.setAmount(20.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$1.00"+ "'", str62.equals("$1.00"));

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money money9 = money4.add(money6);
    core.Money money10 = money2.subtract(money4);
    core.Money money12 = core.Money.dollars(10.0d);
    boolean b13 = money10.equals(money12);
    java.lang.String str14 = money10.toString();
    java.util.Currency currency15 = money10.getCurrency();
    core.Money money16 = new core.Money(10L, currency15);
    money16.setAmount(11.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$0.00"+ "'", str14.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    java.math.BigDecimal bigDecimal4 = money1.amount();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money24 = new core.Money(10.0d, currency22);
    core.Money money25 = new core.Money(1.0d, currency22);
    core.Money money26 = new core.Money(0L, currency22);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    core.Money money52 = new core.Money(1.0d, currency41, locale51);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money54.setLocale(locale63);
    core.Money money65 = new core.Money(1.0d, currency41, locale63);
    core.Money money66 = new core.Money(0.0d, currency22, locale63);
    java.util.Locale locale67 = money66.getLocale();
    money66.setAmount(100.0d);
    java.util.Currency currency70 = money66.getCurrency();
    core.Money money71 = new core.Money(0.0d, currency70);
    money71.setAmount(0.0d);
    boolean b74 = money1.equals(money71);
    java.util.Locale locale75 = money1.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    core.Money money24 = money14.subtract(money19);
    core.Money money25 = money5.add(money24);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money42 = new core.Money(10.0d, currency40);
    core.Money money43 = new core.Money(1.0d, currency40);
    money24.setCurrency(currency40);
    core.Money money45 = new core.Money(1L, currency40);
    java.lang.String str46 = money45.toString();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array48 = money45.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$1.00"+ "'", str46.equals("$1.00"));

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    java.lang.String str15 = money2.toString();
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money25 = money17.subtract(money19);
    java.lang.String str26 = money19.toString();
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money28.subtract(money30);
    core.Money money37 = money19.add(money36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    boolean b43 = money36.equals(money39);
    java.util.Currency currency44 = money36.getCurrency();
    money2.setCurrency(currency44);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    java.util.Currency currency51 = money48.getCurrency();
    core.Money money52 = new core.Money(1.0d, currency51);
    boolean b53 = money2.equals((java.lang.Object)currency51);
    core.Money money54 = new core.Money(10L, currency51);
    java.math.BigDecimal bigDecimal55 = money54.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.util.Currency currency4 = money1.getCurrency();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(1);
    boolean b15 = money9.equals((java.lang.Object)(-1.0d));
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.util.Currency currency20 = money17.getCurrency();
    money9.setCurrency(currency20);
    core.Money money22 = new core.Money(10.0d, currency20);
    core.Money money23 = new core.Money(1.0d, currency20);
    core.Money money24 = new core.Money(0L, currency20);
    core.Money money25 = money1.subtract(money24);
    java.math.BigDecimal bigDecimal26 = money25.amount();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money42 = new core.Money(10.0d, currency40);
    money25.setCurrency(currency40);
    java.lang.String str44 = money25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale23 = money16.getLocale();
    core.Money money24 = new core.Money(1.0d, currency13, locale23);
    java.lang.Object obj25 = null;
    boolean b26 = money24.equals(obj25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    core.Money money31 = new core.Money();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.add(money35);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.subtract(money43);
    java.lang.String str50 = money43.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money61 = money43.add(money60);
    boolean b62 = money31.equals((java.lang.Object)money43);
    core.Money money63 = money30.add(money31);
    boolean b65 = money63.equals((java.lang.Object)0L);
    money63.setAmount((-1.0d));
    core.Money money68 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money69 = money63.add(money68);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    money1.setAmount(10.0d);
    core.Money[] money_array12 = money1.divide(10);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.lang.String str19 = money16.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money16.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money35 = money27.subtract(money29);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(1);
    boolean b43 = money37.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale44 = money37.getLocale();
    money29.setLocale(locale44);
    core.Money money46 = new core.Money(100.0d, currency24, locale44);
    core.Money money47 = new core.Money(10.0d, currency24);
    core.Money money48 = money1.subtract(money47);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    java.lang.String str57 = money54.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    money54.setCurrency(currency62);
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money money72 = money67.add(money69);
    core.Money money73 = money65.subtract(money67);
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    core.Money[] money_array79 = money75.divide(1);
    boolean b81 = money75.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale82 = money75.getLocale();
    money67.setLocale(locale82);
    core.Money money84 = new core.Money(100.0d, currency62, locale82);
    core.Money money85 = new core.Money(10.0d, currency62);
    core.Money money86 = new core.Money(100L, currency62);
    core.Money money87 = new core.Money((-1L), currency62);
    boolean b88 = money47.equals(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    boolean b16 = money8.equals(money12);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    core.Money money73 = new core.Money(1.0d, currency40, locale71);
    money12.setLocale(locale71);
    java.math.BigDecimal bigDecimal75 = money12.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale13 = money6.getLocale();
    money4.setLocale(locale13);
    java.util.Currency currency15 = money4.getCurrency();
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    money17.setAmount(1.0d);
    java.lang.String str24 = money17.toString();
    java.util.Locale locale25 = money17.getLocale();
    core.Money money26 = new core.Money(10.0d, currency15, locale25);
    core.Money money27 = new core.Money();
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money35 = money27.add(money31);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(10);
    core.Money money49 = money39.subtract(money44);
    core.Money money50 = money31.add(money49);
    java.util.Locale locale51 = money50.getLocale();
    core.Money money52 = new core.Money(0.0d, currency15, locale51);
    core.Money money53 = new core.Money(9.0d, currency15);
    java.lang.String str54 = money53.toString();
    core.Money money55 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money56 = money53.subtract(money55);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$1.00"+ "'", str24.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$9.00"+ "'", str54.equals("$9.00"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    java.lang.String str39 = money26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    java.util.Currency currency39 = money38.getCurrency();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(10);
    boolean b60 = money52.equals((java.lang.Object)money55);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money money67 = money62.add(money64);
    core.Money money68 = money55.add(money67);
    boolean b69 = money41.equals((java.lang.Object)money55);
    java.util.Locale locale70 = money55.getLocale();
    core.Money money71 = money38.subtract(money55);
    java.util.Currency currency72 = money55.getCurrency();
    java.math.BigDecimal bigDecimal73 = money55.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.util.Currency currency4 = money1.getCurrency();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(1);
    boolean b15 = money9.equals((java.lang.Object)(-1.0d));
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.util.Currency currency20 = money17.getCurrency();
    money9.setCurrency(currency20);
    core.Money money22 = new core.Money(10.0d, currency20);
    core.Money money23 = new core.Money(1.0d, currency20);
    core.Money money24 = new core.Money(0L, currency20);
    core.Money money25 = money1.subtract(money24);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money32.setCurrency(currency43);
    core.Money money45 = new core.Money(10.0d, currency43);
    core.Money money46 = new core.Money(1.0d, currency43);
    core.Money money47 = new core.Money(0L, currency43);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    money51.setCurrency(currency62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(1);
    boolean b71 = money65.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale72 = money65.getLocale();
    core.Money money73 = new core.Money(1.0d, currency62, locale72);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(1);
    boolean b83 = money77.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale84 = money77.getLocale();
    money75.setLocale(locale84);
    core.Money money86 = new core.Money(1.0d, currency62, locale84);
    core.Money money87 = new core.Money(0.0d, currency43, locale84);
    java.util.Locale locale88 = money87.getLocale();
    money87.setAmount(100.0d);
    java.util.Currency currency91 = money87.getCurrency();
    core.Money money92 = new core.Money(0.0d, currency91);
    boolean b93 = money25.equals((java.lang.Object)currency91);
    java.util.Locale locale94 = money25.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale94);

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money[] money_array20 = money18.divide(10);
    java.util.Locale locale21 = money18.getLocale();
    core.Money money22 = money1.subtract(money18);
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money24.subtract(money26);
    java.lang.String str33 = money26.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money35.subtract(money37);
    core.Money money44 = money26.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    boolean b50 = money43.equals(money46);
    java.util.Currency currency51 = money43.getCurrency();
    core.Money money52 = money22.subtract(money43);
    java.lang.String str53 = money52.toString();
    java.util.Currency currency54 = money52.getCurrency();
    core.Money money55 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money56 = money52.subtract(money55);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "($10.00)"+ "'", str53.equals("($10.00)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(1.0d, currency15);
    core.Money money19 = new core.Money(0.0d, currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.util.Currency currency9 = money6.getCurrency();
    money1.setCurrency(currency9);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    boolean b29 = money1.equals((java.lang.Object)money15);
    java.lang.String str30 = money1.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money money37 = money32.add(money34);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(10);
    core.Money money44 = money34.subtract(money39);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money[] money_array51 = money47.divide(1);
    boolean b53 = money47.equals((java.lang.Object)(-1.0d));
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.util.Currency currency58 = money55.getCurrency();
    money47.setCurrency(currency58);
    core.Money money60 = new core.Money(10.0d, currency58);
    java.lang.String str61 = money60.toString();
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money money70 = money65.add(money67);
    core.Money money71 = money63.subtract(money65);
    java.lang.String str72 = money65.toString();
    core.Money money73 = money60.add(money65);
    core.Money money74 = money39.add(money60);
    boolean b75 = money1.equals((java.lang.Object)money60);
    java.util.Locale locale76 = money1.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale76);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.math.BigDecimal bigDecimal10 = money1.amount();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money[] money_array22 = money15.divide(10);
    boolean b23 = money1.equals((java.lang.Object)money_array22);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(10);
    money28.setAmount(1.0d);
    java.lang.String str35 = money28.toString();
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money38.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale59 = money52.getLocale();
    core.Money money60 = new core.Money(1.0d, currency49, locale59);
    money28.setCurrency(currency49);
    core.Money money62 = new core.Money(1L, currency49);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money64.setLocale(locale73);
    core.Money money75 = new core.Money(10.0d, currency49, locale73);
    core.Money money76 = new core.Money(1.0d, currency49);
    core.Money money77 = money1.add(money76);
    core.Money[] money_array79 = money77.divide(10);
    java.util.Currency currency80 = money77.getCurrency();
    money77.setAmount(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$1.00"+ "'", str35.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency80);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    java.lang.String str39 = money38.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$0.00"+ "'", str39.equals("$0.00"));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    core.Money money1 = core.Money.dollars((-1.0d));
    core.Money money2 = new core.Money();
    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money money9 = money4.add(money6);
    core.Money money10 = money2.add(money6);
    boolean b11 = money1.equals(money10);
    money10.setAmount((-1.0d));
    money10.setAmount(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    double d1 = core.Money.parseDouble("($90.00)");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 90.0d);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    boolean b26 = money18.equals((java.lang.Object)money21);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money money33 = money28.add(money30);
    core.Money money34 = money21.add(money33);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.lang.String str38 = money36.toString();
    money36.setAmount(0.0d);
    core.Money money41 = money21.add(money36);
    core.Money money42 = money16.add(money36);
    money36.setAmount(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.lang.String str13 = money10.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money10.setCurrency(currency18);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money38 = new core.Money(10.0d, currency36);
    core.Money money39 = new core.Money(1.0d, currency36);
    core.Money money40 = new core.Money(0L, currency36);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    java.util.Currency currency55 = money52.getCurrency();
    money44.setCurrency(currency55);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(1);
    boolean b64 = money58.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale65 = money58.getLocale();
    core.Money money66 = new core.Money(1.0d, currency55, locale65);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money[] money_array74 = money70.divide(1);
    boolean b76 = money70.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale77 = money70.getLocale();
    money68.setLocale(locale77);
    core.Money money79 = new core.Money(1.0d, currency55, locale77);
    core.Money money80 = new core.Money(0.0d, currency36, locale77);
    java.util.Locale locale81 = money80.getLocale();
    java.util.Currency currency82 = money80.getCurrency();
    core.Money money83 = money10.subtract(money80);
    core.Money money84 = money0.add(money83);
    core.Money[] money_array86 = money83.divide(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array8 = money6.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(10.0d, currency39);
    core.Money money42 = new core.Money(1.0d, currency39);
    money23.setCurrency(currency39);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array45 = money23.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    java.util.Currency currency8 = money7.getCurrency();
    core.Money money9 = new core.Money(1.0d, currency8);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money[] money_array18 = money14.divide(10);
    boolean b19 = money11.equals((java.lang.Object)money14);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money14.add(money26);
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money30 = money27.add(money29);
    java.util.Currency currency31 = money29.getCurrency();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money29.subtract(money33);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    java.util.Currency currency54 = money51.getCurrency();
    money43.setCurrency(currency54);
    core.Money money56 = new core.Money(10.0d, currency54);
    core.Money money57 = new core.Money(0L, currency54);
    money39.setCurrency(currency54);
    java.util.Currency currency59 = money39.getCurrency();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(10);
    money62.setAmount(1.0d);
    java.lang.String str69 = money62.toString();
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money[] money_array76 = money72.divide(1);
    boolean b78 = money72.equals((java.lang.Object)(-1.0d));
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    java.util.Currency currency83 = money80.getCurrency();
    money72.setCurrency(currency83);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money[] money_array90 = money86.divide(1);
    boolean b92 = money86.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale93 = money86.getLocale();
    core.Money money94 = new core.Money(1.0d, currency83, locale93);
    money62.setCurrency(currency83);
    core.Money money96 = new core.Money(1L, currency83);
    core.Money money97 = money39.add(money96);
    java.util.Locale locale98 = money39.getLocale();
    money9.setLocale(locale98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$1.00"+ "'", str69.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale98);

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    core.Money money1 = new core.Money();
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.add(money5);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money5.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal27 = money26.amount();
    money26.setAmount((-1.0d));
    core.Money money30 = money24.add(money26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    money32.setAmount(1.0d);
    java.lang.String str39 = money32.toString();
    java.util.Locale locale40 = money32.getLocale();
    core.Money money41 = money30.add(money32);
    core.Money money43 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal44 = money43.amount();
    core.Money[] money_array46 = money43.divide(100);
    core.Money money47 = money41.subtract(money43);
    java.lang.String str48 = money47.toString();
    java.util.Currency currency49 = money47.getCurrency();
    core.Money money50 = new core.Money(100.0d, currency49);
    java.util.Locale locale51 = null;
    // The following exception was thrown during execution in test generation
    try {
      money50.setLocale(locale51);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$1.00"+ "'", str39.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$0.00"+ "'", str48.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.lang.String str9 = money6.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money6.setCurrency(currency14);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money25 = money17.subtract(money19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    money19.setLocale(locale34);
    core.Money money36 = new core.Money(100.0d, currency14, locale34);
    core.Money money37 = new core.Money(1L, currency14);
    core.Money money38 = new core.Money(100L, currency14);
    core.Money money39 = new core.Money(1.0d, currency14);
    core.Money money40 = new core.Money(100.0d, currency14);
    money40.setAmount(70.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    money2.setLocale(locale11);
    java.util.Currency currency13 = money2.getCurrency();
    core.Money money14 = new core.Money(10L, currency13);
    java.lang.String str15 = money14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.subtract(money34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale49 = money42.getLocale();
    money34.setLocale(locale49);
    core.Money money51 = new core.Money(100.0d, currency29, locale49);
    money5.setCurrency(currency29);
    core.Money money53 = new core.Money(0.0d, currency29);
    core.Money money54 = new core.Money();
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.add(money58);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money money69 = money64.add(money66);
    boolean b70 = money62.equals(money66);
    java.util.Locale locale71 = money62.getLocale();
    boolean b72 = money53.equals((java.lang.Object)money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    java.math.BigDecimal bigDecimal9 = money1.amount();
    java.util.Currency currency10 = money1.getCurrency();
    java.lang.String str11 = money1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$1.00"+ "'", str11.equals("$1.00"));

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    money1.setAmount(0.0d);
    java.lang.String str37 = money1.toString();
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(10);
    boolean b47 = money39.equals((java.lang.Object)money42);
    core.Money money49 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal50 = money49.amount();
    money49.setAmount((-1.0d));
    boolean b53 = money39.equals(money49);
    boolean b54 = money1.equals(money49);
    money49.setAmount(9.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$0.00"+ "'", str37.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(10.0d, currency14);
    core.Money money17 = new core.Money(1.0d, currency14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    money17.setCurrency(currency40);
    core.Money money55 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal56 = money55.amount();
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(10);
    boolean b66 = money58.equals((java.lang.Object)money61);
    money61.setAmount(100.0d);
    boolean b69 = money55.equals(money61);
    money61.setAmount(10.0d);
    core.Money money73 = core.Money.dollars(10.0d);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money money80 = money75.add(money77);
    core.Money money81 = money73.subtract(money75);
    core.Money money83 = core.Money.dollars(10.0d);
    boolean b84 = money81.equals(money83);
    boolean b85 = money61.equals((java.lang.Object)b84);
    java.util.Currency currency86 = money61.getCurrency();
    boolean b87 = money17.equals((java.lang.Object)money61);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array89 = money61.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal26 = money25.amount();
    money25.setAmount((-1.0d));
    core.Money money29 = money23.add(money25);
    java.util.Currency currency30 = money23.getCurrency();
    java.math.BigDecimal bigDecimal31 = money23.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    java.math.BigDecimal bigDecimal24 = money23.amount();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale39 = money32.getLocale();
    money30.setLocale(locale39);
    java.util.Currency currency41 = money30.getCurrency();
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(10);
    money43.setAmount(1.0d);
    java.lang.String str50 = money43.toString();
    java.util.Locale locale51 = money43.getLocale();
    core.Money money52 = new core.Money(10.0d, currency41, locale51);
    core.Money money53 = new core.Money();
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.add(money57);
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money money68 = money63.add(money65);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money[] money_array74 = money70.divide(10);
    core.Money money75 = money65.subtract(money70);
    core.Money money76 = money57.add(money75);
    java.util.Locale locale77 = money76.getLocale();
    core.Money money78 = new core.Money(0.0d, currency41, locale77);
    core.Money money79 = new core.Money(9.0d, currency41);
    money23.setCurrency(currency41);
    core.Money[] money_array82 = money23.divide(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$1.00"+ "'", str50.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array82);

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(100.0d, currency17);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    money21.setAmount(1.0d);
    java.lang.String str28 = money21.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    core.Money money53 = new core.Money(1.0d, currency42, locale52);
    money21.setCurrency(currency42);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money64 = money56.subtract(money58);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money58.setLocale(locale73);
    money21.setLocale(locale73);
    core.Money money76 = new core.Money(1.0d, currency17, locale73);
    core.Money money77 = money1.subtract(money76);
    java.lang.String str78 = money76.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$1.00"+ "'", str28.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$1.00"+ "'", str78.equals("$1.00"));

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    core.Money money1 = core.Money.dollars(1.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    java.lang.String str7 = money4.toString();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money4.setCurrency(currency12);
    core.Money money14 = new core.Money(100L, currency12);
    boolean b15 = money1.equals(money14);
    java.lang.String str16 = money14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$100.00"+ "'", str16.equals("$100.00"));

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money money29 = money24.add(money26);
    core.Money money30 = money20.subtract(money24);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(1);
    boolean b40 = money34.equals((java.lang.Object)(-1.0d));
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money34.setCurrency(currency45);
    core.Money money47 = new core.Money(10.0d, currency45);
    core.Money money48 = new core.Money(0L, currency45);
    money30.setCurrency(currency45);
    java.util.Currency currency50 = money30.getCurrency();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    java.lang.String str61 = money58.toString();
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    java.util.Currency currency66 = money63.getCurrency();
    money58.setCurrency(currency66);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money[] money_array76 = money72.divide(10);
    boolean b77 = money69.equals((java.lang.Object)money72);
    core.Money money79 = core.Money.dollars(10.0d);
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money money84 = money79.add(money81);
    core.Money money85 = money72.add(money84);
    boolean b86 = money58.equals((java.lang.Object)money72);
    java.util.Locale locale87 = money72.getLocale();
    money52.setLocale(locale87);
    core.Money money89 = new core.Money(100.0d, currency50, locale87);
    java.math.BigDecimal bigDecimal90 = money89.amount();
    java.lang.String str91 = money89.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "$100.00"+ "'", str91.equals("$100.00"));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    double d1 = core.Money.parseDouble("($1.00)");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 1.0d);

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    money24.setAmount(11.0d);
    java.util.Locale locale27 = money24.getLocale();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    boolean b37 = money29.equals((java.lang.Object)money32);
    core.Money[] money_array39 = money32.divide(10);
    boolean b40 = money24.equals(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    java.lang.String str15 = money2.toString();
    money2.setAmount(0.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money[] money_array21 = money19.divide(10);
    java.util.Locale locale22 = money19.getLocale();
    core.Money money23 = money2.subtract(money19);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    java.lang.String str28 = money25.toString();
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    java.util.Currency currency33 = money30.getCurrency();
    money25.setCurrency(currency33);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(10);
    boolean b44 = money36.equals((java.lang.Object)money39);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money52 = money39.add(money51);
    boolean b53 = money25.equals((java.lang.Object)money39);
    java.util.Locale locale54 = money39.getLocale();
    java.lang.String str55 = money39.toString();
    java.util.Currency currency56 = money39.getCurrency();
    money2.setCurrency(currency56);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    core.Money money64 = new core.Money(0L, currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(10);
    money66.setAmount(1.0d);
    core.Money money73 = money64.add(money66);
    java.util.Locale locale74 = money73.getLocale();
    core.Money money75 = new core.Money(10.0d, currency56, locale74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale74);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    java.lang.String str24 = money23.toString();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array26 = money23.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money12 = new core.Money(100L, currency10);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    money15.setAmount(1.0d);
    java.lang.String str22 = money15.toString();
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(1);
    boolean b45 = money39.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale46 = money39.getLocale();
    core.Money money47 = new core.Money(1.0d, currency36, locale46);
    money15.setCurrency(currency36);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money money57 = money52.add(money54);
    core.Money money58 = money50.subtract(money52);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    money52.setLocale(locale67);
    core.Money money69 = new core.Money(1.0d, currency36, locale67);
    money12.setLocale(locale67);
    java.math.BigDecimal bigDecimal71 = money12.amount();
    core.Money[] money_array73 = money12.divide(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$1.00"+ "'", str22.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array73);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(1L, currency16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    core.Money money46 = new core.Money(1.0d, currency35, locale45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    money48.setLocale(locale57);
    core.Money money59 = new core.Money(1.0d, currency35, locale57);
    money20.setCurrency(currency35);
    core.Money money61 = new core.Money(1L, currency35);
    java.lang.String str62 = money61.toString();
    money61.setAmount(11.0d);
    java.math.BigDecimal bigDecimal65 = money61.amount();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array67 = money61.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$1.00"+ "'", str62.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    java.util.Locale locale65 = money63.getLocale();
    java.math.BigDecimal bigDecimal66 = money63.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array11 = money1.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money[] money_array4 = money1.divide(100);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(10);
    boolean b14 = money6.equals((java.lang.Object)money9);
    boolean b15 = money1.equals(money6);
    java.math.BigDecimal bigDecimal16 = money1.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money10.subtract(money12);
    java.lang.String str19 = money12.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    core.Money money30 = money12.add(money29);
    boolean b31 = money0.equals((java.lang.Object)money12);
    java.util.Locale locale32 = money0.getLocale();
    java.lang.String str33 = money0.toString();
    java.math.BigDecimal bigDecimal34 = money0.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$0.00"+ "'", str33.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money money30 = money25.add(money27);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    core.Money money37 = money27.subtract(money32);
    java.lang.String str38 = money32.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.util.Currency currency59 = money56.getCurrency();
    money48.setCurrency(currency59);
    core.Money money61 = new core.Money(10.0d, currency59);
    core.Money money62 = new core.Money(1.0d, currency59);
    core.Money money63 = new core.Money(0L, currency59);
    core.Money money64 = money40.subtract(money63);
    boolean b65 = money32.equals(money40);
    boolean b66 = money22.equals((java.lang.Object)money32);
    java.util.Locale locale67 = money32.getLocale();
    java.lang.String str68 = money32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    money8.setAmount(1.0d);
    core.Money money15 = money6.add(money8);
    java.math.BigDecimal bigDecimal16 = money8.amount();
    core.Money money18 = new core.Money();
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money money25 = money20.add(money22);
    core.Money money26 = money18.add(money22);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    java.lang.String str41 = money28.toString();
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    java.lang.String str48 = money45.toString();
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money45.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money64 = money56.subtract(money58);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money58.setLocale(locale73);
    core.Money money75 = new core.Money(100.0d, currency53, locale73);
    core.Money money76 = new core.Money(10.0d, currency53);
    money28.setCurrency(currency53);
    money22.setCurrency(currency53);
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    core.Money[] money_array87 = money83.divide(10);
    boolean b88 = money80.equals((java.lang.Object)money83);
    core.Money money90 = core.Money.dollars(10.0d);
    core.Money money92 = core.Money.dollars(10.0d);
    java.lang.String str93 = money92.toString();
    java.math.BigDecimal bigDecimal94 = money92.amount();
    core.Money money95 = money90.add(money92);
    core.Money money96 = money83.add(money95);
    java.util.Locale locale97 = money96.getLocale();
    core.Money money98 = new core.Money(9.0d, currency53, locale97);
    core.Money money99 = money8.add(money98);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "$10.00"+ "'", str93.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money99);

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money[] money_array3 = money1.divide(10);
    java.lang.String str4 = money1.toString();
    java.math.BigDecimal bigDecimal5 = money1.amount();
    core.Money money6 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b7 = money1.equals(money6);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(10);
    money13.setAmount(1.0d);
    java.lang.String str20 = money13.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    java.util.Currency currency34 = money31.getCurrency();
    money23.setCurrency(currency34);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(1);
    boolean b43 = money37.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale44 = money37.getLocale();
    core.Money money45 = new core.Money(1.0d, currency34, locale44);
    money13.setCurrency(currency34);
    core.Money money47 = new core.Money(1L, currency34);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale58 = money51.getLocale();
    money49.setLocale(locale58);
    core.Money money60 = new core.Money(10.0d, currency34, locale58);
    core.Money money61 = new core.Money(1.0d, currency34);
    boolean b62 = money1.equals(money61);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    java.util.Currency currency75 = money72.getCurrency();
    money64.setCurrency(currency75);
    money61.setCurrency(currency75);
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money[] money_array86 = money82.divide(10);
    boolean b87 = money79.equals((java.lang.Object)money82);
    core.Money money89 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal90 = money89.amount();
    money89.setAmount((-1.0d));
    boolean b93 = money79.equals(money89);
    boolean b94 = money61.equals(money89);
    java.util.Locale locale95 = money61.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$1.00"+ "'", str20.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale95);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    java.util.Currency currency1 = null;
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money4.subtract(money13);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    money13.setCurrency(currency29);
    core.Money money32 = new core.Money(10L, currency29);
    core.Money money33 = new core.Money();
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money money40 = money35.add(money37);
    core.Money money41 = money33.add(money37);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    java.lang.String str52 = money45.toString();
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money63 = money45.add(money62);
    boolean b64 = money33.equals((java.lang.Object)money45);
    core.Money money65 = money32.add(money33);
    java.util.Locale locale66 = money32.getLocale();
    core.Money money67 = new core.Money();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money67.add(money71);
    java.math.BigDecimal bigDecimal76 = money75.amount();
    core.Money money77 = money32.add(money75);
    java.lang.String str78 = money32.toString();
    java.util.Locale locale79 = money32.getLocale();
    // The following exception was thrown during execution in test generation
    try {
      core.Money money80 = new core.Money(11.0d, currency1, locale79);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale79);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    core.Money money31 = new core.Money();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.add(money35);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.subtract(money43);
    java.lang.String str50 = money43.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money61 = money43.add(money60);
    boolean b62 = money31.equals((java.lang.Object)money43);
    core.Money money63 = money30.add(money31);
    java.util.Locale locale64 = money30.getLocale();
    money30.setAmount(100.0d);
    core.Money[] money_array68 = money30.divide(10);
    java.lang.String str69 = money30.toString();
    core.Money money70 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money71 = money30.add(money70);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$100.00"+ "'", str69.equals("$100.00"));

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    core.Money money31 = new core.Money();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.add(money35);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.subtract(money43);
    java.lang.String str50 = money43.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money61 = money43.add(money60);
    boolean b62 = money31.equals((java.lang.Object)money43);
    core.Money money63 = money30.add(money31);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(10);
    boolean b73 = money65.equals((java.lang.Object)money68);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money money80 = money75.add(money77);
    core.Money money81 = money68.add(money80);
    core.Money money83 = core.Money.dollars(10.0d);
    core.Money money84 = money81.add(money83);
    core.Money money85 = money31.add(money83);
    core.Money money86 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money87 = money85.add(money86);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.util.Currency currency9 = money6.getCurrency();
    money1.setCurrency(currency9);
    boolean b12 = money1.equals((java.lang.Object)(byte)100);
    java.lang.Object obj13 = null;
    boolean b14 = money1.equals(obj13);
    java.lang.String str15 = money1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    java.lang.String str17 = money1.toString();
    money1.setAmount(70.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.lang.String str23 = money21.toString();
    java.math.BigDecimal bigDecimal24 = money21.amount();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money44 = new core.Money(10.0d, currency42);
    core.Money money45 = new core.Money(1.0d, currency42);
    core.Money money46 = new core.Money(0L, currency42);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    java.util.Currency currency61 = money58.getCurrency();
    money50.setCurrency(currency61);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    core.Money money72 = new core.Money(1.0d, currency61, locale71);
    core.Money money74 = core.Money.dollars(10.0d);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    money74.setLocale(locale83);
    core.Money money85 = new core.Money(1.0d, currency61, locale83);
    core.Money money86 = new core.Money(0.0d, currency42, locale83);
    java.util.Locale locale87 = money86.getLocale();
    money86.setAmount(100.0d);
    java.util.Currency currency90 = money86.getCurrency();
    core.Money money91 = new core.Money(0.0d, currency90);
    money91.setAmount(0.0d);
    boolean b94 = money21.equals(money91);
    boolean b95 = money1.equals(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$0.00"+ "'", str17.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money23 = new core.Money(10L, currency22);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(0.0d, currency39);
    core.Money money42 = new core.Money(0.0d, currency39);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money52 = money44.subtract(money46);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(1);
    boolean b60 = money54.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale61 = money54.getLocale();
    money46.setLocale(locale61);
    java.util.Locale locale63 = money46.getLocale();
    core.Money money64 = new core.Money(100.0d, currency39, locale63);
    money23.setCurrency(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(10);
    boolean b11 = money3.equals((java.lang.Object)money6);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money6.add(money18);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money22 = money19.add(money21);
    java.util.Currency currency23 = money21.getCurrency();
    core.Money money25 = core.Money.dollars(10.0d);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money money30 = money25.add(money27);
    core.Money money31 = money21.subtract(money25);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(1);
    boolean b41 = money35.equals((java.lang.Object)(-1.0d));
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    java.util.Currency currency46 = money43.getCurrency();
    money35.setCurrency(currency46);
    core.Money money48 = new core.Money(10.0d, currency46);
    core.Money money49 = new core.Money(0L, currency46);
    money31.setCurrency(currency46);
    java.util.Currency currency51 = money31.getCurrency();
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.lang.String str62 = money59.toString();
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    java.util.Currency currency67 = money64.getCurrency();
    money59.setCurrency(currency67);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(10);
    boolean b78 = money70.equals((java.lang.Object)money73);
    core.Money money80 = core.Money.dollars(10.0d);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money money85 = money80.add(money82);
    core.Money money86 = money73.add(money85);
    boolean b87 = money59.equals((java.lang.Object)money73);
    java.util.Locale locale88 = money73.getLocale();
    money53.setLocale(locale88);
    core.Money money90 = new core.Money(100.0d, currency51, locale88);
    core.Money money91 = new core.Money((-1.0d), currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    money24.setAmount(11.0d);
    java.util.Locale locale27 = money24.getLocale();
    core.Money money28 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b29 = money24.equals(money28);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale27);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(10);
    money3.setAmount(1.0d);
    java.lang.String str10 = money3.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(1);
    boolean b19 = money13.equals((java.lang.Object)(-1.0d));
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money13.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    core.Money money35 = new core.Money(1.0d, currency24, locale34);
    money3.setCurrency(currency24);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money money45 = money40.add(money42);
    core.Money money46 = money38.subtract(money40);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale55 = money48.getLocale();
    money40.setLocale(locale55);
    core.Money money57 = new core.Money(1.0d, currency24, locale55);
    core.Money money58 = new core.Money(0.0d, currency24);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(1);
    boolean b67 = money61.equals((java.lang.Object)(-1.0d));
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    java.util.Currency currency72 = money69.getCurrency();
    money61.setCurrency(currency72);
    core.Money money74 = new core.Money(10.0d, currency72);
    money58.setCurrency(currency72);
    core.Money[] money_array77 = money58.divide(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$1.00"+ "'", str10.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(10.0d, currency39);
    core.Money money42 = new core.Money(1.0d, currency39);
    money23.setCurrency(currency39);
    money23.setAmount(1.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    java.lang.String str52 = money49.toString();
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    java.util.Currency currency57 = money54.getCurrency();
    money49.setCurrency(currency57);
    core.Money money60 = core.Money.dollars(10.0d);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money money67 = money62.add(money64);
    core.Money money68 = money60.subtract(money62);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money[] money_array74 = money70.divide(1);
    boolean b76 = money70.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale77 = money70.getLocale();
    money62.setLocale(locale77);
    core.Money money79 = new core.Money(100.0d, currency57, locale77);
    core.Money money80 = new core.Money(1L, currency57);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money[] money_array86 = money82.divide(10);
    money82.setAmount(1.0d);
    java.lang.String str89 = money82.toString();
    java.math.BigDecimal bigDecimal90 = money82.amount();
    core.Money money91 = money80.add(money82);
    java.util.Locale locale92 = money80.getLocale();
    java.util.Locale locale93 = money80.getLocale();
    money23.setLocale(locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "$1.00"+ "'", str89.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(1.0d, currency15);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(10);
    money20.setAmount(1.0d);
    java.lang.String str27 = money20.toString();
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    core.Money money52 = new core.Money(1.0d, currency41, locale51);
    money20.setCurrency(currency41);
    money18.setCurrency(currency41);
    core.Money money55 = new core.Money(10.0d, currency41);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    java.lang.String str61 = money58.toString();
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    java.util.Currency currency66 = money63.getCurrency();
    money58.setCurrency(currency66);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    java.lang.String str72 = money69.toString();
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    java.math.BigDecimal bigDecimal76 = money74.amount();
    java.util.Currency currency77 = money74.getCurrency();
    money69.setCurrency(currency77);
    boolean b80 = money69.equals((java.lang.Object)(byte)100);
    boolean b81 = money58.equals((java.lang.Object)money69);
    java.util.Currency currency82 = money58.getCurrency();
    core.Money money83 = new core.Money(100.0d, currency82);
    core.Money money84 = money55.add(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$1.00"+ "'", str27.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    java.lang.String str65 = money10.toString();
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    java.lang.String str71 = money68.toString();
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    java.util.Currency currency76 = money73.getCurrency();
    money68.setCurrency(currency76);
    core.Money money78 = new core.Money(0.0d, currency76);
    core.Money money79 = money10.add(money78);
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money[] money_array85 = money81.divide(1);
    boolean b87 = money81.equals((java.lang.Object)(-1.0d));
    core.Money money88 = money78.subtract(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money12 = new core.Money(100L, currency10);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money[] money_array18 = money14.divide(1);
    boolean b20 = money14.equals((java.lang.Object)(-1.0d));
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    java.util.Currency currency25 = money22.getCurrency();
    money14.setCurrency(currency25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale35 = money28.getLocale();
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money28.subtract(money37);
    core.Money money44 = money14.add(money43);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    java.util.Currency currency61 = money58.getCurrency();
    money50.setCurrency(currency61);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money money71 = money66.add(money68);
    core.Money money72 = money64.subtract(money66);
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    java.math.BigDecimal bigDecimal76 = money74.amount();
    core.Money[] money_array78 = money74.divide(1);
    boolean b80 = money74.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale81 = money74.getLocale();
    money66.setLocale(locale81);
    core.Money money83 = new core.Money(0.0d, currency61, locale81);
    core.Money money84 = new core.Money(1.0d, currency61);
    core.Money money85 = new core.Money(0.0d, currency61);
    core.Money money86 = new core.Money(0.0d, currency61);
    money44.setCurrency(currency61);
    boolean b88 = money12.equals((java.lang.Object)money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money21 = new core.Money(1L, currency17);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(1);
    boolean b45 = money39.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale46 = money39.getLocale();
    core.Money money47 = new core.Money(1.0d, currency36, locale46);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale58 = money51.getLocale();
    money49.setLocale(locale58);
    core.Money money60 = new core.Money(1.0d, currency36, locale58);
    money21.setCurrency(currency36);
    core.Money money62 = new core.Money(0L, currency36);
    core.Money money63 = new core.Money((-1.0d), currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale58);

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money[] money_array26 = money22.divide(10);
    money22.setAmount(1.0d);
    java.lang.String str29 = money22.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money32.setCurrency(currency43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(1);
    boolean b52 = money46.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale53 = money46.getLocale();
    core.Money money54 = new core.Money(1.0d, currency43, locale53);
    money22.setCurrency(currency43);
    money20.setCurrency(currency43);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(10);
    core.Money money70 = money60.subtract(money65);
    java.util.Locale locale71 = money65.getLocale();
    core.Money money72 = new core.Money((-1.0d), currency43, locale71);
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(10);
    boolean b82 = money74.equals((java.lang.Object)money77);
    core.Money money84 = core.Money.dollars(10.0d);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money money89 = money84.add(money86);
    core.Money money90 = money77.add(money89);
    java.util.Locale locale91 = money90.getLocale();
    core.Money money92 = new core.Money(1.0d, currency43, locale91);
    core.Money money93 = new core.Money(10L, currency43);
    java.lang.String str94 = money93.toString();
    java.util.Currency currency95 = money93.getCurrency();
    money93.setAmount(90.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$1.00"+ "'", str29.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "$10.00"+ "'", str94.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency95);

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    core.Money money24 = money14.subtract(money19);
    core.Money money25 = money5.add(money24);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money42 = new core.Money(10.0d, currency40);
    core.Money money43 = new core.Money(1.0d, currency40);
    money24.setCurrency(currency40);
    core.Money money45 = new core.Money((-1.0d), currency40);
    java.math.BigDecimal bigDecimal46 = money45.amount();
    money45.setAmount((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(0.0d, currency15);
    core.Money money18 = new core.Money(0.0d, currency15);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money20.subtract(money22);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale37 = money30.getLocale();
    money22.setLocale(locale37);
    java.util.Locale locale39 = money22.getLocale();
    core.Money money40 = new core.Money(100.0d, currency15, locale39);
    core.Money[] money_array42 = money40.divide(10);
    java.lang.String str43 = money40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$100.00"+ "'", str43.equals("$100.00"));

  }

  @Test
  public void test245() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test245"); }


    core.Money money1 = new core.Money();
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.add(money5);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money5.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(10);
    boolean b34 = money26.equals((java.lang.Object)money29);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money money41 = money36.add(money38);
    core.Money money42 = money29.add(money41);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money45 = money42.add(money44);
    java.util.Currency currency46 = money45.getCurrency();
    money23.setCurrency(currency46);
    core.Money money48 = new core.Money();
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money56 = money48.add(money52);
    java.util.Locale locale57 = money56.getLocale();
    core.Money money58 = new core.Money(1.0d, currency46, locale57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(10);
    boolean b68 = money60.equals((java.lang.Object)money63);
    core.Money money70 = core.Money.dollars(10.0d);
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money money75 = money70.add(money72);
    core.Money money76 = money63.add(money75);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.lang.String str80 = money78.toString();
    money78.setAmount(0.0d);
    core.Money money83 = money76.subtract(money78);
    java.math.BigDecimal bigDecimal84 = money83.amount();
    boolean b85 = money58.equals(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test246() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test246"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    java.math.BigDecimal bigDecimal4 = money1.amount();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    core.Money[] money_array14 = money10.divide(1);
    boolean b16 = money10.equals((java.lang.Object)(-1.0d));
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.util.Currency currency21 = money18.getCurrency();
    money10.setCurrency(currency21);
    core.Money money23 = new core.Money(10.0d, currency21);
    core.Money money24 = new core.Money(1.0d, currency21);
    core.Money money25 = new core.Money(0L, currency21);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(1);
    boolean b61 = money55.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale62 = money55.getLocale();
    money53.setLocale(locale62);
    core.Money money64 = new core.Money(1.0d, currency40, locale62);
    core.Money money65 = new core.Money(0.0d, currency21, locale62);
    java.util.Locale locale66 = money65.getLocale();
    money1.setLocale(locale66);
    java.lang.String str68 = money1.toString();
    money1.setAmount(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));

  }

  @Test
  public void test247() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test247"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    java.lang.String str8 = money5.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money5.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.subtract(money18);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    money18.setLocale(locale33);
    core.Money money35 = new core.Money(100.0d, currency13, locale33);
    core.Money money36 = new core.Money(1L, currency13);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(10);
    money38.setAmount(1.0d);
    java.lang.String str45 = money38.toString();
    java.math.BigDecimal bigDecimal46 = money38.amount();
    core.Money money47 = money36.add(money38);
    java.util.Currency currency48 = money38.getCurrency();
    core.Money money49 = new core.Money(20.0d, currency48);
    core.Money money50 = new core.Money((-1L), currency48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$1.00"+ "'", str45.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency48);

  }

  @Test
  public void test248() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test248"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    java.lang.String str8 = money5.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money5.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.subtract(money18);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    money18.setLocale(locale33);
    core.Money money35 = new core.Money(100.0d, currency13, locale33);
    core.Money money36 = new core.Money(10.0d, currency13);
    core.Money money37 = new core.Money(100L, currency13);
    core.Money money38 = new core.Money((-1.0d), currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);

  }

  @Test
  public void test249() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test249"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(1.0d, currency15);
    core.Money money19 = new core.Money(10.0d, currency15);
    java.util.Locale locale20 = money19.getLocale();
    java.lang.String str21 = money19.toString();
    java.lang.String str22 = money19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));

  }

  @Test
  public void test250() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test250"); }


    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    java.util.Currency currency8 = money7.getCurrency();
    java.util.Currency currency9 = money7.getCurrency();
    core.Money money10 = new core.Money(0.0d, currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);

  }

  @Test
  public void test251() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test251"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(1);
    boolean b40 = money34.equals((java.lang.Object)(-1.0d));
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money34.setCurrency(currency45);
    core.Money money47 = new core.Money(10.0d, currency45);
    core.Money money48 = new core.Money(1.0d, currency45);
    core.Money money49 = new core.Money(1L, currency45);
    core.Money money50 = new core.Money(10.0d, currency45);
    boolean b51 = money10.equals((java.lang.Object)10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    core.Money money60 = money10.subtract(money53);
    java.lang.String str61 = money60.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$0.00"+ "'", str61.equals("$0.00"));

  }

  @Test
  public void test252() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test252"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.lang.String str36 = money33.toString();
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money33.setCurrency(currency41);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money52 = money44.subtract(money46);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(1);
    boolean b60 = money54.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale61 = money54.getLocale();
    money46.setLocale(locale61);
    core.Money money63 = new core.Money(100.0d, currency41, locale61);
    core.Money money64 = new core.Money(100L, currency41);
    core.Money money65 = money11.add(money64);
    java.lang.String str66 = money11.toString();
    java.util.Currency currency67 = money11.getCurrency();
    core.Money money68 = new core.Money(1L, currency67);
    java.util.Currency currency69 = money68.getCurrency();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array71 = money68.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency69);

  }

  @Test
  public void test253() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test253"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(100L, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test254() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test254"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money4.subtract(money13);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    money13.setCurrency(currency29);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.lang.String str38 = money35.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money35.setCurrency(currency43);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money46.subtract(money48);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money48.setLocale(locale63);
    core.Money money65 = new core.Money(100.0d, currency43, locale63);
    core.Money money66 = new core.Money(100L, currency43);
    core.Money money67 = money13.add(money66);
    java.util.Locale locale68 = money66.getLocale();
    core.Money money69 = money1.subtract(money66);
    java.math.BigDecimal bigDecimal70 = money66.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);

  }

  @Test
  public void test255() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test255"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    money8.setAmount(1.0d);
    core.Money money15 = money6.add(money8);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.lang.String str20 = money17.toString();
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    java.util.Currency currency25 = money22.getCurrency();
    money17.setCurrency(currency25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    boolean b36 = money28.equals((java.lang.Object)money31);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money31.add(money43);
    boolean b45 = money17.equals((java.lang.Object)money31);
    java.util.Locale locale46 = money31.getLocale();
    boolean b47 = money8.equals(money31);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array49 = money31.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test256() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test256"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(1);
    boolean b40 = money34.equals((java.lang.Object)(-1.0d));
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money34.setCurrency(currency45);
    core.Money money47 = new core.Money(10.0d, currency45);
    core.Money money48 = new core.Money(1.0d, currency45);
    core.Money money49 = new core.Money(1L, currency45);
    core.Money money50 = new core.Money(10.0d, currency45);
    boolean b51 = money10.equals((java.lang.Object)10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    core.Money money60 = money10.subtract(money53);
    java.util.Locale locale61 = money10.getLocale();
    java.math.BigDecimal bigDecimal62 = money10.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);

  }

  @Test
  public void test257() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test257"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(10);
    money3.setAmount(1.0d);
    java.lang.String str10 = money3.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(1);
    boolean b19 = money13.equals((java.lang.Object)(-1.0d));
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money13.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    core.Money money35 = new core.Money(1.0d, currency24, locale34);
    money3.setCurrency(currency24);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money money45 = money40.add(money42);
    core.Money money46 = money38.subtract(money40);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale55 = money48.getLocale();
    money40.setLocale(locale55);
    core.Money money57 = new core.Money(1.0d, currency24, locale55);
    core.Money money58 = new core.Money(0.0d, currency24);
    java.math.BigDecimal bigDecimal59 = money58.amount();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    java.lang.String str61 = money58.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$1.00"+ "'", str10.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$0.00"+ "'", str61.equals("$0.00"));

  }

  @Test
  public void test258() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test258"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money12.subtract(money14);
    core.Money money21 = money3.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money24.subtract(money26);
    java.lang.String str33 = money26.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money35.subtract(money37);
    core.Money money44 = money26.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    boolean b50 = money43.equals(money46);
    java.util.Currency currency51 = money43.getCurrency();
    core.Money money52 = money20.add(money43);
    java.util.Currency currency53 = money52.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);

  }

  @Test
  public void test259() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test259"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(1L, currency16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    core.Money money46 = new core.Money(1.0d, currency35, locale45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    money48.setLocale(locale57);
    core.Money money59 = new core.Money(1.0d, currency35, locale57);
    money20.setCurrency(currency35);
    core.Money money61 = new core.Money(1L, currency35);
    java.lang.String str62 = money61.toString();
    java.util.Currency currency63 = money61.getCurrency();
    core.Money money64 = new core.Money();
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money money71 = money66.add(money68);
    core.Money money72 = money64.add(money68);
    core.Money money74 = core.Money.dollars(10.0d);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money money79 = money74.add(money76);
    boolean b80 = money72.equals(money76);
    java.util.Locale locale81 = money72.getLocale();
    money61.setLocale(locale81);
    core.Money money83 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money84 = money61.subtract(money83);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$1.00"+ "'", str62.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale81);

  }

  @Test
  public void test260() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test260"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    java.lang.String str25 = money23.toString();
    java.util.Locale locale26 = money23.getLocale();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    boolean b36 = money28.equals((java.lang.Object)money31);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money31.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money47 = money44.add(money46);
    java.util.Currency currency48 = money46.getCurrency();
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money56 = money46.subtract(money50);
    core.Money money57 = money23.subtract(money56);
    core.Money[] money_array59 = money57.divide(100);
    java.lang.String str60 = money57.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$0.00"+ "'", str25.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$0.00"+ "'", str60.equals("$0.00"));

  }

  @Test
  public void test261() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test261"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money7.add(money19);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money23 = money20.add(money22);
    java.util.Currency currency24 = money22.getCurrency();
    core.Money money25 = new core.Money((-1L), currency24);
    core.Money money26 = new core.Money(0L, currency24);
    java.util.Locale locale27 = null;
    core.Money money28 = new core.Money(100.0d, currency24, locale27);
    java.util.Locale locale29 = money28.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNull(locale29);

  }

  @Test
  public void test262() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test262"); }


    double d1 = core.Money.parseDouble("$90.00");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(d1 == 90.0d);

  }

  @Test
  public void test263() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test263"); }


    core.Money money3 = new core.Money();
    core.Money money5 = core.Money.dollars(10.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money money10 = money5.add(money7);
    core.Money money11 = money3.add(money7);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    boolean b19 = money11.equals(money15);
    java.util.Currency currency20 = money11.getCurrency();
    core.Money money21 = new core.Money(100L, currency20);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money38 = new core.Money(100.0d, currency36);
    java.util.Currency currency39 = money38.getCurrency();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    money41.setAmount(1.0d);
    java.lang.String str48 = money41.toString();
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    money51.setCurrency(currency62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(1);
    boolean b71 = money65.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale72 = money65.getLocale();
    core.Money money73 = new core.Money(1.0d, currency62, locale72);
    money41.setCurrency(currency62);
    core.Money money76 = core.Money.dollars(10.0d);
    core.Money money78 = core.Money.dollars(10.0d);
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    core.Money money83 = money78.add(money80);
    core.Money money84 = money76.subtract(money78);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money[] money_array90 = money86.divide(1);
    boolean b92 = money86.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale93 = money86.getLocale();
    money78.setLocale(locale93);
    money41.setLocale(locale93);
    core.Money money96 = new core.Money(10.0d, currency39, locale93);
    core.Money money97 = new core.Money(100.0d, currency20, locale93);
    core.Money money98 = new core.Money(100.0d, currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$1.00"+ "'", str48.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);

  }

  @Test
  public void test264() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test264"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    core.Money money31 = new core.Money();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.add(money35);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.subtract(money43);
    java.lang.String str50 = money43.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money61 = money43.add(money60);
    boolean b62 = money31.equals((java.lang.Object)money43);
    core.Money money63 = money30.add(money31);
    java.lang.String str64 = money63.toString();
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money money73 = money68.add(money70);
    core.Money money74 = money66.subtract(money68);
    java.lang.String str75 = money68.toString();
    core.Money money76 = money63.add(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);

  }

  @Test
  public void test265() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test265"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    core.Money money31 = new core.Money();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.add(money35);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.subtract(money43);
    java.lang.String str50 = money43.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money61 = money43.add(money60);
    boolean b62 = money31.equals((java.lang.Object)money43);
    core.Money money63 = money30.add(money31);
    boolean b65 = money63.equals((java.lang.Object)0L);
    money63.setAmount((-1.0d));
    core.Money[] money_array69 = money63.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);

  }

  @Test
  public void test266() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test266"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money10.subtract(money12);
    java.lang.String str19 = money12.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    core.Money money30 = money12.add(money29);
    boolean b31 = money0.equals((java.lang.Object)money12);
    boolean b33 = money12.equals((java.lang.Object)10.0d);
    java.math.BigDecimal bigDecimal34 = money12.amount();
    java.util.Currency currency35 = money12.getCurrency();
    core.Money money36 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money37 = money12.subtract(money36);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);

  }

  @Test
  public void test267() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test267"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money money25 = money20.add(money22);
    core.Money money26 = money18.subtract(money20);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale35 = money28.getLocale();
    money20.setLocale(locale35);
    core.Money money37 = new core.Money(0.0d, currency15, locale35);
    core.Money money38 = new core.Money(1.0d, currency15);
    core.Money money39 = new core.Money(0.0d, currency15);
    core.Money money40 = new core.Money();
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money48 = money40.add(money44);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(10);
    core.Money money62 = money52.subtract(money57);
    core.Money money63 = money44.add(money62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(10);
    boolean b73 = money65.equals((java.lang.Object)money68);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money money80 = money75.add(money77);
    core.Money money81 = money68.add(money80);
    core.Money money83 = core.Money.dollars(10.0d);
    core.Money money84 = money81.add(money83);
    java.util.Currency currency85 = money84.getCurrency();
    money62.setCurrency(currency85);
    core.Money money87 = money39.subtract(money62);
    money87.setAmount(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);

  }

  @Test
  public void test268() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test268"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.util.Locale locale14 = money8.getLocale();
    java.lang.String str15 = money8.toString();
    core.Money money17 = core.Money.dollars(0.0d);
    core.Money money18 = money8.subtract(money17);
    core.Money money19 = new core.Money();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.add(money23);
    core.Money money28 = new core.Money();
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money28.add(money32);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(10);
    core.Money money50 = money40.subtract(money45);
    core.Money money51 = money32.add(money50);
    core.Money money53 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal54 = money53.amount();
    money53.setAmount((-1.0d));
    core.Money money57 = money51.add(money53);
    core.Money money58 = money27.add(money51);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(10);
    money61.setAmount(1.0d);
    java.lang.String str68 = money61.toString();
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money[] money_array75 = money71.divide(1);
    boolean b77 = money71.equals((java.lang.Object)(-1.0d));
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    java.util.Currency currency82 = money79.getCurrency();
    money71.setCurrency(currency82);
    core.Money money85 = core.Money.dollars(10.0d);
    java.lang.String str86 = money85.toString();
    java.math.BigDecimal bigDecimal87 = money85.amount();
    core.Money[] money_array89 = money85.divide(1);
    boolean b91 = money85.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale92 = money85.getLocale();
    core.Money money93 = new core.Money(1.0d, currency82, locale92);
    money61.setCurrency(currency82);
    core.Money money95 = new core.Money(1L, currency82);
    core.Money money96 = money51.subtract(money95);
    boolean b97 = money8.equals(money51);
    java.math.BigDecimal bigDecimal98 = money8.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$1.00"+ "'", str68.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "$10.00"+ "'", str86.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal98);

  }

  @Test
  public void test269() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test269"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    money7.setAmount(100.0d);
    boolean b15 = money1.equals(money7);
    core.Money money16 = new core.Money();
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.add(money20);
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    boolean b32 = money24.equals(money28);
    core.Money money33 = money7.subtract(money24);
    money7.setAmount(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);

  }

  @Test
  public void test270() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test270"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(1.0d, currency15);
    core.Money money19 = new core.Money(10.0d, currency15);
    java.util.Locale locale20 = money19.getLocale();
    java.util.Locale locale21 = money19.getLocale();
    java.lang.String str22 = money19.toString();
    money19.setAmount(9.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));

  }

  @Test
  public void test271() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test271"); }


    java.util.Currency currency1 = null;
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(100.0d, currency16);
    java.util.Currency currency19 = money18.getCurrency();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    money21.setAmount(1.0d);
    java.lang.String str28 = money21.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    core.Money money53 = new core.Money(1.0d, currency42, locale52);
    money21.setCurrency(currency42);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money64 = money56.subtract(money58);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money58.setLocale(locale73);
    money21.setLocale(locale73);
    core.Money money76 = new core.Money(10.0d, currency19, locale73);
    // The following exception was thrown during execution in test generation
    try {
      core.Money money77 = new core.Money(0.0d, currency1, locale73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$1.00"+ "'", str28.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);

  }

  @Test
  public void test272() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test272"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money4.subtract(money13);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    money13.setCurrency(currency29);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.lang.String str38 = money35.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money35.setCurrency(currency43);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money46.subtract(money48);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money48.setLocale(locale63);
    core.Money money65 = new core.Money(100.0d, currency43, locale63);
    core.Money money66 = new core.Money(100L, currency43);
    core.Money money67 = money13.add(money66);
    java.util.Locale locale68 = money66.getLocale();
    core.Money money69 = money1.subtract(money66);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    java.lang.String str74 = money71.toString();
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.util.Currency currency79 = money76.getCurrency();
    money71.setCurrency(currency79);
    boolean b82 = money71.equals((java.lang.Object)(byte)100);
    java.lang.String str83 = money71.toString();
    java.lang.String str84 = money71.toString();
    java.util.Currency currency85 = money71.getCurrency();
    boolean b86 = money69.equals(money71);
    java.math.BigDecimal bigDecimal87 = money69.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);

  }

  @Test
  public void test273() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test273"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money4.subtract(money13);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    money13.setCurrency(currency29);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.lang.String str38 = money35.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money35.setCurrency(currency43);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money46.subtract(money48);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money48.setLocale(locale63);
    core.Money money65 = new core.Money(100.0d, currency43, locale63);
    core.Money money66 = new core.Money(100L, currency43);
    core.Money money67 = money13.add(money66);
    java.util.Locale locale68 = money66.getLocale();
    core.Money money69 = money1.subtract(money66);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    java.lang.String str74 = money71.toString();
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.util.Currency currency79 = money76.getCurrency();
    money71.setCurrency(currency79);
    boolean b82 = money71.equals((java.lang.Object)(byte)100);
    java.lang.String str83 = money71.toString();
    java.lang.String str84 = money71.toString();
    java.util.Currency currency85 = money71.getCurrency();
    boolean b86 = money69.equals(money71);
    money69.setAmount(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);

  }

  @Test
  public void test274() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test274"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(100L, currency15);
    java.util.Locale locale19 = null;
    core.Money money20 = new core.Money(70.0d, currency15, locale19);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money[] money_array24 = money22.divide(10);
    java.util.Locale locale25 = money22.getLocale();
    core.Money money26 = money20.subtract(money22);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money money33 = money28.add(money30);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    core.Money money40 = money30.subtract(money35);
    java.lang.String str41 = money35.toString();
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    java.util.Currency currency46 = money43.getCurrency();
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    money51.setCurrency(currency62);
    core.Money money64 = new core.Money(10.0d, currency62);
    core.Money money65 = new core.Money(1.0d, currency62);
    core.Money money66 = new core.Money(0L, currency62);
    core.Money money67 = money43.subtract(money66);
    boolean b68 = money35.equals(money43);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(10);
    boolean b78 = money70.equals((java.lang.Object)money73);
    core.Money[] money_array80 = money73.divide(10);
    boolean b81 = money43.equals((java.lang.Object)10);
    java.lang.String str82 = money43.toString();
    boolean b83 = money22.equals(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);

  }

  @Test
  public void test275() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test275"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0.0d, currency5);
    core.Money money7 = new core.Money();
    core.Money money9 = core.Money.dollars(10.0d);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money money14 = money9.add(money11);
    core.Money money15 = money7.add(money11);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money money22 = money17.add(money19);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(10);
    core.Money money29 = money19.subtract(money24);
    core.Money money30 = money11.add(money29);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    boolean b40 = money32.equals((java.lang.Object)money35);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money48 = money35.add(money47);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money51 = money48.add(money50);
    java.util.Currency currency52 = money51.getCurrency();
    money29.setCurrency(currency52);
    money6.setCurrency(currency52);
    core.Money[] money_array56 = money6.divide(100);
    core.Money money58 = new core.Money();
    core.Money money60 = core.Money.dollars(10.0d);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money money65 = money60.add(money62);
    core.Money money66 = money58.add(money62);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money money73 = money68.add(money70);
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    core.Money[] money_array79 = money75.divide(10);
    core.Money money80 = money70.subtract(money75);
    core.Money money81 = money62.add(money80);
    core.Money money83 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal84 = money83.amount();
    money83.setAmount((-1.0d));
    core.Money money87 = money81.add(money83);
    java.util.Currency currency88 = money81.getCurrency();
    core.Money money89 = new core.Money((-1L), currency88);
    money89.setAmount(70.0d);
    core.Money money92 = money6.subtract(money89);
    money92.setAmount(11.0d);
    money92.setAmount(20.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);

  }

  @Test
  public void test276() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test276"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money25 = money17.subtract(money19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    money19.setLocale(locale34);
    core.Money money36 = new core.Money(0.0d, currency14, locale34);
    core.Money money37 = new core.Money(1.0d, currency14);
    java.util.Currency currency38 = money37.getCurrency();
    java.util.Currency currency39 = money37.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);

  }

  @Test
  public void test277() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test277"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money[] money_array20 = money18.divide(10);
    java.util.Locale locale21 = money18.getLocale();
    core.Money money22 = money1.subtract(money18);
    core.Money money24 = new core.Money();
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money24.add(money28);
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    core.Money money46 = money36.subtract(money41);
    core.Money money47 = money28.add(money46);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(10);
    boolean b57 = money49.equals((java.lang.Object)money52);
    core.Money money59 = core.Money.dollars(10.0d);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money money64 = money59.add(money61);
    core.Money money65 = money52.add(money64);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money68 = money65.add(money67);
    java.util.Currency currency69 = money68.getCurrency();
    money46.setCurrency(currency69);
    core.Money money71 = new core.Money();
    core.Money money73 = core.Money.dollars(10.0d);
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    core.Money money78 = money73.add(money75);
    core.Money money79 = money71.add(money75);
    java.util.Locale locale80 = money79.getLocale();
    core.Money money81 = new core.Money(1.0d, currency69, locale80);
    boolean b82 = money1.equals((java.lang.Object)locale80);
    java.lang.String str83 = money1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$0.00"+ "'", str83.equals("$0.00"));

  }

  @Test
  public void test278() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test278"); }


    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(1);
    boolean b14 = money8.equals((java.lang.Object)(-1.0d));
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    money8.setCurrency(currency19);
    core.Money money21 = new core.Money(10.0d, currency19);
    core.Money money22 = new core.Money(1.0d, currency19);
    core.Money money23 = new core.Money(1L, currency19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(1);
    boolean b47 = money41.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale48 = money41.getLocale();
    core.Money money49 = new core.Money(1.0d, currency38, locale48);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money51.setLocale(locale60);
    core.Money money62 = new core.Money(1.0d, currency38, locale60);
    money23.setCurrency(currency38);
    core.Money money64 = new core.Money(1L, currency38);
    core.Money money65 = new core.Money(100L, currency38);
    core.Money money66 = new core.Money(1.0d, currency38);
    core.Money money67 = new core.Money((-1L), currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);

  }

  @Test
  public void test279() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test279"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    core.Money money11 = new core.Money();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money11.add(money15);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(10);
    core.Money money33 = money23.subtract(money28);
    core.Money money34 = money15.add(money33);
    java.math.BigDecimal bigDecimal35 = money34.amount();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    money41.setLocale(locale50);
    java.util.Currency currency52 = money41.getCurrency();
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(10);
    money54.setAmount(1.0d);
    java.lang.String str61 = money54.toString();
    java.util.Locale locale62 = money54.getLocale();
    core.Money money63 = new core.Money(10.0d, currency52, locale62);
    core.Money money64 = new core.Money();
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money money71 = money66.add(money68);
    core.Money money72 = money64.add(money68);
    core.Money money74 = core.Money.dollars(10.0d);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money money79 = money74.add(money76);
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money[] money_array85 = money81.divide(10);
    core.Money money86 = money76.subtract(money81);
    core.Money money87 = money68.add(money86);
    java.util.Locale locale88 = money87.getLocale();
    core.Money money89 = new core.Money(0.0d, currency52, locale88);
    core.Money money90 = new core.Money(9.0d, currency52);
    money34.setCurrency(currency52);
    core.Money money92 = new core.Money(0L, currency52);
    core.Money money93 = money9.subtract(money92);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array95 = money9.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$1.00"+ "'", str61.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money93);

  }

  @Test
  public void test280() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test280"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    java.lang.String str17 = money1.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.subtract(money34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale49 = money42.getLocale();
    money34.setLocale(locale49);
    core.Money money51 = new core.Money(100.0d, currency29, locale49);
    core.Money money52 = new core.Money(1L, currency29);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(10);
    money54.setAmount(1.0d);
    java.lang.String str61 = money54.toString();
    java.math.BigDecimal bigDecimal62 = money54.amount();
    core.Money money63 = money52.add(money54);
    core.Money money64 = money1.add(money63);
    core.Money[] money_array66 = money1.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$1.00"+ "'", str61.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);

  }

  @Test
  public void test281() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test281"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money money25 = money20.add(money22);
    core.Money money26 = money18.subtract(money20);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale35 = money28.getLocale();
    money20.setLocale(locale35);
    core.Money money37 = new core.Money(0.0d, currency15, locale35);
    core.Money money38 = new core.Money(1.0d, currency15);
    core.Money money39 = new core.Money(0.0d, currency15);
    core.Money money40 = new core.Money();
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money48 = money40.add(money44);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(10);
    core.Money money62 = money52.subtract(money57);
    core.Money money63 = money44.add(money62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(10);
    boolean b73 = money65.equals((java.lang.Object)money68);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money money80 = money75.add(money77);
    core.Money money81 = money68.add(money80);
    core.Money money83 = core.Money.dollars(10.0d);
    core.Money money84 = money81.add(money83);
    java.util.Currency currency85 = money84.getCurrency();
    money62.setCurrency(currency85);
    core.Money money87 = money39.subtract(money62);
    java.util.Locale locale88 = money62.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);

  }

  @Test
  public void test282() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test282"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(10);
    money3.setAmount(1.0d);
    java.lang.String str10 = money3.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(1);
    boolean b19 = money13.equals((java.lang.Object)(-1.0d));
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money13.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    core.Money money35 = new core.Money(1.0d, currency24, locale34);
    money3.setCurrency(currency24);
    core.Money money37 = new core.Money(1L, currency24);
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(1);
    boolean b47 = money41.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale48 = money41.getLocale();
    money39.setLocale(locale48);
    core.Money money50 = new core.Money(10.0d, currency24, locale48);
    core.Money[] money_array52 = money50.divide(10);
    core.Money money53 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b54 = money50.equals(money53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$1.00"+ "'", str10.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);

  }

  @Test
  public void test283() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test283"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money4.subtract(money13);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    money13.setCurrency(currency29);
    core.Money money32 = new core.Money(10L, currency29);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    money35.setAmount(1.0d);
    java.lang.String str42 = money35.toString();
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    java.util.Currency currency56 = money53.getCurrency();
    money45.setCurrency(currency56);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale66 = money59.getLocale();
    core.Money money67 = new core.Money(1.0d, currency56, locale66);
    money35.setCurrency(currency56);
    core.Money money69 = new core.Money(1L, currency56);
    core.Money money70 = new core.Money();
    core.Money money72 = core.Money.dollars(10.0d);
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    java.math.BigDecimal bigDecimal76 = money74.amount();
    core.Money money77 = money72.add(money74);
    core.Money money78 = money70.add(money74);
    core.Money money80 = core.Money.dollars(10.0d);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money money85 = money80.add(money82);
    core.Money money87 = core.Money.dollars(10.0d);
    java.lang.String str88 = money87.toString();
    java.math.BigDecimal bigDecimal89 = money87.amount();
    core.Money[] money_array91 = money87.divide(10);
    core.Money money92 = money82.subtract(money87);
    core.Money money93 = money74.add(money92);
    java.util.Locale locale94 = money93.getLocale();
    money69.setLocale(locale94);
    core.Money money96 = new core.Money(100.0d, currency29, locale94);
    core.Money money97 = new core.Money(90.0d, currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$1.00"+ "'", str42.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "$10.00"+ "'", str88.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale94);

  }

  @Test
  public void test284() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test284"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    java.util.Locale locale7 = money6.getLocale();
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money16.setCurrency(currency27);
    core.Money money29 = new core.Money(10.0d, currency27);
    core.Money money30 = new core.Money(1.0d, currency27);
    core.Money money31 = new core.Money(0L, currency27);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(1);
    boolean b41 = money35.equals((java.lang.Object)(-1.0d));
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    java.util.Currency currency46 = money43.getCurrency();
    money35.setCurrency(currency46);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money[] money_array53 = money49.divide(1);
    boolean b55 = money49.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale56 = money49.getLocale();
    core.Money money57 = new core.Money(1.0d, currency46, locale56);
    core.Money money59 = core.Money.dollars(10.0d);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(1);
    boolean b67 = money61.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale68 = money61.getLocale();
    money59.setLocale(locale68);
    core.Money money70 = new core.Money(1.0d, currency46, locale68);
    core.Money money71 = new core.Money(0.0d, currency27, locale68);
    java.util.Locale locale72 = money71.getLocale();
    money71.setAmount(100.0d);
    java.util.Currency currency75 = money71.getCurrency();
    core.Money money76 = new core.Money(0.0d, currency75);
    core.Money money77 = new core.Money(1.0d, currency75);
    core.Money money78 = new core.Money(1L, currency75);
    java.util.Currency currency79 = money78.getCurrency();
    money6.setCurrency(currency79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency79);

  }

  @Test
  public void test285() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test285"); }


    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(1);
    boolean b13 = money7.equals((java.lang.Object)(-1.0d));
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money7.setCurrency(currency18);
    core.Money money20 = new core.Money(10.0d, currency18);
    core.Money money21 = new core.Money(1.0d, currency18);
    core.Money money22 = new core.Money(1L, currency18);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money24.subtract(money33);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    money33.setCurrency(currency49);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.lang.String str58 = money55.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money55.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money money73 = money68.add(money70);
    core.Money money74 = money66.subtract(money68);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    money68.setLocale(locale83);
    core.Money money85 = new core.Money(100.0d, currency63, locale83);
    core.Money money86 = new core.Money(100L, currency63);
    core.Money money87 = money33.add(money86);
    money33.setAmount(100.0d);
    java.util.Locale locale90 = money33.getLocale();
    core.Money money91 = new core.Money(100.0d, currency18, locale90);
    core.Money money92 = new core.Money(1L, currency18);
    core.Money money93 = new core.Money(10L, currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale90);

  }

  @Test
  public void test286() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test286"); }


    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    java.util.Currency currency9 = money8.getCurrency();
    core.Money money10 = new core.Money(1.0d, currency9);
    core.Money money11 = new core.Money(20.0d, currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);

  }

  @Test
  public void test287() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test287"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money4.subtract(money13);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    money13.setCurrency(currency29);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.lang.String str38 = money35.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money35.setCurrency(currency43);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money46.subtract(money48);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money48.setLocale(locale63);
    core.Money money65 = new core.Money(100.0d, currency43, locale63);
    core.Money money66 = new core.Money(100L, currency43);
    core.Money money67 = money13.add(money66);
    java.util.Locale locale68 = money66.getLocale();
    core.Money money69 = money1.subtract(money66);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    java.lang.String str74 = money71.toString();
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.util.Currency currency79 = money76.getCurrency();
    money71.setCurrency(currency79);
    boolean b82 = money71.equals((java.lang.Object)(byte)100);
    java.lang.String str83 = money71.toString();
    java.lang.String str84 = money71.toString();
    java.util.Currency currency85 = money71.getCurrency();
    boolean b86 = money69.equals(money71);
    core.Money[] money_array88 = money71.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array88);

  }

  @Test
  public void test288() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test288"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    core.Money[] money_array26 = money19.divide(1);
    core.Money[] money_array28 = money19.divide(1);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array30 = money19.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);

  }

  @Test
  public void test289() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test289"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money21.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money24.subtract(money33);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    money33.setCurrency(currency49);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(1);
    boolean b63 = money57.equals((java.lang.Object)(-1.0d));
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    java.util.Currency currency68 = money65.getCurrency();
    money57.setCurrency(currency68);
    core.Money money70 = new core.Money(10.0d, currency68);
    core.Money money71 = new core.Money(1.0d, currency68);
    core.Money money72 = new core.Money(1L, currency68);
    core.Money money73 = new core.Money(10.0d, currency68);
    boolean b74 = money33.equals((java.lang.Object)10.0d);
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    core.Money[] money_array83 = money79.divide(1);
    boolean b85 = money79.equals((java.lang.Object)(-1.0d));
    core.Money money87 = core.Money.dollars(10.0d);
    java.lang.String str88 = money87.toString();
    java.math.BigDecimal bigDecimal89 = money87.amount();
    java.util.Currency currency90 = money87.getCurrency();
    money79.setCurrency(currency90);
    core.Money money92 = new core.Money(10.0d, currency90);
    core.Money money93 = new core.Money(1.0d, currency90);
    core.Money money94 = new core.Money(0L, currency90);
    core.Money money95 = money33.subtract(money94);
    java.util.Locale locale96 = money94.getLocale();
    core.Money money97 = new core.Money(20.0d, currency22, locale96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "$10.00"+ "'", str88.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale96);

  }

  @Test
  public void test290() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test290"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money money5 = core.Money.dollars(10.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money money10 = money5.add(money7);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(10);
    core.Money money17 = money7.subtract(money12);
    java.util.Locale locale18 = money12.getLocale();
    money1.setLocale(locale18);
    java.math.BigDecimal bigDecimal20 = money1.amount();
    core.Money money21 = new core.Money();
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.add(money25);
    core.Money money31 = core.Money.dollars(10.0d);
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.subtract(money33);
    java.lang.String str40 = money33.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money42.subtract(money44);
    core.Money money51 = money33.add(money50);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    java.util.Currency currency56 = money53.getCurrency();
    boolean b57 = money50.equals(money53);
    java.util.Currency currency58 = money50.getCurrency();
    money29.setCurrency(currency58);
    core.Money money60 = money1.subtract(money29);
    java.util.Locale locale61 = money1.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);

  }

  @Test
  public void test291() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test291"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array19 = money16.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);

  }

  @Test
  public void test292() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test292"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    java.util.Currency currency39 = money38.getCurrency();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(10);
    boolean b60 = money52.equals((java.lang.Object)money55);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money money67 = money62.add(money64);
    core.Money money68 = money55.add(money67);
    boolean b69 = money41.equals((java.lang.Object)money55);
    java.util.Locale locale70 = money55.getLocale();
    core.Money money71 = money38.subtract(money55);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array73 = money55.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);

  }

  @Test
  public void test293() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test293"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(1);
    boolean b40 = money34.equals((java.lang.Object)(-1.0d));
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money34.setCurrency(currency45);
    core.Money money47 = new core.Money(10.0d, currency45);
    core.Money money48 = new core.Money(1.0d, currency45);
    core.Money money49 = new core.Money(1L, currency45);
    core.Money money50 = new core.Money(10.0d, currency45);
    boolean b51 = money10.equals((java.lang.Object)10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    java.util.Currency currency67 = money64.getCurrency();
    money56.setCurrency(currency67);
    core.Money money69 = new core.Money(10.0d, currency67);
    core.Money money70 = new core.Money(1.0d, currency67);
    core.Money money71 = new core.Money(0L, currency67);
    core.Money money72 = money10.subtract(money71);
    money10.setAmount(70.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);

  }

  @Test
  public void test294() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test294"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money[] money_array4 = money1.divide(100);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(10);
    boolean b14 = money6.equals((java.lang.Object)money9);
    boolean b15 = money1.equals(money6);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array17 = money1.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);

  }

  @Test
  public void test295() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test295"); }


    java.util.Currency currency1 = null;
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    java.util.Currency currency7 = money4.getCurrency();
    core.Money money8 = new core.Money(0L, currency7);
    core.Money money10 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal11 = money10.amount();
    core.Money[] money_array13 = money10.divide(100);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    boolean b23 = money15.equals((java.lang.Object)money18);
    boolean b24 = money10.equals(money15);
    java.lang.String str25 = money15.toString();
    core.Money money26 = money8.subtract(money15);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    boolean b36 = money28.equals((java.lang.Object)money31);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money31.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.lang.String str48 = money46.toString();
    money46.setAmount(0.0d);
    core.Money money51 = money31.add(money46);
    boolean b52 = money26.equals(money31);
    java.util.Locale locale53 = money31.getLocale();
    // The following exception was thrown during execution in test generation
    try {
      core.Money money54 = new core.Money(90.0d, currency1, locale53);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);

  }

  @Test
  public void test296() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test296"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    boolean b13 = money5.equals((java.lang.Object)money8);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money[] money_array26 = money22.divide(10);
    core.Money money27 = money17.subtract(money22);
    core.Money money28 = money8.add(money27);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money32.setCurrency(currency43);
    core.Money money45 = new core.Money(10.0d, currency43);
    core.Money money46 = new core.Money(1.0d, currency43);
    money27.setCurrency(currency43);
    core.Money money48 = new core.Money(1L, currency43);
    core.Money money49 = new core.Money((-1.0d), currency43);
    core.Money money50 = new core.Money(0.0d, currency43);
    core.Money money51 = new core.Money((-1.0d), currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);

  }

  @Test
  public void test297() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test297"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money9 = new core.Money();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money9.add(money13);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    core.Money money31 = money21.subtract(money26);
    core.Money money32 = money13.add(money31);
    core.Money money34 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal35 = money34.amount();
    money34.setAmount((-1.0d));
    core.Money money38 = money32.add(money34);
    core.Money money39 = money8.add(money32);
    money39.setAmount(20.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);

  }

  @Test
  public void test298() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test298"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    money7.setAmount(100.0d);
    boolean b15 = money1.equals(money7);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array17 = money1.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test299() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test299"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money60.subtract(money69);
    boolean b76 = money58.equals(money60);
    core.Money[] money_array78 = money60.divide(100);
    money60.setAmount(9.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);

  }

  @Test
  public void test300() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test300"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.lang.String str6 = money3.toString();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    java.util.Currency currency11 = money8.getCurrency();
    money3.setCurrency(currency11);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    boolean b22 = money14.equals((java.lang.Object)money17);
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money money29 = money24.add(money26);
    core.Money money30 = money17.add(money29);
    java.util.Locale locale31 = money30.getLocale();
    core.Money money32 = new core.Money(9.0d, currency11, locale31);
    core.Money money33 = new core.Money(10.0d, currency11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);

  }

  @Test
  public void test301() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test301"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale23 = money16.getLocale();
    core.Money money24 = new core.Money(1.0d, currency13, locale23);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(100.0d, currency38);
    boolean b41 = money24.equals(money40);
    java.lang.String str42 = money40.toString();
    core.Money money44 = core.Money.dollars(0.0d);
    java.util.Locale locale45 = money44.getLocale();
    money40.setLocale(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$100.00"+ "'", str42.equals("$100.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);

  }

  @Test
  public void test302() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test302"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    money26.setAmount(10.0d);
    core.Money[] money_array37 = money26.divide(10);
    core.Money money38 = money24.subtract(money26);
    java.util.Currency currency39 = money38.getCurrency();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(10);
    boolean b60 = money52.equals((java.lang.Object)money55);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money money67 = money62.add(money64);
    core.Money money68 = money55.add(money67);
    boolean b69 = money41.equals((java.lang.Object)money55);
    java.util.Locale locale70 = money55.getLocale();
    core.Money money71 = money38.subtract(money55);
    java.util.Locale locale72 = money71.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);

  }

  @Test
  public void test303() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test303"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money36 = new core.Money(1L, currency23);
    core.Money money37 = new core.Money();
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.add(money41);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money money52 = money47.add(money49);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(10);
    core.Money money59 = money49.subtract(money54);
    core.Money money60 = money41.add(money59);
    java.util.Locale locale61 = money60.getLocale();
    money36.setLocale(locale61);
    money36.setAmount(0.0d);
    core.Money money67 = core.Money.dollars((-1.0d));
    java.util.Currency currency68 = money67.getCurrency();
    core.Money money69 = new core.Money((-1L), currency68);
    java.util.Locale locale70 = money69.getLocale();
    money36.setLocale(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);

  }

  @Test
  public void test304() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test304"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(1);
    boolean b25 = money19.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale26 = money19.getLocale();
    core.Money money27 = new core.Money(1.0d, currency16, locale26);
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale38 = money31.getLocale();
    money29.setLocale(locale38);
    core.Money money40 = new core.Money(1.0d, currency16, locale38);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    java.lang.String str51 = money48.toString();
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    java.util.Currency currency56 = money53.getCurrency();
    money48.setCurrency(currency56);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(10);
    boolean b67 = money59.equals((java.lang.Object)money62);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money62.add(money74);
    boolean b76 = money48.equals((java.lang.Object)money62);
    java.util.Locale locale77 = money62.getLocale();
    money42.setLocale(locale77);
    core.Money money79 = new core.Money(11.0d, currency16, locale77);
    core.Money money80 = new core.Money((-1L), currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);

  }

  @Test
  public void test305() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test305"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    java.lang.String str11 = money3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));

  }

  @Test
  public void test306() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test306"); }


    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(1);
    boolean b14 = money8.equals((java.lang.Object)(-1.0d));
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    money8.setCurrency(currency19);
    core.Money money21 = new core.Money(10.0d, currency19);
    core.Money money22 = new core.Money(1.0d, currency19);
    core.Money money23 = new core.Money(1L, currency19);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money25.subtract(money34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.lang.String str45 = money42.toString();
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    java.util.Currency currency50 = money47.getCurrency();
    money42.setCurrency(currency50);
    money34.setCurrency(currency50);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.lang.String str59 = money56.toString();
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    java.util.Currency currency64 = money61.getCurrency();
    money56.setCurrency(currency64);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money67.subtract(money69);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(1);
    boolean b83 = money77.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale84 = money77.getLocale();
    money69.setLocale(locale84);
    core.Money money86 = new core.Money(100.0d, currency64, locale84);
    core.Money money87 = new core.Money(100L, currency64);
    core.Money money88 = money34.add(money87);
    money34.setAmount(100.0d);
    java.util.Locale locale91 = money34.getLocale();
    core.Money money92 = new core.Money(100.0d, currency19, locale91);
    core.Money money93 = new core.Money(10.0d, currency19);
    core.Money money94 = new core.Money(0L, currency19);
    core.Money money95 = new core.Money(1L, currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);

  }

  @Test
  public void test307() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test307"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(1);
    boolean b24 = money18.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale25 = money18.getLocale();
    core.Money money27 = core.Money.dollars(10.0d);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money money32 = money27.add(money29);
    core.Money money33 = money18.subtract(money27);
    core.Money money34 = money1.subtract(money33);
    core.Money[] money_array36 = money1.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);

  }

  @Test
  public void test308() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test308"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.util.Currency currency9 = money6.getCurrency();
    money1.setCurrency(currency9);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money16.setCurrency(currency27);
    core.Money money29 = new core.Money(10.0d, currency27);
    core.Money money30 = new core.Money(1.0d, currency27);
    core.Money money31 = new core.Money(0L, currency27);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(1);
    boolean b41 = money35.equals((java.lang.Object)(-1.0d));
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    java.util.Currency currency46 = money43.getCurrency();
    money35.setCurrency(currency46);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money[] money_array53 = money49.divide(1);
    boolean b55 = money49.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale56 = money49.getLocale();
    core.Money money57 = new core.Money(1.0d, currency46, locale56);
    core.Money money59 = core.Money.dollars(10.0d);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(1);
    boolean b67 = money61.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale68 = money61.getLocale();
    money59.setLocale(locale68);
    core.Money money70 = new core.Money(1.0d, currency46, locale68);
    core.Money money71 = new core.Money(0.0d, currency27, locale68);
    java.util.Locale locale72 = money71.getLocale();
    java.util.Currency currency73 = money71.getCurrency();
    core.Money money74 = money1.subtract(money71);
    java.util.Currency currency75 = money1.getCurrency();
    core.Money money76 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money77 = money1.subtract(money76);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency75);

  }

  @Test
  public void test309() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test309"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.util.Locale locale14 = money8.getLocale();
    java.lang.String str15 = money8.toString();
    core.Money money17 = core.Money.dollars(0.0d);
    core.Money money18 = money8.subtract(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(10.0d, currency39);
    core.Money money42 = new core.Money(1.0d, currency39);
    core.Money money43 = new core.Money(0L, currency39);
    core.Money money44 = money20.subtract(money43);
    java.util.Currency currency45 = money20.getCurrency();
    money17.setCurrency(currency45);
    money17.setAmount(20.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);

  }

  @Test
  public void test310() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test310"); }


    core.Money money1 = core.Money.dollars(9.0d);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array3 = money1.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);

  }

  @Test
  public void test311() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test311"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    java.math.BigDecimal bigDecimal4 = money1.amount();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money24 = new core.Money(10.0d, currency22);
    core.Money money25 = new core.Money(1.0d, currency22);
    core.Money money26 = new core.Money(0L, currency22);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    core.Money money52 = new core.Money(1.0d, currency41, locale51);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money54.setLocale(locale63);
    core.Money money65 = new core.Money(1.0d, currency41, locale63);
    core.Money money66 = new core.Money(0.0d, currency22, locale63);
    java.util.Locale locale67 = money66.getLocale();
    money66.setAmount(100.0d);
    java.util.Currency currency70 = money66.getCurrency();
    core.Money money71 = new core.Money(0.0d, currency70);
    money71.setAmount(0.0d);
    boolean b74 = money1.equals(money71);
    java.math.BigDecimal bigDecimal75 = money1.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);

  }

  @Test
  public void test312() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test312"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money15 = new core.Money(100.0d, currency13);
    java.util.Currency currency16 = money15.getCurrency();
    java.lang.String str17 = money15.toString();
    java.util.Locale locale18 = money15.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$100.00"+ "'", str17.equals("$100.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale18);

  }

  @Test
  public void test313() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test313"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money[] money_array20 = money18.divide(10);
    java.util.Locale locale21 = money18.getLocale();
    core.Money money22 = money1.subtract(money18);
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money24.subtract(money26);
    java.lang.String str33 = money26.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money35.subtract(money37);
    core.Money money44 = money26.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    boolean b50 = money43.equals(money46);
    java.util.Currency currency51 = money43.getCurrency();
    core.Money money52 = money22.subtract(money43);
    java.util.Currency currency53 = money52.getCurrency();
    core.Money money54 = new core.Money();
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.add(money58);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money money69 = money64.add(money66);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money[] money_array75 = money71.divide(10);
    core.Money money76 = money66.subtract(money71);
    core.Money money77 = money58.add(money76);
    java.math.BigDecimal bigDecimal78 = money77.amount();
    boolean b79 = money52.equals(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test314() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test314"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(1);
    boolean b26 = money20.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale27 = money20.getLocale();
    core.Money money28 = new core.Money(1.0d, currency17, locale27);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale39 = money32.getLocale();
    money30.setLocale(locale39);
    core.Money money41 = new core.Money(1.0d, currency17, locale39);
    core.Money money42 = new core.Money(0L, currency17);
    core.Money money43 = new core.Money(0L, currency17);
    core.Money money44 = new core.Money(11.0d, currency17);
    java.util.Locale locale45 = money44.getLocale();
    java.lang.String str46 = money44.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$11.00"+ "'", str46.equals("$11.00"));

  }

  @Test
  public void test315() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test315"); }


    core.Money money1 = core.Money.dollars(1.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    java.lang.String str8 = money5.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money5.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.subtract(money18);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    money18.setLocale(locale33);
    core.Money money35 = new core.Money(100.0d, currency13, locale33);
    core.Money money36 = new core.Money(100L, currency13);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    boolean b46 = money38.equals((java.lang.Object)money41);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money41.add(money53);
    core.Money money55 = money36.subtract(money41);
    core.Money money56 = money1.subtract(money55);
    java.lang.String str57 = money55.toString();
    java.math.BigDecimal bigDecimal58 = money55.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$90.00"+ "'", str57.equals("$90.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);

  }

  @Test
  public void test316() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test316"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale10 = money3.getLocale();
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money3.subtract(money12);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.lang.String str23 = money20.toString();
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    java.util.Currency currency28 = money25.getCurrency();
    money20.setCurrency(currency28);
    money12.setCurrency(currency28);
    core.Money money31 = new core.Money(10L, currency28);
    core.Money money32 = new core.Money();
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.add(money36);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money42.subtract(money44);
    java.lang.String str51 = money44.toString();
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.subtract(money55);
    core.Money money62 = money44.add(money61);
    boolean b63 = money32.equals((java.lang.Object)money44);
    core.Money money64 = money31.add(money32);
    java.util.Currency currency65 = money64.getCurrency();
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.lang.String str70 = money67.toString();
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    java.util.Currency currency75 = money72.getCurrency();
    money67.setCurrency(currency75);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money[] money_array85 = money81.divide(10);
    boolean b86 = money78.equals((java.lang.Object)money81);
    core.Money money88 = core.Money.dollars(10.0d);
    core.Money money90 = core.Money.dollars(10.0d);
    java.lang.String str91 = money90.toString();
    java.math.BigDecimal bigDecimal92 = money90.amount();
    core.Money money93 = money88.add(money90);
    core.Money money94 = money81.add(money93);
    boolean b95 = money67.equals((java.lang.Object)money81);
    java.util.Locale locale96 = money81.getLocale();
    java.util.Locale locale97 = money81.getLocale();
    core.Money money98 = new core.Money(20.0d, currency65, locale97);
    java.util.Currency currency99 = money98.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "$10.00"+ "'", str91.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale97);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency99);

  }

  @Test
  public void test317() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test317"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    java.util.Locale locale7 = money6.getLocale();
    money6.setAmount(100.0d);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money11.subtract(money13);
    java.lang.String str20 = money13.toString();
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(10);
    boolean b30 = money22.equals((java.lang.Object)money25);
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money money37 = money32.add(money34);
    core.Money money38 = money25.add(money37);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money41 = money38.add(money40);
    boolean b42 = money13.equals(money38);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money money58 = money53.add(money55);
    core.Money money59 = money44.subtract(money53);
    boolean b61 = money53.equals((java.lang.Object)10.0d);
    java.util.Locale locale62 = money53.getLocale();
    boolean b63 = money13.equals((java.lang.Object)money53);
    boolean b64 = money6.equals((java.lang.Object)b63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test318() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test318"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money36.subtract(money38);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(1);
    boolean b52 = money46.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale53 = money46.getLocale();
    money38.setLocale(locale53);
    money1.setLocale(locale53);
    java.lang.String str56 = money1.toString();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array58 = money1.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$1.00"+ "'", str56.equals("$1.00"));

  }

  @Test
  public void test319() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test319"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(1L, currency16);
    core.Money money21 = new core.Money(10.0d, currency16);
    java.util.Currency currency22 = money21.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    java.lang.String str37 = money24.toString();
    money24.setAmount(0.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money[] money_array43 = money41.divide(10);
    java.util.Locale locale44 = money41.getLocale();
    core.Money money45 = money24.subtract(money41);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money55 = money47.subtract(money49);
    java.lang.String str56 = money49.toString();
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money money65 = money60.add(money62);
    core.Money money66 = money58.subtract(money60);
    core.Money money67 = money49.add(money66);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    java.util.Currency currency72 = money69.getCurrency();
    boolean b73 = money66.equals(money69);
    java.util.Currency currency74 = money66.getCurrency();
    core.Money money75 = money45.subtract(money66);
    boolean b76 = money21.equals(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test320() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test320"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(10.0d, currency39);
    core.Money money42 = new core.Money(1.0d, currency39);
    money23.setCurrency(currency39);
    money23.setAmount(1.0d);
    java.util.Currency currency46 = money23.getCurrency();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array48 = money23.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency46);

  }

  @Test
  public void test321() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test321"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    core.Money money31 = new core.Money();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.add(money35);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.subtract(money43);
    java.lang.String str50 = money43.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money61 = money43.add(money60);
    boolean b62 = money31.equals((java.lang.Object)money43);
    core.Money money63 = money30.add(money31);
    java.util.Locale locale64 = money30.getLocale();
    core.Money money65 = new core.Money();
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money money72 = money67.add(money69);
    core.Money money73 = money65.add(money69);
    java.math.BigDecimal bigDecimal74 = money73.amount();
    core.Money money75 = money30.add(money73);
    java.util.Locale locale76 = money73.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale76);

  }

  @Test
  public void test322() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test322"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(1);
    boolean b21 = money15.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale22 = money15.getLocale();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money money29 = money24.add(money26);
    core.Money money30 = money15.subtract(money24);
    core.Money money31 = money1.add(money30);
    java.util.Locale locale32 = money31.getLocale();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money[] money_array44 = money40.divide(1);
    boolean b46 = money40.equals((java.lang.Object)(-1.0d));
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    java.util.Currency currency51 = money48.getCurrency();
    money40.setCurrency(currency51);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(1);
    boolean b60 = money54.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale61 = money54.getLocale();
    core.Money money62 = new core.Money(1.0d, currency51, locale61);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money64.setLocale(locale73);
    core.Money money75 = new core.Money(1.0d, currency51, locale73);
    core.Money money76 = new core.Money(0L, currency51);
    core.Money money77 = new core.Money(0L, currency51);
    core.Money money78 = new core.Money(9.0d, currency51);
    core.Money money79 = new core.Money(100L, currency51);
    boolean b80 = money31.equals(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test323() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test323"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money31 = money28.add(money30);
    boolean b32 = money3.equals(money28);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    core.Money money39 = new core.Money(0L, currency38);
    boolean b40 = money28.equals(money39);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(10);
    money42.setAmount(1.0d);
    java.lang.String str49 = money42.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money52.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    core.Money money74 = new core.Money(1.0d, currency63, locale73);
    money42.setCurrency(currency63);
    core.Money money76 = money39.add(money42);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    java.lang.String str81 = money78.toString();
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    java.util.Currency currency86 = money83.getCurrency();
    money78.setCurrency(currency86);
    boolean b89 = money78.equals((java.lang.Object)(byte)100);
    core.Money money90 = money76.subtract(money78);
    core.Money money92 = core.Money.dollars(10.0d);
    java.lang.String str93 = money92.toString();
    java.lang.String str94 = money92.toString();
    money92.setAmount(0.0d);
    boolean b97 = money76.equals(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$1.00"+ "'", str49.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str93 + "' != '" + "$10.00"+ "'", str93.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "$10.00"+ "'", str94.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test324() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test324"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    java.math.BigDecimal bigDecimal7 = money3.amount();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(1);
    boolean b15 = money9.equals((java.lang.Object)(-1.0d));
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.util.Currency currency20 = money17.getCurrency();
    money9.setCurrency(currency20);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money money37 = money32.add(money34);
    core.Money money38 = money23.subtract(money32);
    core.Money money39 = money9.add(money38);
    money38.setAmount(100.0d);
    core.Money money42 = money3.subtract(money38);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array44 = money3.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);

  }

  @Test
  public void test325() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test325"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    java.util.Currency currency7 = money3.getCurrency();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array9 = money3.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency7);

  }

  @Test
  public void test326() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test326"); }


    core.Money money1 = core.Money.dollars(1.0d);
    boolean b3 = money1.equals((java.lang.Object)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b3 == false);

  }

  @Test
  public void test327() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test327"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    core.Money[] money_array14 = money10.divide(10);
    boolean b15 = money7.equals((java.lang.Object)money10);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money money22 = money17.add(money19);
    core.Money money23 = money10.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.lang.String str27 = money25.toString();
    money25.setAmount(0.0d);
    core.Money money30 = money23.subtract(money25);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(1);
    boolean b39 = money33.equals((java.lang.Object)(-1.0d));
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.util.Currency currency44 = money41.getCurrency();
    money33.setCurrency(currency44);
    core.Money money46 = new core.Money(100.0d, currency44);
    java.util.Currency currency47 = money46.getCurrency();
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(10);
    core.Money money61 = money51.subtract(money56);
    core.Money money62 = money46.add(money61);
    core.Money money63 = money30.subtract(money62);
    boolean b64 = money1.equals((java.lang.Object)money63);
    core.Money money65 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money66 = money1.add(money65);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);

  }

  @Test
  public void test328() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test328"); }


    core.Money money1 = core.Money.dollars((-1.0d));
    java.util.Currency currency2 = money1.getCurrency();
    java.util.Locale locale3 = null;
    // The following exception was thrown during execution in test generation
    try {
      money1.setLocale(locale3);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency2);

  }

  @Test
  public void test329() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test329"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money money30 = money25.add(money27);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    core.Money money37 = money27.subtract(money32);
    java.lang.String str38 = money32.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.util.Currency currency59 = money56.getCurrency();
    money48.setCurrency(currency59);
    core.Money money61 = new core.Money(10.0d, currency59);
    core.Money money62 = new core.Money(1.0d, currency59);
    core.Money money63 = new core.Money(0L, currency59);
    core.Money money64 = money40.subtract(money63);
    boolean b65 = money32.equals(money40);
    boolean b66 = money22.equals((java.lang.Object)money32);
    java.math.BigDecimal bigDecimal67 = money32.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);

  }

  @Test
  public void test330() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test330"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    money7.setAmount(100.0d);
    boolean b15 = money1.equals(money7);
    money7.setAmount(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.subtract(money21);
    core.Money money29 = core.Money.dollars(10.0d);
    boolean b30 = money27.equals(money29);
    boolean b31 = money7.equals((java.lang.Object)b30);
    java.util.Locale locale32 = money7.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);

  }

  @Test
  public void test331() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test331"); }


    core.Money money3 = new core.Money();
    core.Money money5 = core.Money.dollars(10.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money money10 = money5.add(money7);
    core.Money money11 = money3.add(money7);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(10);
    core.Money money25 = money15.subtract(money20);
    core.Money money26 = money7.add(money25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal29 = money28.amount();
    money28.setAmount((-1.0d));
    core.Money money32 = money26.add(money28);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(10);
    money34.setAmount(1.0d);
    java.lang.String str41 = money34.toString();
    java.util.Locale locale42 = money34.getLocale();
    core.Money money43 = money32.add(money34);
    core.Money money45 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal46 = money45.amount();
    core.Money[] money_array48 = money45.divide(100);
    core.Money money49 = money43.subtract(money45);
    java.lang.String str50 = money49.toString();
    java.util.Currency currency51 = money49.getCurrency();
    core.Money money52 = new core.Money(100.0d, currency51);
    core.Money money53 = new core.Money(1.0d, currency51);
    core.Money money54 = new core.Money(1L, currency51);
    java.util.Locale locale55 = money54.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$1.00"+ "'", str41.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$0.00"+ "'", str50.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale55);

  }

  @Test
  public void test332() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test332"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    java.util.Currency currency17 = money16.getCurrency();
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(10.0d, currency17, locale71);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.lang.String str79 = money76.toString();
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    java.util.Currency currency84 = money81.getCurrency();
    money76.setCurrency(currency84);
    money74.setCurrency(currency84);
    core.Money money88 = core.Money.dollars(10.0d);
    core.Money[] money_array90 = money88.divide(10);
    java.util.Locale locale91 = money88.getLocale();
    money74.setLocale(locale91);
    java.util.Locale locale93 = money74.getLocale();
    java.util.Locale locale94 = money74.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale94);

  }

  @Test
  public void test333() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test333"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    core.Money money8 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal9 = money8.amount();
    core.Money[] money_array11 = money8.divide(100);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(10);
    boolean b21 = money13.equals((java.lang.Object)money16);
    boolean b22 = money8.equals(money13);
    java.lang.String str23 = money13.toString();
    core.Money money24 = money6.subtract(money13);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(10);
    boolean b34 = money26.equals((java.lang.Object)money29);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money money41 = money36.add(money38);
    core.Money money42 = money29.add(money41);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.lang.String str46 = money44.toString();
    money44.setAmount(0.0d);
    core.Money money49 = money29.add(money44);
    boolean b50 = money24.equals(money29);
    java.lang.String str51 = money24.toString();
    core.Money[] money_array53 = money24.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "($10.00)"+ "'", str51.equals("($10.00)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);

  }

  @Test
  public void test334() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test334"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    java.util.Locale locale17 = money10.getLocale();
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(1);
    boolean b25 = money19.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale26 = money19.getLocale();
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money money33 = money28.add(money30);
    core.Money money34 = money19.subtract(money28);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.lang.String str39 = money36.toString();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.util.Currency currency44 = money41.getCurrency();
    money36.setCurrency(currency44);
    money28.setCurrency(currency44);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.lang.String str53 = money50.toString();
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.util.Currency currency58 = money55.getCurrency();
    money50.setCurrency(currency58);
    core.Money money61 = core.Money.dollars(10.0d);
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money money68 = money63.add(money65);
    core.Money money69 = money61.subtract(money63);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money[] money_array75 = money71.divide(1);
    boolean b77 = money71.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale78 = money71.getLocale();
    money63.setLocale(locale78);
    core.Money money80 = new core.Money(100.0d, currency58, locale78);
    core.Money money81 = new core.Money(100L, currency58);
    core.Money money82 = money28.add(money81);
    core.Money money83 = money10.subtract(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);

  }

  @Test
  public void test335() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test335"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    money1.setAmount((-1.0d));
    java.util.Locale locale5 = money1.getLocale();
    java.math.BigDecimal bigDecimal6 = money1.amount();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array8 = money1.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);

  }

  @Test
  public void test336() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test336"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    java.lang.String str65 = money10.toString();
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    java.lang.String str71 = money68.toString();
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    java.util.Currency currency76 = money73.getCurrency();
    money68.setCurrency(currency76);
    core.Money money78 = new core.Money(0.0d, currency76);
    core.Money money79 = money10.add(money78);
    java.math.BigDecimal bigDecimal80 = money79.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);

  }

  @Test
  public void test337() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test337"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale10 = money3.getLocale();
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money3.subtract(money12);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.lang.String str23 = money20.toString();
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    java.util.Currency currency28 = money25.getCurrency();
    money20.setCurrency(currency28);
    money12.setCurrency(currency28);
    core.Money money31 = new core.Money(10L, currency28);
    core.Money money32 = new core.Money();
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.add(money36);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money42.subtract(money44);
    java.lang.String str51 = money44.toString();
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.subtract(money55);
    core.Money money62 = money44.add(money61);
    boolean b63 = money32.equals((java.lang.Object)money44);
    core.Money money64 = money31.add(money32);
    java.util.Locale locale65 = money31.getLocale();
    java.util.Currency currency66 = money31.getCurrency();
    core.Money money67 = new core.Money((-1L), currency66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency66);

  }

  @Test
  public void test338() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test338"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money12 = new core.Money(100L, currency10);
    java.lang.String str13 = money12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$100.00"+ "'", str13.equals("$100.00"));

  }

  @Test
  public void test339() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test339"); }


    java.util.Currency currency1 = null;
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    money21.setAmount(1.0d);
    java.lang.String str28 = money21.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    core.Money money53 = new core.Money(1.0d, currency42, locale52);
    money21.setCurrency(currency42);
    money19.setCurrency(currency42);
    core.Money money56 = new core.Money();
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money64 = money56.add(money60);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money money71 = money66.add(money68);
    boolean b72 = money64.equals(money68);
    java.util.Locale locale73 = money64.getLocale();
    money19.setLocale(locale73);
    // The following exception was thrown during execution in test generation
    try {
      core.Money money75 = new core.Money(0.0d, currency1, locale73);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$1.00"+ "'", str28.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);

  }

  @Test
  public void test340() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test340"); }


    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(1);
    boolean b14 = money8.equals((java.lang.Object)(-1.0d));
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    money8.setCurrency(currency19);
    core.Money money21 = new core.Money(10.0d, currency19);
    core.Money money22 = new core.Money(1.0d, currency19);
    core.Money money23 = new core.Money(1L, currency19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(1);
    boolean b47 = money41.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale48 = money41.getLocale();
    core.Money money49 = new core.Money(1.0d, currency38, locale48);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money51.setLocale(locale60);
    core.Money money62 = new core.Money(1.0d, currency38, locale60);
    money23.setCurrency(currency38);
    core.Money money64 = new core.Money(1L, currency38);
    core.Money money65 = new core.Money(100L, currency38);
    core.Money money66 = new core.Money(100L, currency38);
    core.Money money67 = new core.Money(10.0d, currency38);
    money67.setAmount(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);

  }

  @Test
  public void test341() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test341"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale23 = money16.getLocale();
    core.Money money24 = new core.Money(1.0d, currency13, locale23);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(100.0d, currency38);
    boolean b41 = money24.equals(money40);
    java.lang.String str42 = money40.toString();
    core.Money money43 = new core.Money();
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.add(money47);
    core.Money money52 = new core.Money();
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.add(money56);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money money67 = money62.add(money64);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money[] money_array73 = money69.divide(10);
    core.Money money74 = money64.subtract(money69);
    core.Money money75 = money56.add(money74);
    core.Money money77 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal78 = money77.amount();
    money77.setAmount((-1.0d));
    core.Money money81 = money75.add(money77);
    core.Money money82 = money51.add(money75);
    core.Money[] money_array84 = money82.divide(10);
    core.Money money85 = money40.add(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$100.00"+ "'", str42.equals("$100.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);

  }

  @Test
  public void test342() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test342"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    boolean b18 = money10.equals((java.lang.Object)10.0d);
    core.Money money19 = new core.Money();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.add(money23);
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(10);
    core.Money money41 = money31.subtract(money36);
    core.Money money42 = money23.add(money41);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(10);
    core.Money money56 = money46.subtract(money51);
    java.lang.String str57 = money51.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money[] money_array71 = money67.divide(1);
    boolean b73 = money67.equals((java.lang.Object)(-1.0d));
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    java.util.Currency currency78 = money75.getCurrency();
    money67.setCurrency(currency78);
    core.Money money80 = new core.Money(10.0d, currency78);
    core.Money money81 = new core.Money(1.0d, currency78);
    core.Money money82 = new core.Money(0L, currency78);
    core.Money money83 = money59.subtract(money82);
    boolean b84 = money51.equals(money59);
    boolean b85 = money41.equals((java.lang.Object)money51);
    java.util.Locale locale86 = money51.getLocale();
    core.Money money87 = money10.add(money51);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array89 = money87.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);

  }

  @Test
  public void test343() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test343"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money10.subtract(money12);
    java.lang.String str19 = money12.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    core.Money money30 = money12.add(money29);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    boolean b36 = money29.equals(money32);
    java.util.Currency currency37 = money29.getCurrency();
    money8.setCurrency(currency37);
    java.lang.String str39 = money8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));

  }

  @Test
  public void test344() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test344"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.subtract(money39);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money[] money_array51 = money47.divide(1);
    boolean b53 = money47.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale54 = money47.getLocale();
    money39.setLocale(locale54);
    core.Money money56 = new core.Money(1.0d, currency23, locale54);
    java.util.Locale locale57 = money56.getLocale();
    money56.setAmount(70.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);

  }

  @Test
  public void test345() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test345"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money60.subtract(money69);
    boolean b76 = money58.equals(money60);
    core.Money[] money_array78 = money60.divide(100);
    core.Money[] money_array80 = money60.divide(1);
    core.Money money82 = core.Money.dollars((-1.0d));
    java.util.Currency currency83 = money82.getCurrency();
    boolean b84 = money60.equals(money82);
    java.math.BigDecimal bigDecimal85 = money82.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);

  }

  @Test
  public void test346() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test346"); }


    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money money9 = money4.add(money6);
    core.Money money10 = money2.subtract(money4);
    java.lang.String str11 = money4.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money22 = money4.add(money21);
    java.util.Currency currency23 = money21.getCurrency();
    core.Money money25 = core.Money.dollars(10.0d);
    core.Money money27 = core.Money.dollars(10.0d);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money money32 = money27.add(money29);
    core.Money money33 = money25.subtract(money27);
    core.Money money35 = core.Money.dollars(10.0d);
    boolean b36 = money33.equals(money35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    boolean b46 = money38.equals((java.lang.Object)money41);
    money41.setAmount(100.0d);
    core.Money money49 = money33.add(money41);
    java.math.BigDecimal bigDecimal50 = money49.amount();
    java.util.Locale locale51 = money49.getLocale();
    core.Money money52 = new core.Money(1.0d, currency23, locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);

  }

  @Test
  public void test347() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test347"); }


    core.Money money1 = core.Money.dollars((-1.0d));
    java.util.Currency currency2 = money1.getCurrency();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.math.BigDecimal bigDecimal4 = money1.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);

  }

  @Test
  public void test348() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test348"); }


    core.Money money1 = core.Money.dollars((-1.0d));
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.lang.String str6 = money3.toString();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    java.util.Currency currency11 = money8.getCurrency();
    money3.setCurrency(currency11);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.lang.String str17 = money14.toString();
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money14.setCurrency(currency22);
    boolean b25 = money14.equals((java.lang.Object)(byte)100);
    boolean b26 = money3.equals((java.lang.Object)money14);
    java.lang.String str27 = money3.toString();
    core.Money money28 = money1.add(money3);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money44 = new core.Money(100.0d, currency42);
    java.util.Currency currency45 = money44.getCurrency();
    core.Money money46 = money3.subtract(money44);
    java.lang.Object obj47 = null;
    boolean b48 = money44.equals(obj47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);

  }

  @Test
  public void test349() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test349"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    java.lang.String str24 = money23.toString();
    money23.setAmount(100.0d);
    java.math.BigDecimal bigDecimal27 = money23.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);

  }

  @Test
  public void test350() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test350"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money36 = new core.Money(1L, currency23);
    core.Money money37 = new core.Money();
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.add(money41);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money money52 = money47.add(money49);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(10);
    core.Money money59 = money49.subtract(money54);
    core.Money money60 = money41.add(money59);
    java.util.Locale locale61 = money60.getLocale();
    money36.setLocale(locale61);
    money36.setAmount(0.0d);
    money36.setAmount(20.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale61);

  }

  @Test
  public void test351() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test351"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    boolean b16 = money8.equals(money12);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    core.Money money73 = new core.Money(1.0d, currency40, locale71);
    money12.setLocale(locale71);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    core.Money[] money_array83 = money79.divide(10);
    boolean b84 = money76.equals((java.lang.Object)money79);
    core.Money money86 = core.Money.dollars(10.0d);
    core.Money money88 = core.Money.dollars(10.0d);
    java.lang.String str89 = money88.toString();
    java.math.BigDecimal bigDecimal90 = money88.amount();
    core.Money money91 = money86.add(money88);
    core.Money money92 = money79.add(money91);
    core.Money money94 = core.Money.dollars(10.0d);
    core.Money money95 = money92.add(money94);
    boolean b96 = money12.equals(money94);
    money94.setAmount(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "$10.00"+ "'", str89.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == true);

  }

  @Test
  public void test352() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test352"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    core.Money[] money_array14 = money10.divide(1);
    boolean b16 = money10.equals((java.lang.Object)(-1.0d));
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.util.Currency currency21 = money18.getCurrency();
    money10.setCurrency(currency21);
    core.Money money23 = new core.Money(10.0d, currency21);
    core.Money money24 = new core.Money(1.0d, currency21);
    core.Money money25 = new core.Money(0L, currency21);
    core.Money money26 = money2.subtract(money25);
    java.math.BigDecimal bigDecimal27 = money26.amount();
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money43 = new core.Money(10.0d, currency41);
    money26.setCurrency(currency41);
    core.Money money45 = new core.Money(11.0d, currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);

  }

  @Test
  public void test353() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test353"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(1);
    boolean b40 = money34.equals((java.lang.Object)(-1.0d));
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money34.setCurrency(currency45);
    core.Money money47 = new core.Money(10.0d, currency45);
    core.Money money48 = new core.Money(1.0d, currency45);
    core.Money money49 = new core.Money(1L, currency45);
    core.Money money50 = new core.Money(10.0d, currency45);
    boolean b51 = money10.equals((java.lang.Object)10.0d);
    java.util.Locale locale52 = money10.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);

  }

  @Test
  public void test354() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test354"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money money30 = money25.add(money27);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    core.Money money37 = money27.subtract(money32);
    java.lang.String str38 = money32.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.util.Currency currency59 = money56.getCurrency();
    money48.setCurrency(currency59);
    core.Money money61 = new core.Money(10.0d, currency59);
    core.Money money62 = new core.Money(1.0d, currency59);
    core.Money money63 = new core.Money(0L, currency59);
    core.Money money64 = money40.subtract(money63);
    boolean b65 = money32.equals(money40);
    boolean b66 = money22.equals((java.lang.Object)money32);
    java.util.Locale locale67 = money22.getLocale();
    java.math.BigDecimal bigDecimal68 = money22.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);

  }

  @Test
  public void test355() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test355"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(0L, currency16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    core.Money money46 = new core.Money(1.0d, currency35, locale45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    money48.setLocale(locale57);
    core.Money money59 = new core.Money(1.0d, currency35, locale57);
    core.Money money60 = new core.Money(0.0d, currency16, locale57);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    java.lang.String str65 = money62.toString();
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money62.setCurrency(currency70);
    boolean b73 = money62.equals((java.lang.Object)(byte)100);
    java.lang.Object obj74 = null;
    boolean b75 = money62.equals(obj74);
    java.util.Currency currency76 = money62.getCurrency();
    boolean b77 = money60.equals(money62);
    money62.setAmount(100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test356() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test356"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money15 = new core.Money(100.0d, currency13);
    java.util.Currency currency16 = money15.getCurrency();
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(10);
    core.Money money30 = money20.subtract(money25);
    core.Money money31 = money15.add(money30);
    java.math.BigDecimal bigDecimal32 = money15.amount();
    core.Money money33 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b34 = money15.equals(money33);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);

  }

  @Test
  public void test357() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test357"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money[] money_array20 = money18.divide(10);
    java.util.Locale locale21 = money18.getLocale();
    core.Money money22 = money1.subtract(money18);
    java.util.Currency currency23 = money1.getCurrency();
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(100.0d, currency38);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(10);
    money42.setAmount(1.0d);
    java.lang.String str49 = money42.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money52.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    core.Money money74 = new core.Money(1.0d, currency63, locale73);
    money42.setCurrency(currency63);
    core.Money money77 = core.Money.dollars(10.0d);
    core.Money money79 = core.Money.dollars(10.0d);
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money money84 = money79.add(money81);
    core.Money money85 = money77.subtract(money79);
    core.Money money87 = core.Money.dollars(10.0d);
    java.lang.String str88 = money87.toString();
    java.math.BigDecimal bigDecimal89 = money87.amount();
    core.Money[] money_array91 = money87.divide(1);
    boolean b93 = money87.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale94 = money87.getLocale();
    money79.setLocale(locale94);
    money42.setLocale(locale94);
    core.Money money97 = new core.Money(1.0d, currency38, locale94);
    money1.setLocale(locale94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$1.00"+ "'", str49.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "$10.00"+ "'", str88.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale94);

  }

  @Test
  public void test358() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test358"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    java.math.BigDecimal bigDecimal7 = money6.amount();
    java.lang.String str8 = money6.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(1);
    boolean b24 = money18.equals((java.lang.Object)(-1.0d));
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money18.setCurrency(currency29);
    core.Money money31 = new core.Money(10.0d, currency29);
    core.Money money32 = new core.Money(1.0d, currency29);
    core.Money money33 = new core.Money(0L, currency29);
    core.Money money34 = money10.subtract(money33);
    java.lang.Object obj35 = null;
    boolean b36 = money34.equals(obj35);
    core.Money money37 = money6.add(money34);
    java.math.BigDecimal bigDecimal38 = money37.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$0.00"+ "'", str8.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);

  }

  @Test
  public void test359() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test359"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale23 = money16.getLocale();
    core.Money money24 = new core.Money(1.0d, currency13, locale23);
    java.lang.String str25 = money24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$1.00"+ "'", str25.equals("$1.00"));

  }

  @Test
  public void test360() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test360"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    java.util.Currency currency9 = money6.getCurrency();
    money1.setCurrency(currency9);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    boolean b29 = money1.equals((java.lang.Object)money15);
    java.util.Locale locale30 = money15.getLocale();
    java.lang.String str31 = money15.toString();
    java.util.Currency currency32 = money15.getCurrency();
    java.util.Currency currency33 = money15.getCurrency();
    money15.setAmount((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency33);

  }

  @Test
  public void test361() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test361"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(10);
    money12.setAmount(1.0d);
    java.lang.String str19 = money12.toString();
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money[] money_array26 = money22.divide(1);
    boolean b28 = money22.equals((java.lang.Object)(-1.0d));
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    java.util.Currency currency33 = money30.getCurrency();
    money22.setCurrency(currency33);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(1);
    boolean b42 = money36.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale43 = money36.getLocale();
    core.Money money44 = new core.Money(1.0d, currency33, locale43);
    money12.setCurrency(currency33);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money55 = money47.subtract(money49);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(1);
    boolean b63 = money57.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale64 = money57.getLocale();
    money49.setLocale(locale64);
    core.Money money66 = new core.Money(1.0d, currency33, locale64);
    core.Money money67 = new core.Money(0.0d, currency33);
    java.lang.String str68 = money67.toString();
    boolean b69 = money1.equals(money67);
    java.util.Locale locale70 = money67.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$1.00"+ "'", str19.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$0.00"+ "'", str68.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);

  }

  @Test
  public void test362() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test362"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal26 = money25.amount();
    money25.setAmount((-1.0d));
    core.Money money29 = money23.add(money25);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    money31.setAmount(1.0d);
    java.lang.String str38 = money31.toString();
    java.util.Locale locale39 = money31.getLocale();
    core.Money money40 = money29.add(money31);
    core.Money money42 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal43 = money42.amount();
    core.Money[] money_array45 = money42.divide(100);
    core.Money money46 = money40.subtract(money42);
    core.Money money49 = core.Money.dollars((-1.0d));
    java.util.Currency currency50 = money49.getCurrency();
    core.Money money51 = new core.Money((-1L), currency50);
    java.util.Locale locale52 = money51.getLocale();
    money40.setLocale(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$1.00"+ "'", str38.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);

  }

  @Test
  public void test363() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test363"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.util.Currency currency4 = money1.getCurrency();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(1);
    boolean b15 = money9.equals((java.lang.Object)(-1.0d));
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.util.Currency currency20 = money17.getCurrency();
    money9.setCurrency(currency20);
    core.Money money22 = new core.Money(10.0d, currency20);
    core.Money money23 = new core.Money(1.0d, currency20);
    core.Money money24 = new core.Money(0L, currency20);
    core.Money money25 = money1.subtract(money24);
    java.lang.String str26 = money25.toString();
    java.util.Currency currency27 = money25.getCurrency();
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money money36 = money31.add(money33);
    core.Money money37 = money29.subtract(money31);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(1);
    boolean b45 = money39.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale46 = money39.getLocale();
    money31.setLocale(locale46);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money money56 = money51.add(money53);
    core.Money money57 = money49.subtract(money51);
    java.math.BigDecimal bigDecimal58 = money49.amount();
    boolean b59 = money31.equals(money49);
    core.Money money61 = core.Money.dollars(11.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money money64 = money49.subtract(money61);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money[] money_array71 = money67.divide(1);
    boolean b73 = money67.equals((java.lang.Object)(-1.0d));
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    java.util.Currency currency78 = money75.getCurrency();
    money67.setCurrency(currency78);
    core.Money money80 = new core.Money(100.0d, currency78);
    java.util.Currency currency81 = money80.getCurrency();
    money49.setCurrency(currency81);
    core.Money money83 = money25.add(money49);
    money83.setAmount(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$11.00"+ "'", str62.equals("$11.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);

  }

  @Test
  public void test364() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test364"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money36.subtract(money38);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(1);
    boolean b52 = money46.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale53 = money46.getLocale();
    money38.setLocale(locale53);
    money1.setLocale(locale53);
    java.util.Locale locale56 = money1.getLocale();
    core.Money[] money_array58 = money1.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);

  }

  @Test
  public void test365() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test365"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money23 = new core.Money((-1L), currency22);
    money23.setAmount(9.0d);
    core.Money[] money_array27 = money23.divide(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);

  }

  @Test
  public void test366() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test366"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    boolean b26 = money18.equals((java.lang.Object)money21);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money money33 = money28.add(money30);
    core.Money money34 = money21.add(money33);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.lang.String str38 = money36.toString();
    money36.setAmount(0.0d);
    core.Money money41 = money21.add(money36);
    core.Money money42 = money16.add(money36);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money52 = money44.subtract(money46);
    core.Money money54 = core.Money.dollars(10.0d);
    boolean b55 = money52.equals(money54);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(10);
    boolean b65 = money57.equals((java.lang.Object)money60);
    money60.setAmount(100.0d);
    core.Money money68 = money52.add(money60);
    core.Money money69 = money36.add(money68);
    core.Money money71 = core.Money.dollars(10.0d);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(1);
    boolean b79 = money73.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale80 = money73.getLocale();
    money71.setLocale(locale80);
    java.util.Currency currency82 = money71.getCurrency();
    core.Money[] money_array84 = money71.divide(1);
    boolean b85 = money69.equals((java.lang.Object)money_array84);
    money69.setAmount(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);

  }

  @Test
  public void test367() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test367"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(10);
    money6.setAmount(1.0d);
    java.lang.String str13 = money6.toString();
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money16.setCurrency(currency27);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale37 = money30.getLocale();
    core.Money money38 = new core.Money(1.0d, currency27, locale37);
    money6.setCurrency(currency27);
    core.Money money40 = new core.Money(1L, currency27);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    money42.setLocale(locale51);
    core.Money money53 = new core.Money(10.0d, currency27, locale51);
    java.util.Currency currency54 = money53.getCurrency();
    core.Money money55 = new core.Money(10L, currency54);
    java.util.Currency currency56 = money55.getCurrency();
    core.Money money57 = new core.Money(1L, currency56);
    core.Money money58 = new core.Money((-1L), currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$1.00"+ "'", str13.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);

  }

  @Test
  public void test368() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test368"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money19 = money4.subtract(money13);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.lang.String str24 = money21.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money21.setCurrency(currency29);
    money13.setCurrency(currency29);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.lang.String str38 = money35.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    money35.setCurrency(currency43);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money46.subtract(money48);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    money48.setLocale(locale63);
    core.Money money65 = new core.Money(100.0d, currency43, locale63);
    core.Money money66 = new core.Money(100L, currency43);
    core.Money money67 = money13.add(money66);
    java.util.Locale locale68 = money66.getLocale();
    core.Money money69 = money1.subtract(money66);
    java.math.BigDecimal bigDecimal70 = money1.amount();
    java.lang.String str71 = money1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));

  }

  @Test
  public void test369() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test369"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    java.math.BigDecimal bigDecimal7 = money6.amount();
    java.lang.String str8 = money6.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(1);
    boolean b24 = money18.equals((java.lang.Object)(-1.0d));
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money18.setCurrency(currency29);
    core.Money money31 = new core.Money(10.0d, currency29);
    core.Money money32 = new core.Money(1.0d, currency29);
    core.Money money33 = new core.Money(0L, currency29);
    core.Money money34 = money10.subtract(money33);
    java.lang.Object obj35 = null;
    boolean b36 = money34.equals(obj35);
    core.Money money37 = money6.add(money34);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(1);
    boolean b45 = money39.equals((java.lang.Object)(-1.0d));
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    java.util.Currency currency50 = money47.getCurrency();
    money39.setCurrency(currency50);
    java.lang.String str52 = money39.toString();
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    java.lang.String str63 = money56.toString();
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money money72 = money67.add(money69);
    core.Money money73 = money65.subtract(money67);
    core.Money money74 = money56.add(money73);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.util.Currency currency79 = money76.getCurrency();
    boolean b80 = money73.equals(money76);
    java.util.Currency currency81 = money73.getCurrency();
    money39.setCurrency(currency81);
    money6.setCurrency(currency81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$0.00"+ "'", str8.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency81);

  }

  @Test
  public void test370() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test370"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale18 = money11.getLocale();
    money3.setLocale(locale18);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    java.math.BigDecimal bigDecimal30 = money21.amount();
    boolean b31 = money3.equals(money21);
    core.Money money33 = core.Money.dollars(11.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money money36 = money21.subtract(money33);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array38 = money36.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$11.00"+ "'", str34.equals("$11.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);

  }

  @Test
  public void test371() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test371"); }


    core.Money money3 = new core.Money();
    core.Money money5 = core.Money.dollars(10.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money money10 = money5.add(money7);
    core.Money money11 = money3.add(money7);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(10);
    core.Money money25 = money15.subtract(money20);
    core.Money money26 = money7.add(money25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal29 = money28.amount();
    money28.setAmount((-1.0d));
    core.Money money32 = money26.add(money28);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(10);
    money34.setAmount(1.0d);
    java.lang.String str41 = money34.toString();
    java.util.Locale locale42 = money34.getLocale();
    core.Money money43 = money32.add(money34);
    core.Money money45 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal46 = money45.amount();
    core.Money[] money_array48 = money45.divide(100);
    core.Money money49 = money43.subtract(money45);
    java.lang.String str50 = money49.toString();
    java.util.Currency currency51 = money49.getCurrency();
    core.Money money52 = new core.Money(100.0d, currency51);
    core.Money money53 = new core.Money();
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.add(money57);
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money money70 = money65.add(money67);
    core.Money money71 = money63.subtract(money65);
    java.lang.String str72 = money65.toString();
    core.Money money74 = core.Money.dollars(10.0d);
    core.Money money76 = core.Money.dollars(10.0d);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    core.Money money81 = money76.add(money78);
    core.Money money82 = money74.subtract(money76);
    core.Money money83 = money65.add(money82);
    boolean b84 = money53.equals((java.lang.Object)money65);
    java.util.Locale locale85 = money53.getLocale();
    core.Money money86 = new core.Money(100.0d, currency51, locale85);
    java.util.Locale locale87 = null;
    core.Money money88 = new core.Money(0.0d, currency51, locale87);
    // The following exception was thrown during execution in test generation
    try {
      java.lang.String str89 = money88.toString();
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$1.00"+ "'", str41.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$0.00"+ "'", str50.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale85);

  }

  @Test
  public void test372() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test372"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(70.0d, currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);

  }

  @Test
  public void test373() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test373"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.subtract(money39);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money[] money_array51 = money47.divide(1);
    boolean b53 = money47.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale54 = money47.getLocale();
    money39.setLocale(locale54);
    core.Money money56 = new core.Money(1.0d, currency23, locale54);
    core.Money money57 = new core.Money();
    core.Money money59 = core.Money.dollars(10.0d);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money money64 = money59.add(money61);
    core.Money money65 = money57.add(money61);
    core.Money money66 = money56.subtract(money57);
    core.Money money67 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money68 = money57.subtract(money67);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);

  }

  @Test
  public void test374() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test374"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal3 = money2.amount();
    money2.setAmount((-1.0d));
    java.util.Locale locale6 = money2.getLocale();
    java.math.BigDecimal bigDecimal7 = money2.amount();
    core.Money money9 = new core.Money();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money9.add(money13);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(1);
    boolean b25 = money19.equals((java.lang.Object)(-1.0d));
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    java.util.Currency currency30 = money27.getCurrency();
    money19.setCurrency(currency30);
    java.lang.String str32 = money19.toString();
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.lang.String str39 = money36.toString();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.util.Currency currency44 = money41.getCurrency();
    money36.setCurrency(currency44);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money55 = money47.subtract(money49);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(1);
    boolean b63 = money57.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale64 = money57.getLocale();
    money49.setLocale(locale64);
    core.Money money66 = new core.Money(100.0d, currency44, locale64);
    core.Money money67 = new core.Money(10.0d, currency44);
    money19.setCurrency(currency44);
    money13.setCurrency(currency44);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    java.math.BigDecimal bigDecimal76 = money74.amount();
    core.Money[] money_array78 = money74.divide(10);
    boolean b79 = money71.equals((java.lang.Object)money74);
    core.Money money81 = core.Money.dollars(10.0d);
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    core.Money money86 = money81.add(money83);
    core.Money money87 = money74.add(money86);
    java.util.Locale locale88 = money87.getLocale();
    core.Money money89 = new core.Money(9.0d, currency44, locale88);
    boolean b90 = money2.equals((java.lang.Object)currency44);
    core.Money money91 = new core.Money(100L, currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);

  }

  @Test
  public void test375() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test375"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale18 = money11.getLocale();
    money3.setLocale(locale18);
    core.Money money20 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b21 = money3.equals(money20);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale18);

  }

  @Test
  public void test376() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test376"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(10.0d, currency14);
    core.Money money17 = new core.Money(0L, currency14);
    java.lang.String str18 = money17.toString();
    java.util.Locale locale19 = money17.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$0.00"+ "'", str18.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale19);

  }

  @Test
  public void test377() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test377"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    java.math.BigDecimal bigDecimal18 = money4.amount();
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(10);
    boolean b28 = money20.equals((java.lang.Object)money23);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money23.add(money35);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money39 = money36.add(money38);
    java.util.Currency currency40 = money38.getCurrency();
    boolean b41 = money4.equals((java.lang.Object)money38);
    java.math.BigDecimal bigDecimal42 = money38.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);

  }

  @Test
  public void test378() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test378"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    core.Money money24 = money14.subtract(money19);
    core.Money money25 = money5.add(money24);
    java.lang.String str26 = money24.toString();
    java.util.Locale locale27 = money24.getLocale();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    boolean b37 = money29.equals((java.lang.Object)money32);
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money32.add(money44);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money48 = money45.add(money47);
    java.util.Currency currency49 = money47.getCurrency();
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money money56 = money51.add(money53);
    core.Money money57 = money47.subtract(money51);
    core.Money money58 = money24.subtract(money57);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(1);
    boolean b68 = money62.equals((java.lang.Object)(-1.0d));
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    java.util.Currency currency73 = money70.getCurrency();
    money62.setCurrency(currency73);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    core.Money money84 = new core.Money(1.0d, currency73, locale83);
    core.Money money86 = core.Money.dollars(10.0d);
    core.Money money88 = core.Money.dollars(10.0d);
    java.lang.String str89 = money88.toString();
    java.math.BigDecimal bigDecimal90 = money88.amount();
    core.Money[] money_array92 = money88.divide(1);
    boolean b94 = money88.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale95 = money88.getLocale();
    money86.setLocale(locale95);
    core.Money money97 = new core.Money(1.0d, currency73, locale95);
    money58.setCurrency(currency73);
    core.Money money99 = new core.Money(0L, currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$0.00"+ "'", str26.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str89 + "' != '" + "$10.00"+ "'", str89.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale95);

  }

  @Test
  public void test379() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test379"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(100.0d, currency38);
    java.util.Currency currency41 = money40.getCurrency();
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(10);
    core.Money money55 = money45.subtract(money50);
    core.Money money56 = money40.add(money55);
    core.Money money57 = money24.subtract(money56);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money59.setCurrency(currency70);
    java.lang.String str72 = money59.toString();
    money59.setAmount(0.0d);
    java.lang.String str75 = money59.toString();
    core.Money money76 = money56.add(money59);
    java.lang.Object obj77 = null;
    boolean b78 = money76.equals(obj77);
    core.Money money80 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal81 = money80.amount();
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money[] money_array90 = money86.divide(10);
    boolean b91 = money83.equals((java.lang.Object)money86);
    money86.setAmount(100.0d);
    boolean b94 = money80.equals(money86);
    money86.setAmount(10.0d);
    boolean b97 = money76.equals((java.lang.Object)10.0d);
    java.util.Currency currency98 = money76.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$0.00"+ "'", str75.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency98);

  }

  @Test
  public void test380() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test380"); }


    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(1);
    boolean b13 = money7.equals((java.lang.Object)(-1.0d));
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money7.setCurrency(currency18);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(1);
    boolean b27 = money21.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale28 = money21.getLocale();
    core.Money money29 = new core.Money(1.0d, currency18, locale28);
    core.Money money31 = core.Money.dollars(10.0d);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(1);
    boolean b39 = money33.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale40 = money33.getLocale();
    money31.setLocale(locale40);
    core.Money money42 = new core.Money(1.0d, currency18, locale40);
    core.Money money43 = new core.Money(0L, currency18);
    core.Money money44 = new core.Money(0L, currency18);
    core.Money money45 = new core.Money(11.0d, currency18);
    core.Money money46 = new core.Money(10L, currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale40);

  }

  @Test
  public void test381() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test381"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money21 = new core.Money(10.0d, currency17);
    core.Money money22 = new core.Money(100L, currency17);
    core.Money money23 = new core.Money(10.0d, currency17);
    java.math.BigDecimal bigDecimal24 = money23.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);

  }

  @Test
  public void test382() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test382"); }


    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale13 = money6.getLocale();
    money4.setLocale(locale13);
    java.util.Currency currency15 = money4.getCurrency();
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    money17.setAmount(1.0d);
    java.lang.String str24 = money17.toString();
    java.util.Locale locale25 = money17.getLocale();
    core.Money money26 = new core.Money(10.0d, currency15, locale25);
    core.Money money27 = new core.Money();
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money35 = money27.add(money31);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(10);
    core.Money money49 = money39.subtract(money44);
    core.Money money50 = money31.add(money49);
    java.util.Locale locale51 = money50.getLocale();
    core.Money money52 = new core.Money(0.0d, currency15, locale51);
    core.Money money53 = new core.Money(9.0d, currency15);
    java.util.Locale locale54 = money53.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$1.00"+ "'", str24.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);

  }

  @Test
  public void test383() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test383"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    java.util.Currency currency17 = money16.getCurrency();
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(10.0d, currency17, locale71);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.lang.String str79 = money76.toString();
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    java.util.Currency currency84 = money81.getCurrency();
    money76.setCurrency(currency84);
    money74.setCurrency(currency84);
    core.Money money88 = core.Money.dollars(10.0d);
    core.Money[] money_array90 = money88.divide(10);
    java.util.Locale locale91 = money88.getLocale();
    money74.setLocale(locale91);
    java.util.Locale locale93 = money74.getLocale();
    money74.setAmount(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);

  }

  @Test
  public void test384() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test384"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money31 = money28.add(money30);
    boolean b32 = money3.equals(money28);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    core.Money money39 = new core.Money(0L, currency38);
    boolean b40 = money28.equals(money39);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(10);
    money42.setAmount(1.0d);
    java.lang.String str49 = money42.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money52.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    core.Money money74 = new core.Money(1.0d, currency63, locale73);
    money42.setCurrency(currency63);
    core.Money money76 = money39.add(money42);
    java.math.BigDecimal bigDecimal77 = money76.amount();
    money76.setAmount(70.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$1.00"+ "'", str49.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);

  }

  @Test
  public void test385() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test385"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    money8.setAmount(1.0d);
    core.Money money15 = money6.add(money8);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(1);
    boolean b24 = money18.equals((java.lang.Object)(-1.0d));
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.util.Currency currency29 = money26.getCurrency();
    money18.setCurrency(currency29);
    core.Money money31 = new core.Money(100.0d, currency29);
    java.util.Currency currency32 = money31.getCurrency();
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    core.Money money46 = money36.subtract(money41);
    core.Money money47 = money31.add(money46);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    java.lang.String str55 = money52.toString();
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    java.util.Currency currency60 = money57.getCurrency();
    money52.setCurrency(currency60);
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money money70 = money65.add(money67);
    core.Money money71 = money63.subtract(money65);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(1);
    boolean b79 = money73.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale80 = money73.getLocale();
    money65.setLocale(locale80);
    core.Money money82 = new core.Money(100.0d, currency60, locale80);
    core.Money money83 = new core.Money(100L, currency60);
    core.Money money84 = new core.Money(1L, currency60);
    core.Money money85 = money31.subtract(money84);
    core.Money money86 = money8.subtract(money85);
    java.math.BigDecimal bigDecimal87 = money8.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);

  }

  @Test
  public void test386() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test386"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.math.BigDecimal bigDecimal10 = money9.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);

  }

  @Test
  public void test387() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test387"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    java.math.BigDecimal bigDecimal9 = money1.amount();
    java.util.Currency currency10 = money1.getCurrency();
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money12.subtract(money14);
    java.lang.String str21 = money14.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    boolean b31 = money23.equals((java.lang.Object)money26);
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money26.add(money38);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money42 = money39.add(money41);
    boolean b43 = money14.equals(money39);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money45.subtract(money54);
    boolean b62 = money54.equals((java.lang.Object)10.0d);
    java.util.Locale locale63 = money54.getLocale();
    boolean b64 = money14.equals((java.lang.Object)money54);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    core.Money money71 = new core.Money(0L, currency70);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(10);
    money73.setAmount(1.0d);
    core.Money money80 = money71.add(money73);
    java.util.Locale locale81 = money80.getLocale();
    core.Money money83 = core.Money.dollars(10.0d);
    core.Money money85 = core.Money.dollars(10.0d);
    core.Money money87 = core.Money.dollars(10.0d);
    java.lang.String str88 = money87.toString();
    java.math.BigDecimal bigDecimal89 = money87.amount();
    core.Money money90 = money85.add(money87);
    core.Money money91 = money83.subtract(money85);
    java.math.BigDecimal bigDecimal92 = money83.amount();
    boolean b93 = money80.equals((java.lang.Object)money83);
    core.Money money94 = money14.subtract(money83);
    boolean b95 = money1.equals((java.lang.Object)money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "$10.00"+ "'", str88.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test388() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test388"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money money29 = money24.add(money26);
    core.Money money30 = money20.subtract(money24);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(1);
    boolean b40 = money34.equals((java.lang.Object)(-1.0d));
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money34.setCurrency(currency45);
    core.Money money47 = new core.Money(10.0d, currency45);
    core.Money money48 = new core.Money(0L, currency45);
    money30.setCurrency(currency45);
    core.Money money50 = new core.Money(100L, currency45);
    java.util.Locale locale51 = money50.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);

  }

  @Test
  public void test389() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test389"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(100.0d, currency15);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(1.0d, currency15, locale71);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    java.util.Currency currency80 = money77.getCurrency();
    core.Money money81 = new core.Money(0L, currency80);
    money74.setCurrency(currency80);
    java.util.Locale locale83 = null;
    core.Money money84 = new core.Money(1.0d, currency80, locale83);
    java.math.BigDecimal bigDecimal85 = money84.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);

  }

  @Test
  public void test390() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test390"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(10.0d, currency14);
    core.Money money17 = new core.Money(1.0d, currency14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    money17.setCurrency(currency40);
    core.Money[] money_array55 = money17.divide(100);
    java.util.Currency currency56 = money17.getCurrency();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    core.Money money63 = new core.Money(0L, currency62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(10);
    money65.setAmount(1.0d);
    core.Money money72 = money63.add(money65);
    core.Money money74 = core.Money.dollars(10.0d);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    money74.setLocale(locale83);
    money65.setLocale(locale83);
    money17.setLocale(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);

  }

  @Test
  public void test391() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test391"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(0.0d, currency14);
    core.Money money17 = new core.Money(0.0d, currency14);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    java.util.Currency currency34 = money31.getCurrency();
    money23.setCurrency(currency34);
    core.Money money36 = new core.Money(10.0d, currency34);
    core.Money money37 = new core.Money(1.0d, currency34);
    core.Money money38 = new core.Money(0L, currency34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money42.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    core.Money money64 = new core.Money(1.0d, currency53, locale63);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(1);
    boolean b74 = money68.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale75 = money68.getLocale();
    money66.setLocale(locale75);
    core.Money money77 = new core.Money(1.0d, currency53, locale75);
    core.Money money78 = new core.Money(0.0d, currency34, locale75);
    java.util.Locale locale79 = money78.getLocale();
    core.Money money80 = money17.add(money78);
    java.lang.String str81 = money80.toString();
    java.util.Currency currency82 = money80.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$0.00"+ "'", str81.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);

  }

  @Test
  public void test392() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test392"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(10);
    boolean b17 = money9.equals((java.lang.Object)money12);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    core.Money money31 = money21.subtract(money26);
    core.Money money32 = money12.add(money31);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(1);
    boolean b42 = money36.equals((java.lang.Object)(-1.0d));
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    java.util.Currency currency47 = money44.getCurrency();
    money36.setCurrency(currency47);
    core.Money money49 = new core.Money(10.0d, currency47);
    core.Money money50 = new core.Money(1.0d, currency47);
    money31.setCurrency(currency47);
    core.Money money52 = new core.Money((-1.0d), currency47);
    money6.setCurrency(currency47);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.util.Currency currency59 = money56.getCurrency();
    core.Money money60 = new core.Money(0.0d, currency59);
    money6.setCurrency(currency59);
    java.math.BigDecimal bigDecimal62 = money6.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);

  }

  @Test
  public void test393() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test393"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale9 = money2.getLocale();
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money2.subtract(money11);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    money11.setCurrency(currency27);
    core.Money money30 = new core.Money(10L, currency27);
    core.Money money31 = new core.Money();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money31.add(money35);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.subtract(money43);
    java.lang.String str50 = money43.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.subtract(money54);
    core.Money money61 = money43.add(money60);
    boolean b62 = money31.equals((java.lang.Object)money43);
    core.Money money63 = money30.add(money31);
    java.util.Locale locale64 = money30.getLocale();
    core.Money money65 = new core.Money();
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money money72 = money67.add(money69);
    core.Money money73 = money65.add(money69);
    java.math.BigDecimal bigDecimal74 = money73.amount();
    core.Money money75 = money30.add(money73);
    money73.setAmount(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);

  }

  @Test
  public void test394() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test394"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(0.0d, currency14);
    core.Money money17 = new core.Money(0.0d, currency14);
    core.Money[] money_array19 = money17.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);

  }

  @Test
  public void test395() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test395"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    java.lang.String str7 = money4.toString();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money4.setCurrency(currency12);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money money22 = money17.add(money19);
    core.Money money23 = money15.subtract(money17);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    money17.setLocale(locale32);
    core.Money money34 = new core.Money(100.0d, currency12, locale32);
    core.Money money35 = new core.Money(1L, currency12);
    core.Money money36 = new core.Money(100L, currency12);
    java.util.Currency currency37 = money36.getCurrency();
    java.lang.String str38 = money36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$100.00"+ "'", str38.equals("$100.00"));

  }

  @Test
  public void test396() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test396"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    money18.setAmount(1.0d);
    java.lang.String str25 = money18.toString();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale49 = money42.getLocale();
    core.Money money50 = new core.Money(1.0d, currency39, locale49);
    money18.setCurrency(currency39);
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.subtract(money55);
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    java.math.BigDecimal bigDecimal65 = money63.amount();
    core.Money[] money_array67 = money63.divide(1);
    boolean b69 = money63.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale70 = money63.getLocale();
    money55.setLocale(locale70);
    money18.setLocale(locale70);
    core.Money money73 = new core.Money(1.0d, currency14, locale70);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.util.Currency currency79 = money76.getCurrency();
    core.Money money80 = new core.Money(0L, currency79);
    money73.setCurrency(currency79);
    java.lang.String str82 = money73.toString();
    money73.setAmount(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$1.00"+ "'", str25.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$1.00"+ "'", str82.equals("$1.00"));

  }

  @Test
  public void test397() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test397"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(1);
    boolean b19 = money13.equals((java.lang.Object)(-1.0d));
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money13.setCurrency(currency24);
    core.Money money26 = new core.Money(100.0d, currency24);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(10);
    money28.setAmount(1.0d);
    java.lang.String str35 = money28.toString();
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money38.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale59 = money52.getLocale();
    core.Money money60 = new core.Money(1.0d, currency49, locale59);
    money28.setCurrency(currency49);
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money money70 = money65.add(money67);
    core.Money money71 = money63.subtract(money65);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(1);
    boolean b79 = money73.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale80 = money73.getLocale();
    money65.setLocale(locale80);
    money28.setLocale(locale80);
    core.Money money83 = new core.Money(1.0d, currency24, locale80);
    core.Money money84 = new core.Money(10L, currency24);
    java.util.Currency currency85 = money84.getCurrency();
    core.Money money86 = money4.subtract(money84);
    core.Money[] money_array88 = money86.divide(10);
    money86.setAmount(20.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$1.00"+ "'", str35.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array88);

  }

  @Test
  public void test398() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test398"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    money8.setAmount(1.0d);
    core.Money money15 = money6.add(money8);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.lang.String str20 = money17.toString();
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    java.util.Currency currency25 = money22.getCurrency();
    money17.setCurrency(currency25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    boolean b36 = money28.equals((java.lang.Object)money31);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money31.add(money43);
    boolean b45 = money17.equals((java.lang.Object)money31);
    java.util.Locale locale46 = money31.getLocale();
    boolean b47 = money8.equals(money31);
    boolean b49 = money31.equals((java.lang.Object)(-1.0f));
    money31.setAmount((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);

  }

  @Test
  public void test399() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test399"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal26 = money25.amount();
    money25.setAmount((-1.0d));
    core.Money money29 = money23.add(money25);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    money31.setAmount(1.0d);
    java.lang.String str38 = money31.toString();
    java.util.Locale locale39 = money31.getLocale();
    core.Money money40 = money29.add(money31);
    core.Money money42 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal43 = money42.amount();
    core.Money[] money_array45 = money42.divide(100);
    core.Money money46 = money40.subtract(money42);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money[] money_array53 = money49.divide(10);
    money49.setAmount(1.0d);
    java.lang.String str56 = money49.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money59.setCurrency(currency70);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(1);
    boolean b79 = money73.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale80 = money73.getLocale();
    core.Money money81 = new core.Money(1.0d, currency70, locale80);
    money49.setCurrency(currency70);
    core.Money money83 = new core.Money(1L, currency70);
    money40.setCurrency(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$1.00"+ "'", str38.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$1.00"+ "'", str56.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale80);

  }

  @Test
  public void test400() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test400"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money21 = new core.Money(10.0d, currency17);
    core.Money money22 = new core.Money(0.0d, currency17);
    core.Money money23 = new core.Money(100L, currency17);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    java.lang.String str29 = money26.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    java.util.Currency currency34 = money31.getCurrency();
    money26.setCurrency(currency34);
    core.Money money36 = new core.Money(0.0d, currency34);
    java.util.Locale locale37 = money36.getLocale();
    boolean b38 = money23.equals((java.lang.Object)locale37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test401() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test401"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money7.add(money19);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money23 = money20.add(money22);
    java.util.Currency currency24 = money22.getCurrency();
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money22.subtract(money26);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(1);
    boolean b42 = money36.equals((java.lang.Object)(-1.0d));
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    java.util.Currency currency47 = money44.getCurrency();
    money36.setCurrency(currency47);
    core.Money money49 = new core.Money(10.0d, currency47);
    core.Money money50 = new core.Money(0L, currency47);
    money32.setCurrency(currency47);
    java.util.Currency currency52 = money32.getCurrency();
    core.Money money53 = new core.Money();
    core.Money money55 = core.Money.dollars(10.0d);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money money60 = money55.add(money57);
    core.Money money61 = money53.add(money57);
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money money68 = money63.add(money65);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money[] money_array74 = money70.divide(10);
    core.Money money75 = money65.subtract(money70);
    core.Money money76 = money57.add(money75);
    java.util.Locale locale77 = money76.getLocale();
    core.Money money78 = new core.Money((-1.0d), currency52, locale77);
    core.Money money79 = new core.Money(0L, currency52);
    core.Money money80 = new core.Money((-1L), currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);

  }

  @Test
  public void test402() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test402"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    boolean b13 = money2.equals((java.lang.Object)(byte)100);
    java.lang.Object obj14 = null;
    boolean b15 = money2.equals(obj14);
    java.util.Currency currency16 = money2.getCurrency();
    core.Money money17 = new core.Money(10L, currency16);
    core.Money money18 = new core.Money();
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money money25 = money20.add(money22);
    core.Money money26 = money18.add(money22);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money money33 = money28.add(money30);
    boolean b34 = money26.equals(money30);
    java.util.Currency currency35 = money26.getCurrency();
    core.Money money36 = money17.subtract(money26);
    core.Money money37 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money38 = money17.subtract(money37);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);

  }

  @Test
  public void test403() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test403"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.util.Locale locale14 = money8.getLocale();
    java.lang.String str15 = money8.toString();
    core.Money money17 = core.Money.dollars(0.0d);
    core.Money money18 = money8.subtract(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(10.0d, currency39);
    core.Money money42 = new core.Money(1.0d, currency39);
    core.Money money43 = new core.Money(0L, currency39);
    core.Money money44 = money20.subtract(money43);
    java.util.Currency currency45 = money20.getCurrency();
    money17.setCurrency(currency45);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    java.lang.String str54 = money51.toString();
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.util.Currency currency59 = money56.getCurrency();
    money51.setCurrency(currency59);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money money69 = money64.add(money66);
    core.Money money70 = money62.subtract(money64);
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money[] money_array76 = money72.divide(1);
    boolean b78 = money72.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale79 = money72.getLocale();
    money64.setLocale(locale79);
    core.Money money81 = new core.Money(100.0d, currency59, locale79);
    core.Money money82 = new core.Money(100L, currency59);
    core.Money money84 = core.Money.dollars(9.0d);
    core.Money[] money_array86 = money84.divide(1);
    java.lang.String str87 = money84.toString();
    java.util.Locale locale88 = money84.getLocale();
    core.Money money89 = new core.Money(1.0d, currency59, locale88);
    money17.setLocale(locale88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$9.00"+ "'", str87.equals("$9.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);

  }

  @Test
  public void test404() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test404"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    java.lang.String str25 = money23.toString();
    java.util.Locale locale26 = money23.getLocale();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    boolean b36 = money28.equals((java.lang.Object)money31);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money31.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money47 = money44.add(money46);
    java.util.Currency currency48 = money46.getCurrency();
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money56 = money46.subtract(money50);
    core.Money money57 = money23.subtract(money56);
    java.util.Locale locale58 = money23.getLocale();
    money23.setAmount((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$0.00"+ "'", str25.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale58);

  }

  @Test
  public void test405() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test405"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(1);
    boolean b24 = money18.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale25 = money18.getLocale();
    core.Money money26 = new core.Money(1.0d, currency15, locale25);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale37 = money30.getLocale();
    money28.setLocale(locale37);
    core.Money money39 = new core.Money(1.0d, currency15, locale37);
    core.Money money40 = new core.Money((-1L), currency15);
    core.Money money41 = new core.Money();
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money money48 = money43.add(money45);
    core.Money money49 = money41.add(money45);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money money56 = money51.add(money53);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(10);
    core.Money money63 = money53.subtract(money58);
    core.Money money64 = money45.add(money63);
    core.Money money65 = money40.add(money63);
    java.math.BigDecimal bigDecimal66 = money63.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);

  }

  @Test
  public void test406() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test406"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(1);
    boolean b21 = money15.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale22 = money15.getLocale();
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money money29 = money24.add(money26);
    core.Money money30 = money15.subtract(money24);
    core.Money money31 = money1.add(money30);
    java.lang.String str32 = money31.toString();
    money31.setAmount(90.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));

  }

  @Test
  public void test407() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test407"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale18 = money11.getLocale();
    money3.setLocale(locale18);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    java.math.BigDecimal bigDecimal30 = money21.amount();
    boolean b31 = money3.equals(money21);
    core.Money money33 = core.Money.dollars(11.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money money36 = money21.subtract(money33);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.lang.String str40 = money38.toString();
    money38.setAmount(0.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money52 = money44.subtract(money46);
    core.Money money53 = money38.subtract(money44);
    java.lang.String str54 = money53.toString();
    core.Money money55 = money21.subtract(money53);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array57 = money55.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$11.00"+ "'", str34.equals("$11.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "($10.00)"+ "'", str54.equals("($10.00)"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);

  }

  @Test
  public void test408() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test408"); }


    core.Money money4 = new core.Money();
    core.Money money6 = core.Money.dollars(10.0d);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money money11 = money6.add(money8);
    core.Money money12 = money4.add(money8);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    core.Money money26 = money16.subtract(money21);
    core.Money money27 = money8.add(money26);
    core.Money money29 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal30 = money29.amount();
    money29.setAmount((-1.0d));
    core.Money money33 = money27.add(money29);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    money35.setAmount(1.0d);
    java.lang.String str42 = money35.toString();
    java.util.Locale locale43 = money35.getLocale();
    core.Money money44 = money33.add(money35);
    core.Money money46 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal47 = money46.amount();
    core.Money[] money_array49 = money46.divide(100);
    core.Money money50 = money44.subtract(money46);
    java.lang.String str51 = money50.toString();
    java.util.Currency currency52 = money50.getCurrency();
    core.Money money53 = new core.Money(100.0d, currency52);
    core.Money money54 = new core.Money();
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.add(money58);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money money71 = money66.add(money68);
    core.Money money72 = money64.subtract(money66);
    java.lang.String str73 = money66.toString();
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    core.Money money82 = money77.add(money79);
    core.Money money83 = money75.subtract(money77);
    core.Money money84 = money66.add(money83);
    boolean b85 = money54.equals((java.lang.Object)money66);
    java.util.Locale locale86 = money54.getLocale();
    core.Money money87 = new core.Money(100.0d, currency52, locale86);
    core.Money money88 = new core.Money(100L, currency52);
    core.Money money89 = new core.Money((-1L), currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$1.00"+ "'", str42.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$0.00"+ "'", str51.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale86);

  }

  @Test
  public void test409() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test409"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    core.Money[] money_array26 = money19.divide(1);
    core.Money money27 = new core.Money();
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money35 = money27.add(money31);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(10);
    core.Money money49 = money39.subtract(money44);
    core.Money money50 = money31.add(money49);
    java.util.Locale locale51 = money50.getLocale();
    money19.setLocale(locale51);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(10);
    core.Money money59 = money19.add(money54);
    java.util.Locale locale60 = null;
    // The following exception was thrown during execution in test generation
    try {
      money54.setLocale(locale60);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);

  }

  @Test
  public void test410() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test410"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money36.subtract(money38);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(1);
    boolean b52 = money46.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale53 = money46.getLocale();
    money38.setLocale(locale53);
    money1.setLocale(locale53);
    java.util.Locale locale56 = money1.getLocale();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(1);
    boolean b68 = money62.equals((java.lang.Object)(-1.0d));
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    java.util.Currency currency73 = money70.getCurrency();
    money62.setCurrency(currency73);
    core.Money money75 = new core.Money(10.0d, currency73);
    core.Money money76 = new core.Money(1.0d, currency73);
    core.Money money77 = new core.Money(0L, currency73);
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    java.util.Currency currency83 = money80.getCurrency();
    core.Money money84 = new core.Money(0L, currency83);
    java.util.Locale locale85 = money84.getLocale();
    money84.setAmount(100.0d);
    java.util.Locale locale88 = money84.getLocale();
    core.Money money89 = new core.Money(70.0d, currency73, locale88);
    money1.setCurrency(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);

  }

  @Test
  public void test411() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test411"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    money1.setAmount(10.0d);
    core.Money[] money_array12 = money1.divide(10);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.lang.String str19 = money16.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money16.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money35 = money27.subtract(money29);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(1);
    boolean b43 = money37.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale44 = money37.getLocale();
    money29.setLocale(locale44);
    core.Money money46 = new core.Money(100.0d, currency24, locale44);
    core.Money money47 = new core.Money(10.0d, currency24);
    core.Money money48 = money1.subtract(money47);
    money1.setAmount(20.0d);
    core.Money money51 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money52 = money1.add(money51);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);

  }

  @Test
  public void test412() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test412"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money10.subtract(money12);
    java.lang.String str19 = money12.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    core.Money money30 = money12.add(money29);
    boolean b31 = money0.equals((java.lang.Object)money12);
    boolean b33 = money12.equals((java.lang.Object)10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.lang.String str40 = money37.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money37.setCurrency(currency45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money56 = money48.subtract(money50);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(1);
    boolean b64 = money58.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale65 = money58.getLocale();
    money50.setLocale(locale65);
    core.Money money67 = new core.Money(100.0d, currency45, locale65);
    core.Money money68 = new core.Money(100L, currency45);
    java.util.Locale locale69 = money68.getLocale();
    money12.setLocale(locale69);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array72 = money12.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale69);

  }

  @Test
  public void test413() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test413"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money21 = new core.Money(0L, currency17);
    core.Money money22 = new core.Money(10.0d, currency17);
    core.Money money23 = new core.Money(0.0d, currency17);
    core.Money money25 = new core.Money();
    core.Money money27 = core.Money.dollars(10.0d);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money money32 = money27.add(money29);
    core.Money money33 = money25.add(money29);
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money money40 = money35.add(money37);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(10);
    core.Money money47 = money37.subtract(money42);
    core.Money money48 = money29.add(money47);
    core.Money money50 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal51 = money50.amount();
    money50.setAmount((-1.0d));
    core.Money money54 = money48.add(money50);
    java.util.Currency currency55 = money48.getCurrency();
    core.Money money56 = new core.Money(10L, currency55);
    boolean b57 = money23.equals((java.lang.Object)currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test414() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test414"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.lang.String str6 = money3.toString();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    java.util.Currency currency11 = money8.getCurrency();
    money3.setCurrency(currency11);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money money21 = money16.add(money18);
    core.Money money22 = money14.subtract(money16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    money16.setLocale(locale31);
    core.Money money33 = new core.Money(100.0d, currency11, locale31);
    core.Money money34 = new core.Money(10.0d, currency11);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money money41 = money36.add(money38);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    java.lang.String str52 = money45.toString();
    core.Money money53 = money41.add(money45);
    boolean b54 = money34.equals(money53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(10);
    boolean b64 = money56.equals((java.lang.Object)money59);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money money71 = money66.add(money68);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    core.Money[] money_array77 = money73.divide(10);
    core.Money money78 = money68.subtract(money73);
    core.Money money79 = money59.add(money78);
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    core.Money[] money_array85 = money81.divide(10);
    money81.setAmount(1.0d);
    java.lang.String str88 = money81.toString();
    money81.setAmount(10.0d);
    core.Money[] money_array92 = money81.divide(10);
    core.Money money93 = money79.subtract(money81);
    boolean b94 = money34.equals((java.lang.Object)money93);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array96 = money93.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "$1.00"+ "'", str88.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);

  }

  @Test
  public void test415() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test415"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.util.Locale locale14 = money8.getLocale();
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array16 = money8.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale14);

  }

  @Test
  public void test416() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test416"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.math.BigDecimal bigDecimal10 = money1.amount();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money[] money_array22 = money15.divide(10);
    boolean b23 = money1.equals((java.lang.Object)money_array22);
    core.Money[] money_array25 = money1.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);

  }

  @Test
  public void test417() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test417"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money[] money_array20 = money18.divide(10);
    java.util.Locale locale21 = money18.getLocale();
    core.Money money22 = money1.subtract(money18);
    core.Money money24 = core.Money.dollars(10.0d);
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money24.subtract(money26);
    java.lang.String str33 = money26.toString();
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money35.subtract(money37);
    core.Money money44 = money26.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    boolean b50 = money43.equals(money46);
    java.util.Currency currency51 = money43.getCurrency();
    core.Money money52 = money22.subtract(money43);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(10);
    boolean b63 = money55.equals((java.lang.Object)money58);
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money money70 = money65.add(money67);
    core.Money money71 = money58.add(money70);
    core.Money money73 = core.Money.dollars(10.0d);
    core.Money money74 = money71.add(money73);
    java.util.Currency currency75 = money73.getCurrency();
    core.Money money76 = new core.Money(10L, currency75);
    boolean b77 = money52.equals((java.lang.Object)currency75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);

  }

  @Test
  public void test418() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test418"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.lang.String str3 = money1.toString();
    money1.setAmount(0.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(1);
    boolean b13 = money7.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale14 = money7.getLocale();
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money money21 = money16.add(money18);
    core.Money money22 = money7.subtract(money16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.lang.String str27 = money24.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    java.util.Currency currency32 = money29.getCurrency();
    money24.setCurrency(currency32);
    money16.setCurrency(currency32);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money[] money_array44 = money40.divide(1);
    boolean b46 = money40.equals((java.lang.Object)(-1.0d));
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    java.util.Currency currency51 = money48.getCurrency();
    money40.setCurrency(currency51);
    core.Money money53 = new core.Money(10.0d, currency51);
    core.Money money54 = new core.Money(1.0d, currency51);
    core.Money money55 = new core.Money(1L, currency51);
    core.Money money56 = new core.Money(10.0d, currency51);
    boolean b57 = money16.equals((java.lang.Object)10.0d);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    core.Money money66 = money16.subtract(money59);
    java.util.Locale locale67 = money16.getLocale();
    java.lang.String str68 = money16.toString();
    core.Money money69 = money1.add(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);

  }

  @Test
  public void test419() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test419"); }


    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(1);
    boolean b13 = money7.equals((java.lang.Object)(-1.0d));
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money7.setCurrency(currency18);
    core.Money money20 = new core.Money(10.0d, currency18);
    core.Money money21 = new core.Money(1.0d, currency18);
    core.Money money22 = new core.Money(1L, currency18);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    core.Money money33 = core.Money.dollars(10.0d);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money money38 = money33.add(money35);
    core.Money money39 = money24.subtract(money33);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.lang.String str44 = money41.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money41.setCurrency(currency49);
    money33.setCurrency(currency49);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    java.lang.String str58 = money55.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    java.util.Currency currency63 = money60.getCurrency();
    money55.setCurrency(currency63);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money money73 = money68.add(money70);
    core.Money money74 = money66.subtract(money68);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    money68.setLocale(locale83);
    core.Money money85 = new core.Money(100.0d, currency63, locale83);
    core.Money money86 = new core.Money(100L, currency63);
    core.Money money87 = money33.add(money86);
    money33.setAmount(100.0d);
    java.util.Locale locale90 = money33.getLocale();
    core.Money money91 = new core.Money(100.0d, currency18, locale90);
    core.Money money92 = new core.Money(10.0d, currency18);
    core.Money money93 = new core.Money(0L, currency18);
    money93.setAmount(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale90);

  }

  @Test
  public void test420() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test420"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    core.Money[] money_array14 = money10.divide(1);
    boolean b16 = money10.equals((java.lang.Object)(-1.0d));
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.util.Currency currency21 = money18.getCurrency();
    money10.setCurrency(currency21);
    core.Money money23 = new core.Money(10.0d, currency21);
    core.Money money24 = new core.Money(1.0d, currency21);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(1);
    boolean b42 = money36.equals((java.lang.Object)(-1.0d));
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    java.util.Currency currency47 = money44.getCurrency();
    money36.setCurrency(currency47);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    core.Money money58 = new core.Money(1.0d, currency47, locale57);
    money26.setCurrency(currency47);
    money24.setCurrency(currency47);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    java.lang.String str65 = money62.toString();
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money62.setCurrency(currency70);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(10);
    boolean b81 = money73.equals((java.lang.Object)money76);
    core.Money money83 = core.Money.dollars(10.0d);
    core.Money money85 = core.Money.dollars(10.0d);
    java.lang.String str86 = money85.toString();
    java.math.BigDecimal bigDecimal87 = money85.amount();
    core.Money money88 = money83.add(money85);
    core.Money money89 = money76.add(money88);
    boolean b90 = money62.equals((java.lang.Object)money76);
    java.util.Locale locale91 = money76.getLocale();
    core.Money money92 = money24.add(money76);
    java.math.BigDecimal bigDecimal93 = money24.amount();
    core.Money money94 = money1.subtract(money24);
    java.util.Currency currency95 = money1.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "$10.00"+ "'", str86.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency95);

  }

  @Test
  public void test421() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test421"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale18 = money11.getLocale();
    money3.setLocale(locale18);
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    java.math.BigDecimal bigDecimal30 = money21.amount();
    boolean b31 = money3.equals(money21);
    java.util.Locale locale32 = money21.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);

  }

  @Test
  public void test422() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test422"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.math.BigDecimal bigDecimal10 = money1.amount();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money[] money_array22 = money15.divide(10);
    boolean b23 = money1.equals((java.lang.Object)money_array22);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(10);
    money28.setAmount(1.0d);
    java.lang.String str35 = money28.toString();
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.util.Currency currency49 = money46.getCurrency();
    money38.setCurrency(currency49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(1);
    boolean b58 = money52.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale59 = money52.getLocale();
    core.Money money60 = new core.Money(1.0d, currency49, locale59);
    money28.setCurrency(currency49);
    core.Money money62 = new core.Money(1L, currency49);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money64.setLocale(locale73);
    core.Money money75 = new core.Money(10.0d, currency49, locale73);
    core.Money money76 = new core.Money(1.0d, currency49);
    core.Money money77 = money1.add(money76);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array79 = money1.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$1.00"+ "'", str35.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);

  }

  @Test
  public void test423() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test423"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(20.0d, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test424() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test424"); }


    core.Money money0 = new core.Money();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(1);
    boolean b14 = money8.equals((java.lang.Object)(-1.0d));
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    money8.setCurrency(currency19);
    core.Money money21 = new core.Money(10.0d, currency19);
    core.Money money22 = new core.Money(1.0d, currency19);
    core.Money money23 = new core.Money(1L, currency19);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money25.subtract(money34);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.lang.String str45 = money42.toString();
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    java.util.Currency currency50 = money47.getCurrency();
    money42.setCurrency(currency50);
    money34.setCurrency(currency50);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.lang.String str59 = money56.toString();
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    java.util.Currency currency64 = money61.getCurrency();
    money56.setCurrency(currency64);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money67.subtract(money69);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(1);
    boolean b83 = money77.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale84 = money77.getLocale();
    money69.setLocale(locale84);
    core.Money money86 = new core.Money(100.0d, currency64, locale84);
    core.Money money87 = new core.Money(100L, currency64);
    core.Money money88 = money34.add(money87);
    money34.setAmount(100.0d);
    java.util.Locale locale91 = money34.getLocale();
    core.Money money92 = new core.Money(100.0d, currency19, locale91);
    core.Money money93 = new core.Money(10.0d, currency19);
    core.Money money94 = new core.Money(0L, currency19);
    boolean b95 = money0.equals((java.lang.Object)money94);
    java.util.Locale locale96 = money0.getLocale();
    java.math.BigDecimal bigDecimal97 = money0.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal97);

  }

  @Test
  public void test425() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test425"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(100L, currency15);
    java.util.Locale locale19 = null;
    core.Money money20 = new core.Money(70.0d, currency15, locale19);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.lang.String str27 = money24.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    java.util.Currency currency32 = money29.getCurrency();
    money24.setCurrency(currency32);
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money35.subtract(money37);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    money37.setLocale(locale52);
    core.Money money54 = new core.Money(100.0d, currency32, locale52);
    core.Money money55 = new core.Money(1L, currency32);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(10);
    money57.setAmount(1.0d);
    java.lang.String str64 = money57.toString();
    java.math.BigDecimal bigDecimal65 = money57.amount();
    core.Money money66 = money55.add(money57);
    core.Money money67 = money20.subtract(money57);
    java.math.BigDecimal bigDecimal68 = money57.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$1.00"+ "'", str64.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);

  }

  @Test
  public void test426() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test426"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    money4.setAmount(1.0d);
    java.lang.String str11 = money4.toString();
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money[] money_array18 = money14.divide(1);
    boolean b20 = money14.equals((java.lang.Object)(-1.0d));
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    java.util.Currency currency25 = money22.getCurrency();
    money14.setCurrency(currency25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale35 = money28.getLocale();
    core.Money money36 = new core.Money(1.0d, currency25, locale35);
    money4.setCurrency(currency25);
    core.Money money38 = new core.Money(1L, currency25);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale49 = money42.getLocale();
    money40.setLocale(locale49);
    core.Money money51 = new core.Money(10.0d, currency25, locale49);
    java.util.Currency currency52 = money51.getCurrency();
    core.Money money53 = new core.Money(10L, currency52);
    java.util.Currency currency54 = money53.getCurrency();
    money53.setAmount(10.0d);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array58 = money53.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$1.00"+ "'", str11.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);

  }

  @Test
  public void test427() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test427"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money20 = money17.add(money19);
    java.util.Currency currency21 = money19.getCurrency();
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money19.subtract(money23);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(1);
    boolean b39 = money33.equals((java.lang.Object)(-1.0d));
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.util.Currency currency44 = money41.getCurrency();
    money33.setCurrency(currency44);
    core.Money money46 = new core.Money(10.0d, currency44);
    core.Money money47 = new core.Money(0L, currency44);
    money29.setCurrency(currency44);
    java.util.Currency currency49 = money29.getCurrency();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money[] money_array56 = money52.divide(10);
    money52.setAmount(1.0d);
    java.lang.String str59 = money52.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(1);
    boolean b68 = money62.equals((java.lang.Object)(-1.0d));
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    java.util.Currency currency73 = money70.getCurrency();
    money62.setCurrency(currency73);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(1);
    boolean b82 = money76.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale83 = money76.getLocale();
    core.Money money84 = new core.Money(1.0d, currency73, locale83);
    money52.setCurrency(currency73);
    core.Money money86 = new core.Money(1L, currency73);
    core.Money money87 = money29.add(money86);
    java.util.Locale locale88 = money29.getLocale();
    java.util.Locale locale89 = money29.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$1.00"+ "'", str59.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale89);

  }

  @Test
  public void test428() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test428"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    money24.setAmount(11.0d);
    java.util.Locale locale27 = money24.getLocale();
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    java.util.Currency currency33 = money30.getCurrency();
    core.Money money34 = new core.Money(0L, currency33);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(10);
    money36.setAmount(1.0d);
    core.Money money43 = money34.add(money36);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    java.lang.String str48 = money45.toString();
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money45.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(10);
    boolean b64 = money56.equals((java.lang.Object)money59);
    core.Money money66 = core.Money.dollars(10.0d);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money money71 = money66.add(money68);
    core.Money money72 = money59.add(money71);
    boolean b73 = money45.equals((java.lang.Object)money59);
    java.util.Locale locale74 = money59.getLocale();
    boolean b75 = money36.equals(money59);
    java.util.Currency currency76 = money36.getCurrency();
    money24.setCurrency(currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);

  }

  @Test
  public void test429() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test429"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    java.lang.String str8 = money5.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money5.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.subtract(money18);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    money18.setLocale(locale33);
    core.Money money35 = new core.Money(100.0d, currency13, locale33);
    core.Money money36 = new core.Money(10.0d, currency13);
    core.Money money37 = new core.Money(100L, currency13);
    core.Money money38 = new core.Money(20.0d, currency13);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array40 = money38.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);

  }

  @Test
  public void test430() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test430"); }


    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(1);
    boolean b13 = money7.equals((java.lang.Object)(-1.0d));
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money7.setCurrency(currency18);
    core.Money money20 = new core.Money(10.0d, currency18);
    core.Money money21 = new core.Money(1.0d, currency18);
    core.Money money22 = new core.Money(1L, currency18);
    core.Money money23 = new core.Money(10.0d, currency18);
    java.util.Currency currency24 = money23.getCurrency();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale35 = money28.getLocale();
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money money42 = money37.add(money39);
    core.Money money43 = money28.subtract(money37);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    java.lang.String str48 = money45.toString();
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money45.setCurrency(currency53);
    money37.setCurrency(currency53);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.lang.String str62 = money59.toString();
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    java.util.Currency currency67 = money64.getCurrency();
    money59.setCurrency(currency67);
    core.Money money70 = core.Money.dollars(10.0d);
    core.Money money72 = core.Money.dollars(10.0d);
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    java.math.BigDecimal bigDecimal76 = money74.amount();
    core.Money money77 = money72.add(money74);
    core.Money money78 = money70.subtract(money72);
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    core.Money[] money_array84 = money80.divide(1);
    boolean b86 = money80.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale87 = money80.getLocale();
    money72.setLocale(locale87);
    core.Money money89 = new core.Money(100.0d, currency67, locale87);
    core.Money money90 = new core.Money(100L, currency67);
    core.Money money91 = money37.add(money90);
    java.lang.String str92 = money37.toString();
    java.util.Currency currency93 = money37.getCurrency();
    core.Money money94 = new core.Money(1L, currency93);
    core.Money money95 = new core.Money(10L, currency93);
    money23.setCurrency(currency93);
    core.Money money97 = new core.Money((-1L), currency93);
    core.Money money98 = new core.Money(20.0d, currency93);
    java.util.Locale locale99 = money98.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str92 + "' != '" + "$10.00"+ "'", str92.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale99);

  }

  @Test
  public void test431() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test431"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money23 = new core.Money((-1L), currency22);
    core.Money money24 = new core.Money();
    core.Money money26 = core.Money.dollars(10.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money money31 = money26.add(money28);
    core.Money money32 = money24.add(money28);
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    core.Money money46 = money36.subtract(money41);
    core.Money money47 = money28.add(money46);
    core.Money money49 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal50 = money49.amount();
    money49.setAmount((-1.0d));
    core.Money money53 = money47.add(money49);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(10);
    money55.setAmount(1.0d);
    java.lang.String str62 = money55.toString();
    java.util.Locale locale63 = money55.getLocale();
    core.Money money64 = money53.add(money55);
    core.Money money66 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal67 = money66.amount();
    core.Money[] money_array69 = money66.divide(100);
    core.Money money70 = money64.subtract(money66);
    java.lang.String str71 = money70.toString();
    java.util.Currency currency72 = money70.getCurrency();
    java.math.BigDecimal bigDecimal73 = money70.amount();
    core.Money money74 = money23.subtract(money70);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array76 = money23.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$1.00"+ "'", str62.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$0.00"+ "'", str71.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);

  }

  @Test
  public void test432() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test432"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money17 = new core.Money();
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money25 = money17.add(money21);
    core.Money money27 = core.Money.dollars(10.0d);
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money money32 = money27.add(money29);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(10);
    core.Money money39 = money29.subtract(money34);
    core.Money money40 = money21.add(money39);
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money[] money_array53 = money49.divide(10);
    core.Money money54 = money44.subtract(money49);
    java.lang.String str55 = money49.toString();
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    java.util.Currency currency60 = money57.getCurrency();
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(1);
    boolean b71 = money65.equals((java.lang.Object)(-1.0d));
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    java.util.Currency currency76 = money73.getCurrency();
    money65.setCurrency(currency76);
    core.Money money78 = new core.Money(10.0d, currency76);
    core.Money money79 = new core.Money(1.0d, currency76);
    core.Money money80 = new core.Money(0L, currency76);
    core.Money money81 = money57.subtract(money80);
    boolean b82 = money49.equals(money57);
    boolean b83 = money39.equals((java.lang.Object)money49);
    java.util.Locale locale84 = money39.getLocale();
    money16.setLocale(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);

  }

  @Test
  public void test433() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test433"); }


    core.Money money3 = new core.Money();
    core.Money money5 = core.Money.dollars(10.0d);
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money money10 = money5.add(money7);
    core.Money money11 = money3.add(money7);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money money18 = money13.add(money15);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(10);
    core.Money money25 = money15.subtract(money20);
    core.Money money26 = money7.add(money25);
    core.Money money28 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal29 = money28.amount();
    money28.setAmount((-1.0d));
    core.Money money32 = money26.add(money28);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    core.Money[] money_array38 = money34.divide(10);
    money34.setAmount(1.0d);
    java.lang.String str41 = money34.toString();
    java.util.Locale locale42 = money34.getLocale();
    core.Money money43 = money32.add(money34);
    core.Money money45 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal46 = money45.amount();
    core.Money[] money_array48 = money45.divide(100);
    core.Money money49 = money43.subtract(money45);
    java.lang.String str50 = money49.toString();
    java.util.Currency currency51 = money49.getCurrency();
    core.Money money52 = new core.Money(100.0d, currency51);
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(10);
    boolean b62 = money54.equals((java.lang.Object)money57);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money money69 = money64.add(money66);
    core.Money money70 = money57.add(money69);
    core.Money money72 = core.Money.dollars(10.0d);
    core.Money money74 = core.Money.dollars(10.0d);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money money79 = money74.add(money76);
    core.Money money80 = money72.subtract(money74);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money[] money_array86 = money82.divide(1);
    boolean b88 = money82.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale89 = money82.getLocale();
    money74.setLocale(locale89);
    java.util.Locale locale91 = money74.getLocale();
    money57.setLocale(locale91);
    core.Money money93 = new core.Money(9.0d, currency51, locale91);
    core.Money money94 = new core.Money(10L, currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$1.00"+ "'", str41.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$0.00"+ "'", str50.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);

  }

  @Test
  public void test434() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test434"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.lang.String str6 = money3.toString();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    java.util.Currency currency11 = money8.getCurrency();
    money3.setCurrency(currency11);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money money21 = money16.add(money18);
    core.Money money22 = money14.subtract(money16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    money16.setLocale(locale31);
    core.Money money33 = new core.Money(100.0d, currency11, locale31);
    core.Money money34 = new core.Money(10.0d, currency11);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money money41 = money36.add(money38);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    java.lang.String str52 = money45.toString();
    core.Money money53 = money41.add(money45);
    boolean b54 = money34.equals(money53);
    java.util.Currency currency55 = money34.getCurrency();
    java.math.BigDecimal bigDecimal56 = money34.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);

  }

  @Test
  public void test435() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test435"); }


    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale11 = money4.getLocale();
    money2.setLocale(locale11);
    java.util.Currency currency13 = money2.getCurrency();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    money15.setAmount(1.0d);
    java.lang.String str22 = money15.toString();
    java.util.Locale locale23 = money15.getLocale();
    core.Money money24 = new core.Money(10.0d, currency13, locale23);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    java.util.Currency currency30 = money27.getCurrency();
    core.Money money31 = new core.Money(0L, currency30);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(10);
    money33.setAmount(1.0d);
    core.Money money40 = money31.add(money33);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    java.util.Currency currency54 = money51.getCurrency();
    money43.setCurrency(currency54);
    core.Money money56 = new core.Money(100.0d, currency54);
    java.util.Currency currency57 = money56.getCurrency();
    money31.setCurrency(currency57);
    core.Money money59 = money24.subtract(money31);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    java.lang.String str64 = money61.toString();
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    java.util.Currency currency69 = money66.getCurrency();
    money61.setCurrency(currency69);
    java.math.BigDecimal bigDecimal71 = money61.amount();
    core.Money[] money_array73 = money61.divide(1);
    core.Money money74 = money24.subtract(money61);
    money24.setAmount((-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$1.00"+ "'", str22.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);

  }

  @Test
  public void test436() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test436"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(1);
    boolean b26 = money20.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale27 = money20.getLocale();
    core.Money money28 = new core.Money(1.0d, currency17, locale27);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale39 = money32.getLocale();
    money30.setLocale(locale39);
    core.Money money41 = new core.Money(1.0d, currency17, locale39);
    core.Money money42 = new core.Money(0L, currency17);
    core.Money money43 = new core.Money(0L, currency17);
    core.Money money44 = new core.Money(11.0d, currency17);
    java.util.Locale locale45 = money44.getLocale();
    core.Money[] money_array47 = money44.divide(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);

  }

  @Test
  public void test437() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test437"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money16 = new core.Money(100.0d, currency14);
    java.util.Currency currency17 = money16.getCurrency();
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    money19.setAmount(1.0d);
    java.lang.String str26 = money19.toString();
    core.Money money29 = core.Money.dollars(10.0d);
    java.lang.String str30 = money29.toString();
    java.math.BigDecimal bigDecimal31 = money29.amount();
    core.Money[] money_array33 = money29.divide(1);
    boolean b35 = money29.equals((java.lang.Object)(-1.0d));
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money29.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money[] money_array47 = money43.divide(1);
    boolean b49 = money43.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale50 = money43.getLocale();
    core.Money money51 = new core.Money(1.0d, currency40, locale50);
    money19.setCurrency(currency40);
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money money61 = money56.add(money58);
    core.Money money62 = money54.subtract(money56);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money56.setLocale(locale71);
    money19.setLocale(locale71);
    core.Money money74 = new core.Money(10.0d, currency17, locale71);
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    java.lang.String str79 = money76.toString();
    core.Money money81 = core.Money.dollars(10.0d);
    java.lang.String str82 = money81.toString();
    java.math.BigDecimal bigDecimal83 = money81.amount();
    java.util.Currency currency84 = money81.getCurrency();
    money76.setCurrency(currency84);
    money74.setCurrency(currency84);
    java.util.Currency currency87 = money74.getCurrency();
    java.util.Locale locale88 = money74.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$1.00"+ "'", str26.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str82 + "' != '" + "$10.00"+ "'", str82.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale88);

  }

  @Test
  public void test438() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test438"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(100.0d, currency16);
    java.util.Currency currency19 = money18.getCurrency();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money[] money_array25 = money21.divide(10);
    money21.setAmount(1.0d);
    java.lang.String str28 = money21.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(1);
    boolean b37 = money31.equals((java.lang.Object)(-1.0d));
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    java.util.Currency currency42 = money39.getCurrency();
    money31.setCurrency(currency42);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale52 = money45.getLocale();
    core.Money money53 = new core.Money(1.0d, currency42, locale52);
    money21.setCurrency(currency42);
    core.Money money56 = core.Money.dollars(10.0d);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money money63 = money58.add(money60);
    core.Money money64 = money56.subtract(money58);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(1);
    boolean b72 = money66.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale73 = money66.getLocale();
    money58.setLocale(locale73);
    money21.setLocale(locale73);
    core.Money money76 = new core.Money(10.0d, currency19, locale73);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    java.lang.String str81 = money78.toString();
    core.Money money83 = core.Money.dollars(10.0d);
    java.lang.String str84 = money83.toString();
    java.math.BigDecimal bigDecimal85 = money83.amount();
    java.util.Currency currency86 = money83.getCurrency();
    money78.setCurrency(currency86);
    money76.setCurrency(currency86);
    core.Money money89 = new core.Money(1.0d, currency86);
    core.Money money90 = new core.Money(10L, currency86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$1.00"+ "'", str28.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str84 + "' != '" + "$10.00"+ "'", str84.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency86);

  }

  @Test
  public void test439() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test439"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    money7.setAmount(100.0d);
    boolean b15 = money1.equals(money7);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(1);
    boolean b25 = money19.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale26 = money19.getLocale();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    money31.setAmount(1.0d);
    java.lang.String str38 = money31.toString();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(1);
    boolean b47 = money41.equals((java.lang.Object)(-1.0d));
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    java.util.Currency currency52 = money49.getCurrency();
    money41.setCurrency(currency52);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(1);
    boolean b61 = money55.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale62 = money55.getLocale();
    core.Money money63 = new core.Money(1.0d, currency52, locale62);
    money31.setCurrency(currency52);
    core.Money money65 = new core.Money(1L, currency52);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money[] money_array73 = money69.divide(1);
    boolean b75 = money69.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale76 = money69.getLocale();
    money67.setLocale(locale76);
    core.Money money78 = new core.Money(10.0d, currency52, locale76);
    core.Money money79 = new core.Money(1.0d, currency52);
    boolean b80 = money19.equals(money79);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money[] money_array86 = money82.divide(1);
    boolean b88 = money82.equals((java.lang.Object)(-1.0d));
    core.Money money90 = core.Money.dollars(10.0d);
    java.lang.String str91 = money90.toString();
    java.math.BigDecimal bigDecimal92 = money90.amount();
    java.util.Currency currency93 = money90.getCurrency();
    money82.setCurrency(currency93);
    money79.setCurrency(currency93);
    core.Money money96 = new core.Money(1L, currency93);
    core.Money money97 = new core.Money(10L, currency93);
    boolean b98 = money7.equals((java.lang.Object)currency93);
    java.lang.String str99 = money7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$1.00"+ "'", str38.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "$10.00"+ "'", str91.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str99 + "' != '" + "$100.00"+ "'", str99.equals("$100.00"));

  }

  @Test
  public void test440() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test440"); }


    core.Money money1 = core.Money.dollars(1.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    java.lang.String str8 = money5.toString();
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money5.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money24 = money16.subtract(money18);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    money18.setLocale(locale33);
    core.Money money35 = new core.Money(100.0d, currency13, locale33);
    core.Money money36 = new core.Money(100L, currency13);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(10);
    boolean b46 = money38.equals((java.lang.Object)money41);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money money53 = money48.add(money50);
    core.Money money54 = money41.add(money53);
    core.Money money55 = money36.subtract(money41);
    core.Money money56 = money1.subtract(money55);
    money56.setAmount(90.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);

  }

  @Test
  public void test441() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test441"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.math.BigDecimal bigDecimal14 = money13.amount();
    core.Money[] money_array16 = money13.divide(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);

  }

  @Test
  public void test442() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test442"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    core.Money[] money_array14 = money10.divide(1);
    boolean b16 = money10.equals((java.lang.Object)(-1.0d));
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.util.Currency currency21 = money18.getCurrency();
    money10.setCurrency(currency21);
    core.Money money23 = new core.Money(10.0d, currency21);
    core.Money money24 = new core.Money(1.0d, currency21);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(1);
    boolean b42 = money36.equals((java.lang.Object)(-1.0d));
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    java.util.Currency currency47 = money44.getCurrency();
    money36.setCurrency(currency47);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    core.Money money58 = new core.Money(1.0d, currency47, locale57);
    money26.setCurrency(currency47);
    money24.setCurrency(currency47);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    java.lang.String str65 = money62.toString();
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    java.util.Currency currency70 = money67.getCurrency();
    money62.setCurrency(currency70);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    core.Money money76 = core.Money.dollars(10.0d);
    java.lang.String str77 = money76.toString();
    java.math.BigDecimal bigDecimal78 = money76.amount();
    core.Money[] money_array80 = money76.divide(10);
    boolean b81 = money73.equals((java.lang.Object)money76);
    core.Money money83 = core.Money.dollars(10.0d);
    core.Money money85 = core.Money.dollars(10.0d);
    java.lang.String str86 = money85.toString();
    java.math.BigDecimal bigDecimal87 = money85.amount();
    core.Money money88 = money83.add(money85);
    core.Money money89 = money76.add(money88);
    boolean b90 = money62.equals((java.lang.Object)money76);
    java.util.Locale locale91 = money76.getLocale();
    core.Money money92 = money24.add(money76);
    java.math.BigDecimal bigDecimal93 = money24.amount();
    core.Money money94 = money1.subtract(money24);
    java.lang.String str95 = money1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str77 + "' != '" + "$10.00"+ "'", str77.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "$10.00"+ "'", str86.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str95 + "' != '" + "$10.00"+ "'", str95.equals("$10.00"));

  }

  @Test
  public void test443() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test443"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal26 = money25.amount();
    money25.setAmount((-1.0d));
    core.Money money29 = money23.add(money25);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    money31.setAmount(1.0d);
    java.lang.String str38 = money31.toString();
    java.util.Locale locale39 = money31.getLocale();
    core.Money money40 = money29.add(money31);
    java.lang.String str41 = money31.toString();
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    java.lang.String str46 = money43.toString();
    core.Money money47 = new core.Money();
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money55 = money47.add(money51);
    core.Money money57 = core.Money.dollars(10.0d);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money money62 = money57.add(money59);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(10);
    core.Money money69 = money59.subtract(money64);
    core.Money money70 = money51.add(money69);
    java.util.Currency currency71 = money51.getCurrency();
    core.Money money72 = money43.subtract(money51);
    core.Money money73 = new core.Money();
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money money80 = money75.add(money77);
    core.Money money81 = money73.add(money77);
    java.util.Locale locale82 = money81.getLocale();
    money43.setLocale(locale82);
    boolean b84 = money31.equals(money43);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array86 = money43.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$1.00"+ "'", str38.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$1.00"+ "'", str41.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test444() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test444"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    java.math.BigDecimal bigDecimal18 = money4.amount();
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(10);
    boolean b28 = money20.equals((java.lang.Object)money23);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money23.add(money35);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money39 = money36.add(money38);
    java.util.Currency currency40 = money38.getCurrency();
    boolean b41 = money4.equals((java.lang.Object)money38);
    core.Money[] money_array43 = money38.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);

  }

  @Test
  public void test445() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test445"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    money1.setAmount(10.0d);
    core.Money[] money_array12 = money1.divide(10);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.lang.String str19 = money16.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money16.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money35 = money27.subtract(money29);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(1);
    boolean b43 = money37.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale44 = money37.getLocale();
    money29.setLocale(locale44);
    core.Money money46 = new core.Money(100.0d, currency24, locale44);
    core.Money money47 = new core.Money(10.0d, currency24);
    core.Money money48 = money1.subtract(money47);
    money1.setAmount(20.0d);
    java.util.Currency currency51 = money1.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);

  }

  @Test
  public void test446() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test446"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(1);
    boolean b9 = money3.equals((java.lang.Object)(-1.0d));
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    java.util.Currency currency14 = money11.getCurrency();
    money3.setCurrency(currency14);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(1);
    boolean b23 = money17.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale24 = money17.getLocale();
    core.Money money25 = new core.Money(1.0d, currency14, locale24);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    java.util.Currency currency39 = money36.getCurrency();
    money28.setCurrency(currency39);
    core.Money money41 = new core.Money(100.0d, currency39);
    boolean b42 = money25.equals(money41);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    java.lang.String str50 = money47.toString();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    java.util.Currency currency55 = money52.getCurrency();
    money47.setCurrency(currency55);
    core.Money money58 = core.Money.dollars(10.0d);
    core.Money money60 = core.Money.dollars(10.0d);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money money65 = money60.add(money62);
    core.Money money66 = money58.subtract(money60);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(1);
    boolean b74 = money68.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale75 = money68.getLocale();
    money60.setLocale(locale75);
    core.Money money77 = new core.Money(100.0d, currency55, locale75);
    core.Money money78 = new core.Money(1L, currency55);
    core.Money money79 = new core.Money(100L, currency55);
    boolean b80 = money25.equals((java.lang.Object)currency55);
    core.Money money81 = new core.Money((-1.0d), currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);

  }

  @Test
  public void test447() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test447"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.util.Currency currency6 = money3.getCurrency();
    core.Money money7 = new core.Money(0L, currency6);
    core.Money money8 = new core.Money((-1.0d), currency6);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money[] money_array18 = money14.divide(1);
    boolean b20 = money14.equals((java.lang.Object)(-1.0d));
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    java.util.Currency currency25 = money22.getCurrency();
    money14.setCurrency(currency25);
    core.Money money27 = new core.Money(10.0d, currency25);
    core.Money money28 = new core.Money(1.0d, currency25);
    core.Money money29 = new core.Money(0L, currency25);
    core.Money money30 = new core.Money(10.0d, currency25);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(1);
    boolean b39 = money33.equals((java.lang.Object)(-1.0d));
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    java.util.Currency currency44 = money41.getCurrency();
    money33.setCurrency(currency44);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money[] money_array51 = money47.divide(1);
    boolean b53 = money47.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale54 = money47.getLocale();
    core.Money money55 = new core.Money(1.0d, currency44, locale54);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(1);
    boolean b64 = money58.equals((java.lang.Object)(-1.0d));
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    java.util.Currency currency69 = money66.getCurrency();
    money58.setCurrency(currency69);
    core.Money money71 = new core.Money(100.0d, currency69);
    boolean b72 = money55.equals(money71);
    boolean b73 = money30.equals((java.lang.Object)b72);
    core.Money money74 = new core.Money();
    core.Money money76 = core.Money.dollars(10.0d);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    core.Money money81 = money76.add(money78);
    core.Money money82 = money74.add(money78);
    core.Money money84 = core.Money.dollars(10.0d);
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    core.Money money89 = money84.add(money86);
    boolean b90 = money82.equals(money86);
    java.util.Currency currency91 = money82.getCurrency();
    boolean b92 = money30.equals((java.lang.Object)money82);
    core.Money money93 = money8.subtract(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money93);

  }

  @Test
  public void test448() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test448"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    java.lang.String str7 = money4.toString();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money4.setCurrency(currency12);
    core.Money money14 = new core.Money(100L, currency12);
    core.Money money15 = new core.Money(1L, currency12);
    core.Money money16 = new core.Money((-1.0d), currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);

  }

  @Test
  public void test449() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test449"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money money8 = money3.add(money5);
    core.Money money9 = money1.subtract(money3);
    java.lang.String str10 = money3.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(10);
    boolean b20 = money12.equals((java.lang.Object)money15);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money money27 = money22.add(money24);
    core.Money money28 = money15.add(money27);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money31 = money28.add(money30);
    boolean b32 = money3.equals(money28);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    core.Money money39 = new core.Money(0L, currency38);
    boolean b40 = money28.equals(money39);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(10);
    money44.setAmount(1.0d);
    java.lang.String str51 = money44.toString();
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    core.Money[] money_array58 = money54.divide(1);
    boolean b60 = money54.equals((java.lang.Object)(-1.0d));
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    java.util.Currency currency65 = money62.getCurrency();
    money54.setCurrency(currency65);
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(1);
    boolean b74 = money68.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale75 = money68.getLocale();
    core.Money money76 = new core.Money(1.0d, currency65, locale75);
    money44.setCurrency(currency65);
    core.Money money78 = new core.Money(1L, currency65);
    core.Money money80 = core.Money.dollars(10.0d);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money[] money_array86 = money82.divide(1);
    boolean b88 = money82.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale89 = money82.getLocale();
    money80.setLocale(locale89);
    core.Money money91 = new core.Money(10.0d, currency65, locale89);
    money28.setLocale(locale89);
    java.util.Locale locale93 = money28.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$1.00"+ "'", str51.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale93);

  }

  @Test
  public void test450() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test450"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money[] money_array7 = money3.divide(10);
    money3.setAmount(1.0d);
    java.lang.String str10 = money3.toString();
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money[] money_array17 = money13.divide(1);
    boolean b19 = money13.equals((java.lang.Object)(-1.0d));
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    java.util.Currency currency24 = money21.getCurrency();
    money13.setCurrency(currency24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale34 = money27.getLocale();
    core.Money money35 = new core.Money(1.0d, currency24, locale34);
    money3.setCurrency(currency24);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money money45 = money40.add(money42);
    core.Money money46 = money38.subtract(money40);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale55 = money48.getLocale();
    money40.setLocale(locale55);
    core.Money money57 = new core.Money(1.0d, currency24, locale55);
    core.Money money58 = new core.Money();
    core.Money money60 = core.Money.dollars(10.0d);
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money money65 = money60.add(money62);
    core.Money money66 = money58.add(money62);
    core.Money money67 = money57.subtract(money58);
    java.util.Currency currency68 = money58.getCurrency();
    core.Money money69 = new core.Money(9.0d, currency68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$1.00"+ "'", str10.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency68);

  }

  @Test
  public void test451() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test451"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(0L, currency16);
    core.Money money21 = new core.Money(10.0d, currency16);
    java.util.Locale locale22 = money21.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale22);

  }

  @Test
  public void test452() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test452"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    java.util.Locale locale25 = money23.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale25);

  }

  @Test
  public void test453() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test453"); }


    core.Money money1 = core.Money.dollars(1.0d);
    money1.setAmount(11.0d);
    money1.setAmount(11.0d);
    core.Money money7 = core.Money.dollars((-1.0d));
    java.util.Currency currency8 = money7.getCurrency();
    money7.setAmount(100.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    core.Money[] money_array19 = money15.divide(1);
    boolean b21 = money15.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale22 = money15.getLocale();
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(10);
    money27.setAmount(1.0d);
    java.lang.String str34 = money27.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(1);
    boolean b43 = money37.equals((java.lang.Object)(-1.0d));
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    java.util.Currency currency48 = money45.getCurrency();
    money37.setCurrency(currency48);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale58 = money51.getLocale();
    core.Money money59 = new core.Money(1.0d, currency48, locale58);
    money27.setCurrency(currency48);
    core.Money money61 = new core.Money(1L, currency48);
    core.Money money63 = core.Money.dollars(10.0d);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    java.math.BigDecimal bigDecimal67 = money65.amount();
    core.Money[] money_array69 = money65.divide(1);
    boolean b71 = money65.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale72 = money65.getLocale();
    money63.setLocale(locale72);
    core.Money money74 = new core.Money(10.0d, currency48, locale72);
    core.Money money75 = new core.Money(1.0d, currency48);
    boolean b76 = money15.equals(money75);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    core.Money[] money_array82 = money78.divide(1);
    boolean b84 = money78.equals((java.lang.Object)(-1.0d));
    core.Money money86 = core.Money.dollars(10.0d);
    java.lang.String str87 = money86.toString();
    java.math.BigDecimal bigDecimal88 = money86.amount();
    java.util.Currency currency89 = money86.getCurrency();
    money78.setCurrency(currency89);
    money75.setCurrency(currency89);
    core.Money money92 = new core.Money(1L, currency89);
    core.Money money93 = new core.Money(10L, currency89);
    core.Money money94 = new core.Money(11.0d, currency89);
    boolean b95 = money7.equals((java.lang.Object)11.0d);
    core.Money money96 = money1.subtract(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$1.00"+ "'", str34.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str87 + "' != '" + "$10.00"+ "'", str87.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal88);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);

  }

  @Test
  public void test454() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test454"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.util.Currency currency5 = money2.getCurrency();
    core.Money money6 = new core.Money(0L, currency5);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    money8.setAmount(1.0d);
    core.Money money15 = money6.add(money8);
    java.util.Locale locale16 = money15.getLocale();
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money money25 = money20.add(money22);
    core.Money money26 = money18.subtract(money20);
    java.math.BigDecimal bigDecimal27 = money18.amount();
    boolean b28 = money15.equals((java.lang.Object)money18);
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(10);
    boolean b38 = money30.equals((java.lang.Object)money33);
    core.Money money40 = core.Money.dollars(10.0d);
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money money45 = money40.add(money42);
    core.Money money46 = money33.add(money45);
    java.util.Locale locale47 = money46.getLocale();
    core.Money money49 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal50 = money49.amount();
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money[] money_array59 = money55.divide(10);
    boolean b60 = money52.equals((java.lang.Object)money55);
    money55.setAmount(100.0d);
    boolean b63 = money49.equals(money55);
    boolean b64 = money46.equals((java.lang.Object)b63);
    core.Money money65 = money15.subtract(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);

  }

  @Test
  public void test455() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test455"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money1.setCurrency(currency12);
    java.lang.String str14 = money1.toString();
    money1.setAmount(0.0d);
    java.lang.String str17 = money1.toString();
    money1.setAmount(70.0d);
    java.lang.String str20 = money1.toString();
    java.util.Currency currency21 = money1.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$0.00"+ "'", str17.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$70.00"+ "'", str20.equals("$70.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency21);

  }

  @Test
  public void test456() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test456"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    java.lang.String str21 = money18.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    java.util.Currency currency26 = money23.getCurrency();
    money18.setCurrency(currency26);
    money10.setCurrency(currency26);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.lang.String str35 = money32.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    money32.setCurrency(currency40);
    core.Money money43 = core.Money.dollars(10.0d);
    core.Money money45 = core.Money.dollars(10.0d);
    core.Money money47 = core.Money.dollars(10.0d);
    java.lang.String str48 = money47.toString();
    java.math.BigDecimal bigDecimal49 = money47.amount();
    core.Money money50 = money45.add(money47);
    core.Money money51 = money43.subtract(money45);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money45.setLocale(locale60);
    core.Money money62 = new core.Money(100.0d, currency40, locale60);
    core.Money money63 = new core.Money(100L, currency40);
    core.Money money64 = money10.add(money63);
    java.lang.String str65 = money10.toString();
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    java.lang.String str71 = money68.toString();
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    java.util.Currency currency76 = money73.getCurrency();
    money68.setCurrency(currency76);
    core.Money money78 = new core.Money(0.0d, currency76);
    core.Money money79 = money10.add(money78);
    java.lang.String str80 = money10.toString();
    core.Money[] money_array82 = money10.divide(1);
    java.util.Locale locale83 = money10.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale83);

  }

  @Test
  public void test457() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test457"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money10.subtract(money12);
    java.lang.String str19 = money12.toString();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money money28 = money23.add(money25);
    core.Money money29 = money21.subtract(money23);
    core.Money money30 = money12.add(money29);
    boolean b31 = money0.equals((java.lang.Object)money12);
    boolean b33 = money12.equals((java.lang.Object)10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.lang.String str40 = money37.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    java.util.Currency currency45 = money42.getCurrency();
    money37.setCurrency(currency45);
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money56 = money48.subtract(money50);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(1);
    boolean b64 = money58.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale65 = money58.getLocale();
    money50.setLocale(locale65);
    core.Money money67 = new core.Money(100.0d, currency45, locale65);
    core.Money money68 = new core.Money(100L, currency45);
    java.util.Locale locale69 = money68.getLocale();
    money12.setLocale(locale69);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array72 = money12.divide((-1));
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale69);

  }

  @Test
  public void test458() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test458"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money5 = new core.Money();
    core.Money money7 = core.Money.dollars(10.0d);
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money money12 = money7.add(money9);
    core.Money money13 = money5.add(money9);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money[] money_array26 = money22.divide(10);
    core.Money money27 = money17.subtract(money22);
    core.Money money28 = money9.add(money27);
    java.util.Currency currency29 = money9.getCurrency();
    core.Money money30 = money1.subtract(money9);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    money32.setAmount(1.0d);
    java.lang.String str39 = money32.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money42.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    core.Money money64 = new core.Money(1.0d, currency53, locale63);
    money32.setCurrency(currency53);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money67.subtract(money69);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(1);
    boolean b83 = money77.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale84 = money77.getLocale();
    money69.setLocale(locale84);
    money32.setLocale(locale84);
    money9.setLocale(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$1.00"+ "'", str39.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);

  }

  @Test
  public void test459() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test459"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money16.setCurrency(currency27);
    core.Money money29 = new core.Money(10.0d, currency27);
    java.lang.String str30 = money29.toString();
    core.Money money32 = core.Money.dollars(10.0d);
    core.Money money34 = core.Money.dollars(10.0d);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money money39 = money34.add(money36);
    core.Money money40 = money32.subtract(money34);
    java.lang.String str41 = money34.toString();
    core.Money money42 = money29.add(money34);
    core.Money money43 = money8.add(money29);
    money8.setAmount(0.0d);
    java.util.Locale locale46 = money8.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + "$10.00"+ "'", str30.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);

  }

  @Test
  public void test460() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test460"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.lang.String str4 = money1.toString();
    core.Money money5 = new core.Money();
    core.Money money7 = core.Money.dollars(10.0d);
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money money12 = money7.add(money9);
    core.Money money13 = money5.add(money9);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money[] money_array26 = money22.divide(10);
    core.Money money27 = money17.subtract(money22);
    core.Money money28 = money9.add(money27);
    java.util.Currency currency29 = money9.getCurrency();
    core.Money money30 = money1.subtract(money9);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array32 = money30.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);

  }

  @Test
  public void test461() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test461"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money15 = new core.Money(100.0d, currency13);
    java.util.Currency currency16 = money15.getCurrency();
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money money23 = money18.add(money20);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(10);
    core.Money money30 = money20.subtract(money25);
    core.Money money31 = money15.add(money30);
    java.math.BigDecimal bigDecimal32 = money15.amount();
    java.lang.String str33 = money15.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$100.00"+ "'", str33.equals("$100.00"));

  }

  @Test
  public void test462() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test462"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money money25 = money20.add(money22);
    core.Money money26 = money18.subtract(money20);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale35 = money28.getLocale();
    money20.setLocale(locale35);
    core.Money money37 = new core.Money(0.0d, currency15, locale35);
    core.Money money38 = new core.Money(1.0d, currency15);
    core.Money money39 = new core.Money(1.0d, currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);

  }

  @Test
  public void test463() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test463"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    java.math.BigDecimal bigDecimal9 = money1.amount();
    java.util.Currency currency10 = money1.getCurrency();
    core.Money[] money_array12 = money1.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);

  }

  @Test
  public void test464() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test464"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    core.Money money36 = core.Money.dollars(10.0d);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money36.subtract(money38);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(1);
    boolean b52 = money46.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale53 = money46.getLocale();
    money38.setLocale(locale53);
    money1.setLocale(locale53);
    java.lang.String str56 = money1.toString();
    java.math.BigDecimal bigDecimal57 = money1.amount();
    java.lang.String str58 = money1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$1.00"+ "'", str56.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$1.00"+ "'", str58.equals("$1.00"));

  }

  @Test
  public void test465() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test465"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.lang.String str22 = money19.toString();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    java.util.Currency currency27 = money24.getCurrency();
    money19.setCurrency(currency27);
    core.Money money29 = new core.Money(100L, currency27);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    money32.setAmount(1.0d);
    java.lang.String str39 = money32.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(1);
    boolean b48 = money42.equals((java.lang.Object)(-1.0d));
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    java.util.Currency currency53 = money50.getCurrency();
    money42.setCurrency(currency53);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money[] money_array60 = money56.divide(1);
    boolean b62 = money56.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale63 = money56.getLocale();
    core.Money money64 = new core.Money(1.0d, currency53, locale63);
    money32.setCurrency(currency53);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money67.subtract(money69);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money[] money_array81 = money77.divide(1);
    boolean b83 = money77.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale84 = money77.getLocale();
    money69.setLocale(locale84);
    core.Money money86 = new core.Money(1.0d, currency53, locale84);
    money29.setLocale(locale84);
    money10.setLocale(locale84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$1.00"+ "'", str39.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);

  }

  @Test
  public void test466() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test466"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money20 = money17.add(money19);
    core.Money money22 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal23 = money22.amount();
    money22.setAmount((-1.0d));
    java.util.Locale locale26 = money22.getLocale();
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money28.subtract(money30);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    core.Money[] money_array42 = money38.divide(1);
    boolean b44 = money38.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale45 = money38.getLocale();
    money30.setLocale(locale45);
    java.util.Locale locale47 = money30.getLocale();
    money22.setLocale(locale47);
    money17.setLocale(locale47);
    money17.setAmount(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale47);

  }

  @Test
  public void test467() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test467"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(90.0d, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test468() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test468"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    java.lang.String str7 = money4.toString();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.util.Currency currency12 = money9.getCurrency();
    money4.setCurrency(currency12);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money money22 = money17.add(money19);
    core.Money money23 = money15.subtract(money17);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    money17.setLocale(locale32);
    core.Money money34 = new core.Money(100.0d, currency12, locale32);
    core.Money money35 = new core.Money(100L, currency12);
    core.Money money36 = new core.Money(1L, currency12);
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.lang.String str41 = money38.toString();
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    java.util.Currency currency46 = money43.getCurrency();
    money38.setCurrency(currency46);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    java.lang.String str52 = money49.toString();
    core.Money money54 = core.Money.dollars(10.0d);
    java.lang.String str55 = money54.toString();
    java.math.BigDecimal bigDecimal56 = money54.amount();
    java.util.Currency currency57 = money54.getCurrency();
    money49.setCurrency(currency57);
    boolean b60 = money49.equals((java.lang.Object)(byte)100);
    boolean b61 = money38.equals((java.lang.Object)money49);
    java.util.Currency currency62 = money38.getCurrency();
    money36.setCurrency(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);

  }

  @Test
  public void test469() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test469"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    money1.setAmount(0.0d);
    java.lang.String str37 = money1.toString();
    core.Money[] money_array39 = money1.divide(1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$0.00"+ "'", str37.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);

  }

  @Test
  public void test470() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test470"); }


    core.Money money2 = new core.Money();
    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money money9 = money4.add(money6);
    core.Money money10 = money2.add(money6);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    core.Money money24 = money14.subtract(money19);
    core.Money money25 = money6.add(money24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal28 = money27.amount();
    money27.setAmount((-1.0d));
    core.Money money31 = money25.add(money27);
    java.util.Currency currency32 = money25.getCurrency();
    core.Money money33 = new core.Money((-1L), currency32);
    core.Money money34 = new core.Money(1L, currency32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency32);

  }

  @Test
  public void test471() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test471"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(10);
    money2.setAmount(1.0d);
    java.lang.String str9 = money2.toString();
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money[] money_array16 = money12.divide(1);
    boolean b18 = money12.equals((java.lang.Object)(-1.0d));
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    java.util.Currency currency23 = money20.getCurrency();
    money12.setCurrency(currency23);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money34 = new core.Money(1.0d, currency23, locale33);
    money2.setCurrency(currency23);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money[] money_array44 = money40.divide(10);
    boolean b45 = money37.equals((java.lang.Object)money40);
    core.Money money47 = core.Money.dollars(10.0d);
    core.Money money49 = core.Money.dollars(10.0d);
    java.lang.String str50 = money49.toString();
    java.math.BigDecimal bigDecimal51 = money49.amount();
    core.Money money52 = money47.add(money49);
    core.Money money53 = money40.add(money52);
    java.util.Locale locale54 = money53.getLocale();
    core.Money money56 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal57 = money56.amount();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    core.Money[] money_array66 = money62.divide(10);
    boolean b67 = money59.equals((java.lang.Object)money62);
    money62.setAmount(100.0d);
    boolean b70 = money56.equals(money62);
    boolean b71 = money53.equals((java.lang.Object)b70);
    core.Money money72 = money2.subtract(money53);
    java.util.Currency currency73 = money72.getCurrency();
    core.Money money74 = new core.Money(0L, currency73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$1.00"+ "'", str9.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + "$10.00"+ "'", str50.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency73);

  }

  @Test
  public void test472() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test472"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    core.Money[] money_array6 = money2.divide(1);
    boolean b8 = money2.equals((java.lang.Object)(-1.0d));
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.util.Currency currency13 = money10.getCurrency();
    money2.setCurrency(currency13);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money[] money_array20 = money16.divide(1);
    boolean b22 = money16.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale23 = money16.getLocale();
    core.Money money24 = new core.Money(1.0d, currency13, locale23);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money40 = new core.Money(100.0d, currency38);
    boolean b41 = money24.equals(money40);
    java.lang.String str42 = money24.toString();
    java.util.Locale locale43 = money24.getLocale();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    java.lang.String str49 = money46.toString();
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    java.util.Currency currency54 = money51.getCurrency();
    money46.setCurrency(currency54);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(10);
    boolean b65 = money57.equals((java.lang.Object)money60);
    core.Money money67 = core.Money.dollars(10.0d);
    core.Money money69 = core.Money.dollars(10.0d);
    java.lang.String str70 = money69.toString();
    java.math.BigDecimal bigDecimal71 = money69.amount();
    core.Money money72 = money67.add(money69);
    core.Money money73 = money60.add(money72);
    boolean b74 = money46.equals((java.lang.Object)money60);
    java.util.Locale locale75 = money60.getLocale();
    java.lang.String str76 = money60.toString();
    java.util.Currency currency77 = money60.getCurrency();
    core.Money money78 = new core.Money(10L, currency77);
    boolean b79 = money24.equals(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$1.00"+ "'", str42.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str70 + "' != '" + "$10.00"+ "'", str70.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);

  }

  @Test
  public void test473() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test473"); }


    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    java.lang.String str6 = money3.toString();
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    java.util.Currency currency11 = money8.getCurrency();
    money3.setCurrency(currency11);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money money21 = money16.add(money18);
    core.Money money22 = money14.subtract(money16);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale31 = money24.getLocale();
    money16.setLocale(locale31);
    core.Money money33 = new core.Money(100.0d, currency11, locale31);
    core.Money money34 = new core.Money((-1L), currency11);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    java.util.Currency currency40 = money37.getCurrency();
    core.Money money41 = new core.Money(0L, currency40);
    java.util.Locale locale42 = money41.getLocale();
    money41.setAmount(100.0d);
    java.util.Locale locale45 = money41.getLocale();
    money34.setLocale(locale45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale45);

  }

  @Test
  public void test474() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test474"); }


    core.Money money2 = new core.Money();
    core.Money money4 = core.Money.dollars(10.0d);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money money9 = money4.add(money6);
    core.Money money10 = money2.add(money6);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money[] money_array23 = money19.divide(10);
    core.Money money24 = money14.subtract(money19);
    core.Money money25 = money6.add(money24);
    core.Money money27 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal28 = money27.amount();
    money27.setAmount((-1.0d));
    core.Money money31 = money25.add(money27);
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    core.Money[] money_array37 = money33.divide(10);
    money33.setAmount(1.0d);
    java.lang.String str40 = money33.toString();
    java.util.Locale locale41 = money33.getLocale();
    core.Money money42 = money31.add(money33);
    core.Money money44 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal45 = money44.amount();
    core.Money[] money_array47 = money44.divide(100);
    core.Money money48 = money42.subtract(money44);
    java.lang.String str49 = money48.toString();
    java.util.Currency currency50 = money48.getCurrency();
    core.Money money51 = new core.Money(100.0d, currency50);
    core.Money money52 = new core.Money();
    core.Money money54 = core.Money.dollars(10.0d);
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    core.Money money59 = money54.add(money56);
    core.Money money60 = money52.add(money56);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money money69 = money64.add(money66);
    core.Money money70 = money62.subtract(money64);
    java.lang.String str71 = money64.toString();
    core.Money money73 = core.Money.dollars(10.0d);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money money80 = money75.add(money77);
    core.Money money81 = money73.subtract(money75);
    core.Money money82 = money64.add(money81);
    boolean b83 = money52.equals((java.lang.Object)money64);
    java.util.Locale locale84 = money52.getLocale();
    core.Money money85 = new core.Money(100.0d, currency50, locale84);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array87 = money85.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$1.00"+ "'", str40.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$0.00"+ "'", str49.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale84);

  }

  @Test
  public void test475() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test475"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(10);
    money1.setAmount(1.0d);
    java.lang.String str8 = money1.toString();
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money[] money_array15 = money11.divide(1);
    boolean b17 = money11.equals((java.lang.Object)(-1.0d));
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    java.util.Currency currency22 = money19.getCurrency();
    money11.setCurrency(currency22);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale32 = money25.getLocale();
    core.Money money33 = new core.Money(1.0d, currency22, locale32);
    money1.setCurrency(currency22);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(10);
    boolean b44 = money36.equals((java.lang.Object)money39);
    core.Money money46 = core.Money.dollars(10.0d);
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money money51 = money46.add(money48);
    core.Money money52 = money39.add(money51);
    java.util.Locale locale53 = money52.getLocale();
    core.Money money55 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal56 = money55.amount();
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(10);
    boolean b66 = money58.equals((java.lang.Object)money61);
    money61.setAmount(100.0d);
    boolean b69 = money55.equals(money61);
    boolean b70 = money52.equals((java.lang.Object)b69);
    core.Money money71 = money1.subtract(money52);
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    core.Money[] money_array82 = money78.divide(10);
    boolean b83 = money75.equals((java.lang.Object)money78);
    core.Money money85 = core.Money.dollars(10.0d);
    core.Money money87 = core.Money.dollars(10.0d);
    java.lang.String str88 = money87.toString();
    java.math.BigDecimal bigDecimal89 = money87.amount();
    core.Money money90 = money85.add(money87);
    core.Money money91 = money78.add(money90);
    core.Money money93 = core.Money.dollars(10.0d);
    core.Money money94 = money91.add(money93);
    java.util.Currency currency95 = money93.getCurrency();
    core.Money money96 = new core.Money((-1L), currency95);
    core.Money money97 = new core.Money(0L, currency95);
    money1.setCurrency(currency95);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$1.00"+ "'", str8.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "$10.00"+ "'", str88.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money94);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency95);

  }

  @Test
  public void test476() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test476"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money18 = core.Money.dollars(10.0d);
    java.lang.String str19 = money18.toString();
    java.math.BigDecimal bigDecimal20 = money18.amount();
    core.Money[] money_array22 = money18.divide(10);
    core.Money money23 = money13.subtract(money18);
    core.Money money24 = money4.add(money23);
    java.lang.String str25 = money23.toString();
    java.util.Locale locale26 = money23.getLocale();
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money[] money_array35 = money31.divide(10);
    boolean b36 = money28.equals((java.lang.Object)money31);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money44 = money31.add(money43);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.lang.String str48 = money46.toString();
    money46.setAmount(0.0d);
    core.Money money51 = money44.subtract(money46);
    money51.setAmount(11.0d);
    java.util.Locale locale54 = money51.getLocale();
    money23.setLocale(locale54);
    java.lang.String str56 = money23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str19 + "' != '" + "$10.00"+ "'", str19.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$0.00"+ "'", str25.equals("$0.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + "$10.00"+ "'", str48.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$0.00"+ "'", str56.equals("$0.00"));

  }

  @Test
  public void test477() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test477"); }


    java.util.Currency currency1 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money2 = new core.Money(11.0d, currency1);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test478() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test478"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money18 = core.Money.dollars(10.0d);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money22 = core.Money.dollars(10.0d);
    java.lang.String str23 = money22.toString();
    java.math.BigDecimal bigDecimal24 = money22.amount();
    core.Money money25 = money20.add(money22);
    core.Money money26 = money18.subtract(money20);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    core.Money[] money_array32 = money28.divide(1);
    boolean b34 = money28.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale35 = money28.getLocale();
    money20.setLocale(locale35);
    core.Money money37 = new core.Money(0.0d, currency15, locale35);
    core.Money money38 = new core.Money(1.0d, currency15);
    core.Money money39 = new core.Money(0.0d, currency15);
    core.Money money40 = new core.Money();
    core.Money money42 = core.Money.dollars(10.0d);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money money47 = money42.add(money44);
    core.Money money48 = money40.add(money44);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    core.Money[] money_array61 = money57.divide(10);
    core.Money money62 = money52.subtract(money57);
    core.Money money63 = money44.add(money62);
    core.Money money65 = core.Money.dollars(10.0d);
    java.lang.String str66 = money65.toString();
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    core.Money[] money_array72 = money68.divide(10);
    boolean b73 = money65.equals((java.lang.Object)money68);
    core.Money money75 = core.Money.dollars(10.0d);
    core.Money money77 = core.Money.dollars(10.0d);
    java.lang.String str78 = money77.toString();
    java.math.BigDecimal bigDecimal79 = money77.amount();
    core.Money money80 = money75.add(money77);
    core.Money money81 = money68.add(money80);
    core.Money money83 = core.Money.dollars(10.0d);
    core.Money money84 = money81.add(money83);
    java.util.Currency currency85 = money84.getCurrency();
    money62.setCurrency(currency85);
    core.Money money87 = money39.subtract(money62);
    java.util.Currency currency88 = money87.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "$10.00"+ "'", str23.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "$10.00"+ "'", str66.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "$10.00"+ "'", str78.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency88);

  }

  @Test
  public void test479() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test479"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(1);
    boolean b10 = money4.equals((java.lang.Object)(-1.0d));
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    java.util.Currency currency15 = money12.getCurrency();
    money4.setCurrency(currency15);
    core.Money money17 = new core.Money(10.0d, currency15);
    core.Money money18 = new core.Money(1.0d, currency15);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(10);
    money20.setAmount(1.0d);
    java.lang.String str27 = money20.toString();
    core.Money money30 = core.Money.dollars(10.0d);
    java.lang.String str31 = money30.toString();
    java.math.BigDecimal bigDecimal32 = money30.amount();
    core.Money[] money_array34 = money30.divide(1);
    boolean b36 = money30.equals((java.lang.Object)(-1.0d));
    core.Money money38 = core.Money.dollars(10.0d);
    java.lang.String str39 = money38.toString();
    java.math.BigDecimal bigDecimal40 = money38.amount();
    java.util.Currency currency41 = money38.getCurrency();
    money30.setCurrency(currency41);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale51 = money44.getLocale();
    core.Money money52 = new core.Money(1.0d, currency41, locale51);
    money20.setCurrency(currency41);
    money18.setCurrency(currency41);
    core.Money money55 = new core.Money((-1L), currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$1.00"+ "'", str27.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "$10.00"+ "'", str39.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale51);

  }

  @Test
  public void test480() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test480"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    java.lang.String str11 = money10.toString();
    java.math.BigDecimal bigDecimal12 = money10.amount();
    java.lang.String str13 = money10.toString();
    core.Money money15 = core.Money.dollars(10.0d);
    java.lang.String str16 = money15.toString();
    java.math.BigDecimal bigDecimal17 = money15.amount();
    java.util.Currency currency18 = money15.getCurrency();
    money10.setCurrency(currency18);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money38 = new core.Money(10.0d, currency36);
    core.Money money39 = new core.Money(1.0d, currency36);
    core.Money money40 = new core.Money(0L, currency36);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    core.Money[] money_array48 = money44.divide(1);
    boolean b50 = money44.equals((java.lang.Object)(-1.0d));
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    java.util.Currency currency55 = money52.getCurrency();
    money44.setCurrency(currency55);
    core.Money money58 = core.Money.dollars(10.0d);
    java.lang.String str59 = money58.toString();
    java.math.BigDecimal bigDecimal60 = money58.amount();
    core.Money[] money_array62 = money58.divide(1);
    boolean b64 = money58.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale65 = money58.getLocale();
    core.Money money66 = new core.Money(1.0d, currency55, locale65);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    java.lang.String str71 = money70.toString();
    java.math.BigDecimal bigDecimal72 = money70.amount();
    core.Money[] money_array74 = money70.divide(1);
    boolean b76 = money70.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale77 = money70.getLocale();
    money68.setLocale(locale77);
    core.Money money79 = new core.Money(1.0d, currency55, locale77);
    core.Money money80 = new core.Money(0.0d, currency36, locale77);
    java.util.Locale locale81 = money80.getLocale();
    java.util.Currency currency82 = money80.getCurrency();
    core.Money money83 = money10.subtract(money80);
    core.Money money84 = money0.add(money83);
    java.lang.String str85 = money0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str11 + "' != '" + "$10.00"+ "'", str11.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "$10.00"+ "'", str16.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "$10.00"+ "'", str59.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "$10.00"+ "'", str71.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str85 + "' != '" + "$0.00"+ "'", str85.equals("$0.00"));

  }

  @Test
  public void test481() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test481"); }


    core.Money money2 = core.Money.dollars((-1.0d));
    java.util.Currency currency3 = money2.getCurrency();
    core.Money money4 = new core.Money((-1L), currency3);
    java.util.Locale locale5 = money4.getLocale();
    java.util.Currency currency6 = money4.getCurrency();
    core.Money money7 = new core.Money();
    core.Money money9 = core.Money.dollars(10.0d);
    core.Money money11 = core.Money.dollars(10.0d);
    java.lang.String str12 = money11.toString();
    java.math.BigDecimal bigDecimal13 = money11.amount();
    core.Money money14 = money9.add(money11);
    core.Money money15 = money7.add(money11);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.math.BigDecimal bigDecimal21 = money19.amount();
    core.Money money22 = money17.add(money19);
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(10);
    core.Money money29 = money19.subtract(money24);
    core.Money money30 = money11.add(money29);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(1);
    boolean b38 = money32.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale39 = money32.getLocale();
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money money46 = money41.add(money43);
    core.Money money47 = money32.subtract(money41);
    core.Money[] money_array49 = money47.divide(1);
    core.Money money50 = money30.subtract(money47);
    boolean b51 = money4.equals(money30);
    // The following exception was thrown during execution in test generation
    try {
      core.Money[] money_array53 = money4.divide(0);
      org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ArrayIndexOutOfBoundsException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);

  }

  @Test
  public void test482() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test482"); }


    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(1);
    boolean b11 = money5.equals((java.lang.Object)(-1.0d));
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    java.util.Currency currency16 = money13.getCurrency();
    money5.setCurrency(currency16);
    core.Money money18 = new core.Money(10.0d, currency16);
    core.Money money19 = new core.Money(1.0d, currency16);
    core.Money money20 = new core.Money(1L, currency16);
    core.Money money21 = new core.Money(10.0d, currency16);
    java.util.Currency currency22 = money21.getCurrency();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale33 = money26.getLocale();
    core.Money money35 = core.Money.dollars(10.0d);
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money money40 = money35.add(money37);
    core.Money money41 = money26.subtract(money35);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    java.lang.String str46 = money43.toString();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    java.util.Currency currency51 = money48.getCurrency();
    money43.setCurrency(currency51);
    money35.setCurrency(currency51);
    core.Money money57 = core.Money.dollars(10.0d);
    java.lang.String str58 = money57.toString();
    java.math.BigDecimal bigDecimal59 = money57.amount();
    java.lang.String str60 = money57.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    java.lang.String str63 = money62.toString();
    java.math.BigDecimal bigDecimal64 = money62.amount();
    java.util.Currency currency65 = money62.getCurrency();
    money57.setCurrency(currency65);
    core.Money money68 = core.Money.dollars(10.0d);
    core.Money money70 = core.Money.dollars(10.0d);
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money money75 = money70.add(money72);
    core.Money money76 = money68.subtract(money70);
    core.Money money78 = core.Money.dollars(10.0d);
    java.lang.String str79 = money78.toString();
    java.math.BigDecimal bigDecimal80 = money78.amount();
    core.Money[] money_array82 = money78.divide(1);
    boolean b84 = money78.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale85 = money78.getLocale();
    money70.setLocale(locale85);
    core.Money money87 = new core.Money(100.0d, currency65, locale85);
    core.Money money88 = new core.Money(100L, currency65);
    core.Money money89 = money35.add(money88);
    java.lang.String str90 = money35.toString();
    java.util.Currency currency91 = money35.getCurrency();
    core.Money money92 = new core.Money(1L, currency91);
    core.Money money93 = new core.Money(10L, currency91);
    money21.setCurrency(currency91);
    java.math.BigDecimal bigDecimal95 = money21.amount();
    core.Money money96 = null;
    // The following exception was thrown during execution in test generation
    try {
      boolean b97 = money21.equals(money96);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + "$10.00"+ "'", str63.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str79 + "' != '" + "$10.00"+ "'", str79.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + "$10.00"+ "'", str90.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency91);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal95);

  }

  @Test
  public void test483() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test483"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    core.Money money15 = core.Money.dollars((-1.0d));
    core.Money money16 = money13.subtract(money15);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    java.math.BigDecimal bigDecimal22 = money20.amount();
    core.Money[] money_array24 = money20.divide(1);
    boolean b26 = money20.equals((java.lang.Object)(-1.0d));
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    java.util.Currency currency31 = money28.getCurrency();
    money20.setCurrency(currency31);
    core.Money money33 = new core.Money(100.0d, currency31);
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    core.Money[] money_array39 = money35.divide(10);
    money35.setAmount(1.0d);
    java.lang.String str42 = money35.toString();
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    java.util.Currency currency56 = money53.getCurrency();
    money45.setCurrency(currency56);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale66 = money59.getLocale();
    core.Money money67 = new core.Money(1.0d, currency56, locale66);
    money35.setCurrency(currency56);
    core.Money money70 = core.Money.dollars(10.0d);
    core.Money money72 = core.Money.dollars(10.0d);
    core.Money money74 = core.Money.dollars(10.0d);
    java.lang.String str75 = money74.toString();
    java.math.BigDecimal bigDecimal76 = money74.amount();
    core.Money money77 = money72.add(money74);
    core.Money money78 = money70.subtract(money72);
    core.Money money80 = core.Money.dollars(10.0d);
    java.lang.String str81 = money80.toString();
    java.math.BigDecimal bigDecimal82 = money80.amount();
    core.Money[] money_array84 = money80.divide(1);
    boolean b86 = money80.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale87 = money80.getLocale();
    money72.setLocale(locale87);
    money35.setLocale(locale87);
    core.Money money90 = new core.Money(1.0d, currency31, locale87);
    money15.setLocale(locale87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$1.00"+ "'", str42.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str75 + "' != '" + "$10.00"+ "'", str75.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str81 + "' != '" + "$10.00"+ "'", str81.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale87);

  }

  @Test
  public void test484() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test484"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    java.util.Currency currency7 = money3.getCurrency();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    java.lang.String str12 = money9.toString();
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money9.setCurrency(currency17);
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(10);
    boolean b28 = money20.equals((java.lang.Object)money23);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money23.add(money35);
    boolean b37 = money9.equals((java.lang.Object)money23);
    java.lang.String str38 = money9.toString();
    java.util.Locale locale39 = money9.getLocale();
    core.Money money40 = money3.add(money9);
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    java.util.Currency currency47 = money44.getCurrency();
    core.Money money48 = new core.Money(0L, currency47);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(10);
    money50.setAmount(1.0d);
    core.Money money57 = money48.add(money50);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    core.Money money68 = core.Money.dollars(10.0d);
    java.lang.String str69 = money68.toString();
    java.math.BigDecimal bigDecimal70 = money68.amount();
    java.util.Currency currency71 = money68.getCurrency();
    money60.setCurrency(currency71);
    core.Money money73 = new core.Money(100.0d, currency71);
    java.util.Currency currency74 = money73.getCurrency();
    money48.setCurrency(currency74);
    core.Money money76 = new core.Money(70.0d, currency74);
    java.util.Currency currency77 = money76.getCurrency();
    boolean b78 = money9.equals((java.lang.Object)currency77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "$10.00"+ "'", str12.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + "$10.00"+ "'", str69.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test485() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test485"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.lang.String str14 = money8.toString();
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    core.Money money24 = core.Money.dollars(10.0d);
    java.lang.String str25 = money24.toString();
    java.math.BigDecimal bigDecimal26 = money24.amount();
    core.Money[] money_array28 = money24.divide(1);
    boolean b30 = money24.equals((java.lang.Object)(-1.0d));
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    java.util.Currency currency35 = money32.getCurrency();
    money24.setCurrency(currency35);
    core.Money money37 = new core.Money(10.0d, currency35);
    core.Money money38 = new core.Money(1.0d, currency35);
    core.Money money39 = new core.Money(0L, currency35);
    core.Money money40 = money16.subtract(money39);
    boolean b41 = money8.equals(money16);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money[] money_array50 = money46.divide(10);
    boolean b51 = money43.equals((java.lang.Object)money46);
    core.Money[] money_array53 = money46.divide(10);
    boolean b54 = money16.equals((java.lang.Object)10);
    java.lang.String str55 = money16.toString();
    java.util.Locale locale56 = money16.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "$10.00"+ "'", str25.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "$10.00"+ "'", str55.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale56);

  }

  @Test
  public void test486() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test486"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    boolean b18 = money10.equals((java.lang.Object)10.0d);
    core.Money money19 = new core.Money();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.add(money23);
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(10);
    core.Money money41 = money31.subtract(money36);
    core.Money money42 = money23.add(money41);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(10);
    core.Money money56 = money46.subtract(money51);
    java.lang.String str57 = money51.toString();
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    java.util.Currency currency62 = money59.getCurrency();
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money[] money_array71 = money67.divide(1);
    boolean b73 = money67.equals((java.lang.Object)(-1.0d));
    core.Money money75 = core.Money.dollars(10.0d);
    java.lang.String str76 = money75.toString();
    java.math.BigDecimal bigDecimal77 = money75.amount();
    java.util.Currency currency78 = money75.getCurrency();
    money67.setCurrency(currency78);
    core.Money money80 = new core.Money(10.0d, currency78);
    core.Money money81 = new core.Money(1.0d, currency78);
    core.Money money82 = new core.Money(0L, currency78);
    core.Money money83 = money59.subtract(money82);
    boolean b84 = money51.equals(money59);
    boolean b85 = money41.equals((java.lang.Object)money51);
    java.util.Locale locale86 = money51.getLocale();
    core.Money money87 = money10.add(money51);
    java.lang.String str88 = money10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "$10.00"+ "'", str76.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str88 + "' != '" + "$10.00"+ "'", str88.equals("$10.00"));

  }

  @Test
  public void test487() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test487"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    core.Money[] money_array5 = money1.divide(1);
    boolean b7 = money1.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale8 = money1.getLocale();
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money16 = money1.subtract(money10);
    boolean b18 = money10.equals((java.lang.Object)10.0d);
    java.util.Locale locale19 = money10.getLocale();
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(1);
    boolean b32 = money26.equals((java.lang.Object)(-1.0d));
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    java.math.BigDecimal bigDecimal36 = money34.amount();
    java.util.Currency currency37 = money34.getCurrency();
    money26.setCurrency(currency37);
    core.Money money39 = new core.Money(10.0d, currency37);
    core.Money money40 = new core.Money(1.0d, currency37);
    core.Money money41 = new core.Money(0L, currency37);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(1);
    boolean b51 = money45.equals((java.lang.Object)(-1.0d));
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    java.util.Currency currency56 = money53.getCurrency();
    money45.setCurrency(currency56);
    core.Money money59 = core.Money.dollars(10.0d);
    java.lang.String str60 = money59.toString();
    java.math.BigDecimal bigDecimal61 = money59.amount();
    core.Money[] money_array63 = money59.divide(1);
    boolean b65 = money59.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale66 = money59.getLocale();
    core.Money money67 = new core.Money(1.0d, currency56, locale66);
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money[] money_array75 = money71.divide(1);
    boolean b77 = money71.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale78 = money71.getLocale();
    money69.setLocale(locale78);
    core.Money money80 = new core.Money(1.0d, currency56, locale78);
    core.Money money81 = new core.Money(0.0d, currency37, locale78);
    java.util.Locale locale82 = money81.getLocale();
    java.util.Currency currency83 = money81.getCurrency();
    core.Money money84 = new core.Money(0.0d, currency83);
    core.Money money85 = money10.add(money84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);

  }

  @Test
  public void test488() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test488"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money21 = new core.Money(1L, currency17);
    core.Money money25 = core.Money.dollars(10.0d);
    java.lang.String str26 = money25.toString();
    java.math.BigDecimal bigDecimal27 = money25.amount();
    core.Money[] money_array29 = money25.divide(1);
    boolean b31 = money25.equals((java.lang.Object)(-1.0d));
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money25.setCurrency(currency36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    java.math.BigDecimal bigDecimal41 = money39.amount();
    core.Money[] money_array43 = money39.divide(1);
    boolean b45 = money39.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale46 = money39.getLocale();
    core.Money money47 = new core.Money(1.0d, currency36, locale46);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money[] money_array55 = money51.divide(1);
    boolean b57 = money51.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale58 = money51.getLocale();
    money49.setLocale(locale58);
    core.Money money60 = new core.Money(1.0d, currency36, locale58);
    money21.setCurrency(currency36);
    core.Money money62 = new core.Money(1L, currency36);
    core.Money money63 = new core.Money(100L, currency36);
    core.Money money65 = core.Money.dollars(10.0d);
    core.Money money67 = core.Money.dollars(10.0d);
    java.lang.String str68 = money67.toString();
    java.math.BigDecimal bigDecimal69 = money67.amount();
    core.Money money70 = money65.add(money67);
    core.Money money72 = core.Money.dollars(10.0d);
    java.lang.String str73 = money72.toString();
    java.math.BigDecimal bigDecimal74 = money72.amount();
    core.Money[] money_array76 = money72.divide(10);
    core.Money money77 = money67.subtract(money72);
    core.Money money79 = core.Money.dollars((-1.0d));
    core.Money money80 = money77.subtract(money79);
    core.Money money81 = money63.add(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + "$10.00"+ "'", str26.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$10.00"+ "'", str68.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "$10.00"+ "'", str73.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money81);

  }

  @Test
  public void test489() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test489"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    money24.setAmount(11.0d);
    core.Money[] money_array28 = money24.divide(100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array28);

  }

  @Test
  public void test490() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test490"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    java.math.BigDecimal bigDecimal3 = money1.amount();
    java.util.Currency currency4 = money1.getCurrency();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(1);
    boolean b15 = money9.equals((java.lang.Object)(-1.0d));
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    java.util.Currency currency20 = money17.getCurrency();
    money9.setCurrency(currency20);
    core.Money money22 = new core.Money(10.0d, currency20);
    core.Money money23 = new core.Money(1.0d, currency20);
    core.Money money24 = new core.Money(0L, currency20);
    core.Money money25 = money1.subtract(money24);
    java.util.Currency currency26 = money1.getCurrency();
    java.lang.String str27 = money1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));

  }

  @Test
  public void test491() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test491"); }


    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    java.math.BigDecimal bigDecimal8 = money6.amount();
    core.Money[] money_array10 = money6.divide(1);
    boolean b12 = money6.equals((java.lang.Object)(-1.0d));
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    java.util.Currency currency17 = money14.getCurrency();
    money6.setCurrency(currency17);
    core.Money money19 = new core.Money(10.0d, currency17);
    core.Money money20 = new core.Money(1.0d, currency17);
    core.Money money21 = new core.Money(10.0d, currency17);
    core.Money money22 = new core.Money(100L, currency17);
    core.Money money26 = core.Money.dollars(10.0d);
    java.lang.String str27 = money26.toString();
    java.math.BigDecimal bigDecimal28 = money26.amount();
    core.Money[] money_array30 = money26.divide(10);
    money26.setAmount(1.0d);
    java.lang.String str33 = money26.toString();
    core.Money money36 = core.Money.dollars(10.0d);
    java.lang.String str37 = money36.toString();
    java.math.BigDecimal bigDecimal38 = money36.amount();
    core.Money[] money_array40 = money36.divide(1);
    boolean b42 = money36.equals((java.lang.Object)(-1.0d));
    core.Money money44 = core.Money.dollars(10.0d);
    java.lang.String str45 = money44.toString();
    java.math.BigDecimal bigDecimal46 = money44.amount();
    java.util.Currency currency47 = money44.getCurrency();
    money36.setCurrency(currency47);
    core.Money money50 = core.Money.dollars(10.0d);
    java.lang.String str51 = money50.toString();
    java.math.BigDecimal bigDecimal52 = money50.amount();
    core.Money[] money_array54 = money50.divide(1);
    boolean b56 = money50.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale57 = money50.getLocale();
    core.Money money58 = new core.Money(1.0d, currency47, locale57);
    money26.setCurrency(currency47);
    core.Money money60 = new core.Money(1L, currency47);
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    java.lang.String str65 = money64.toString();
    java.math.BigDecimal bigDecimal66 = money64.amount();
    core.Money[] money_array68 = money64.divide(1);
    boolean b70 = money64.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale71 = money64.getLocale();
    money62.setLocale(locale71);
    core.Money money73 = new core.Money(10.0d, currency47, locale71);
    core.Money[] money_array75 = money73.divide(10);
    java.util.Locale locale76 = money73.getLocale();
    core.Money money77 = new core.Money(0.0d, currency17, locale76);
    java.util.Currency currency78 = money77.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + "$10.00"+ "'", str27.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$1.00"+ "'", str33.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "$10.00"+ "'", str45.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "$10.00"+ "'", str51.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "$10.00"+ "'", str65.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency78);

  }

  @Test
  public void test492() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test492"); }


    core.Money money1 = core.Money.dollars(10.0d);
    core.Money money3 = core.Money.dollars(10.0d);
    java.lang.String str4 = money3.toString();
    java.math.BigDecimal bigDecimal5 = money3.amount();
    core.Money money6 = money1.add(money3);
    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(10);
    core.Money money13 = money3.subtract(money8);
    java.util.Locale locale14 = money8.getLocale();
    java.lang.String str15 = money8.toString();
    core.Money money17 = core.Money.dollars(0.0d);
    core.Money money18 = money8.subtract(money17);
    core.Money money19 = new core.Money();
    core.Money money21 = core.Money.dollars(10.0d);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money money26 = money21.add(money23);
    core.Money money27 = money19.add(money23);
    core.Money money28 = new core.Money();
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money28.add(money32);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    core.Money money43 = money38.add(money40);
    core.Money money45 = core.Money.dollars(10.0d);
    java.lang.String str46 = money45.toString();
    java.math.BigDecimal bigDecimal47 = money45.amount();
    core.Money[] money_array49 = money45.divide(10);
    core.Money money50 = money40.subtract(money45);
    core.Money money51 = money32.add(money50);
    core.Money money53 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal54 = money53.amount();
    money53.setAmount((-1.0d));
    core.Money money57 = money51.add(money53);
    core.Money money58 = money27.add(money51);
    core.Money money61 = core.Money.dollars(10.0d);
    java.lang.String str62 = money61.toString();
    java.math.BigDecimal bigDecimal63 = money61.amount();
    core.Money[] money_array65 = money61.divide(10);
    money61.setAmount(1.0d);
    java.lang.String str68 = money61.toString();
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money[] money_array75 = money71.divide(1);
    boolean b77 = money71.equals((java.lang.Object)(-1.0d));
    core.Money money79 = core.Money.dollars(10.0d);
    java.lang.String str80 = money79.toString();
    java.math.BigDecimal bigDecimal81 = money79.amount();
    java.util.Currency currency82 = money79.getCurrency();
    money71.setCurrency(currency82);
    core.Money money85 = core.Money.dollars(10.0d);
    java.lang.String str86 = money85.toString();
    java.math.BigDecimal bigDecimal87 = money85.amount();
    core.Money[] money_array89 = money85.divide(1);
    boolean b91 = money85.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale92 = money85.getLocale();
    core.Money money93 = new core.Money(1.0d, currency82, locale92);
    money61.setCurrency(currency82);
    core.Money money95 = new core.Money(1L, currency82);
    core.Money money96 = money51.subtract(money95);
    boolean b97 = money8.equals(money51);
    java.util.Currency currency98 = money51.getCurrency();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str4 + "' != '" + "$10.00"+ "'", str4.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "$10.00"+ "'", str62.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "$1.00"+ "'", str68.equals("$1.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str80 + "' != '" + "$10.00"+ "'", str80.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str86 + "' != '" + "$10.00"+ "'", str86.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal87);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency98);

  }

  @Test
  public void test493() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test493"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    core.Money money5 = core.Money.dollars(10.0d);
    java.lang.String str6 = money5.toString();
    java.math.BigDecimal bigDecimal7 = money5.amount();
    core.Money[] money_array9 = money5.divide(10);
    boolean b10 = money2.equals((java.lang.Object)money5);
    core.Money money12 = core.Money.dollars(10.0d);
    core.Money money14 = core.Money.dollars(10.0d);
    java.lang.String str15 = money14.toString();
    java.math.BigDecimal bigDecimal16 = money14.amount();
    core.Money money17 = money12.add(money14);
    core.Money money18 = money5.add(money17);
    core.Money money20 = core.Money.dollars(10.0d);
    core.Money money21 = money18.add(money20);
    java.util.Currency currency22 = money20.getCurrency();
    core.Money money23 = new core.Money((-1L), currency22);
    money23.setAmount(9.0d);
    money23.setAmount(70.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str6 + "' != '" + "$10.00"+ "'", str6.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + "$10.00"+ "'", str15.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency22);

  }

  @Test
  public void test494() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test494"); }


    core.Money money2 = core.Money.dollars(10.0d);
    java.lang.String str3 = money2.toString();
    java.math.BigDecimal bigDecimal4 = money2.amount();
    java.lang.String str5 = money2.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    java.util.Currency currency10 = money7.getCurrency();
    money2.setCurrency(currency10);
    core.Money money13 = core.Money.dollars(10.0d);
    core.Money money15 = core.Money.dollars(10.0d);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money money20 = money15.add(money17);
    core.Money money21 = money13.subtract(money15);
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(1);
    boolean b29 = money23.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale30 = money23.getLocale();
    money15.setLocale(locale30);
    core.Money money32 = new core.Money(100.0d, currency10, locale30);
    core.Money money34 = core.Money.dollars(10.0d);
    java.lang.String str35 = money34.toString();
    core.Money money37 = core.Money.dollars(10.0d);
    java.lang.String str38 = money37.toString();
    java.math.BigDecimal bigDecimal39 = money37.amount();
    core.Money[] money_array41 = money37.divide(10);
    boolean b42 = money34.equals((java.lang.Object)money37);
    core.Money money44 = core.Money.dollars(10.0d);
    core.Money money46 = core.Money.dollars(10.0d);
    java.lang.String str47 = money46.toString();
    java.math.BigDecimal bigDecimal48 = money46.amount();
    core.Money money49 = money44.add(money46);
    core.Money money50 = money37.add(money49);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.lang.String str54 = money52.toString();
    money52.setAmount(0.0d);
    core.Money money57 = money50.subtract(money52);
    core.Money money58 = money32.subtract(money57);
    core.Money money60 = core.Money.dollars(10.0d);
    java.lang.String str61 = money60.toString();
    java.math.BigDecimal bigDecimal62 = money60.amount();
    core.Money[] money_array64 = money60.divide(1);
    boolean b66 = money60.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale67 = money60.getLocale();
    core.Money money69 = core.Money.dollars(10.0d);
    core.Money money71 = core.Money.dollars(10.0d);
    java.lang.String str72 = money71.toString();
    java.math.BigDecimal bigDecimal73 = money71.amount();
    core.Money money74 = money69.add(money71);
    core.Money money75 = money60.subtract(money69);
    boolean b76 = money58.equals(money60);
    core.Money[] money_array78 = money60.divide(100);
    core.Money[] money_array80 = money60.divide(1);
    core.Money money82 = core.Money.dollars((-1.0d));
    java.util.Currency currency83 = money82.getCurrency();
    boolean b84 = money60.equals(money82);
    money82.setAmount(11.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str3 + "' != '" + "$10.00"+ "'", str3.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + "$10.00"+ "'", str35.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str47 + "' != '" + "$10.00"+ "'", str47.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + "$10.00"+ "'", str61.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "$10.00"+ "'", str72.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test495() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test495"); }


    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    core.Money money7 = core.Money.dollars(10.0d);
    java.lang.String str8 = money7.toString();
    java.math.BigDecimal bigDecimal9 = money7.amount();
    core.Money[] money_array11 = money7.divide(10);
    boolean b12 = money4.equals((java.lang.Object)money7);
    core.Money money14 = core.Money.dollars(10.0d);
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    core.Money money19 = money14.add(money16);
    core.Money money20 = money7.add(money19);
    core.Money money22 = core.Money.dollars(10.0d);
    core.Money money23 = money20.add(money22);
    java.util.Currency currency24 = money22.getCurrency();
    core.Money money25 = new core.Money((-1L), currency24);
    core.Money money26 = new core.Money(0L, currency24);
    core.Money money28 = core.Money.dollars(10.0d);
    java.lang.String str29 = money28.toString();
    java.math.BigDecimal bigDecimal30 = money28.amount();
    java.lang.String str31 = money28.toString();
    core.Money money33 = core.Money.dollars(10.0d);
    java.lang.String str34 = money33.toString();
    java.math.BigDecimal bigDecimal35 = money33.amount();
    java.util.Currency currency36 = money33.getCurrency();
    money28.setCurrency(currency36);
    core.Money money39 = core.Money.dollars(10.0d);
    java.lang.String str40 = money39.toString();
    core.Money money42 = core.Money.dollars(10.0d);
    java.lang.String str43 = money42.toString();
    java.math.BigDecimal bigDecimal44 = money42.amount();
    core.Money[] money_array46 = money42.divide(10);
    boolean b47 = money39.equals((java.lang.Object)money42);
    core.Money money49 = core.Money.dollars(10.0d);
    core.Money money51 = core.Money.dollars(10.0d);
    java.lang.String str52 = money51.toString();
    java.math.BigDecimal bigDecimal53 = money51.amount();
    core.Money money54 = money49.add(money51);
    core.Money money55 = money42.add(money54);
    boolean b56 = money28.equals((java.lang.Object)money42);
    java.util.Locale locale57 = money42.getLocale();
    java.lang.String str58 = money42.toString();
    core.Money money60 = core.Money.dollars((-1.0d));
    java.util.Currency currency61 = money60.getCurrency();
    money42.setCurrency(currency61);
    boolean b63 = money26.equals((java.lang.Object)currency61);
    core.Money money64 = new core.Money(1L, currency61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "$10.00"+ "'", str8.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + "$10.00"+ "'", str29.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + "$10.00"+ "'", str31.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str34 + "' != '" + "$10.00"+ "'", str34.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "$10.00"+ "'", str40.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "$10.00"+ "'", str43.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str52 + "' != '" + "$10.00"+ "'", str52.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + "$10.00"+ "'", str58.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);

  }

  @Test
  public void test496() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test496"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    core.Money money19 = core.Money.dollars(10.0d);
    java.lang.String str20 = money19.toString();
    java.lang.String str21 = money19.toString();
    money19.setAmount(0.0d);
    core.Money money24 = money17.subtract(money19);
    money24.setAmount(11.0d);
    core.Money money28 = core.Money.dollars(10.0d);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money28.subtract(money30);
    java.lang.String str37 = money30.toString();
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    core.Money money43 = core.Money.dollars(10.0d);
    java.lang.String str44 = money43.toString();
    java.math.BigDecimal bigDecimal45 = money43.amount();
    core.Money money46 = money41.add(money43);
    core.Money money47 = money39.subtract(money41);
    core.Money money48 = money30.add(money47);
    java.util.Currency currency49 = money47.getCurrency();
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    core.Money money55 = core.Money.dollars(10.0d);
    java.lang.String str56 = money55.toString();
    java.math.BigDecimal bigDecimal57 = money55.amount();
    core.Money money58 = money53.add(money55);
    core.Money money59 = money51.subtract(money53);
    java.lang.String str60 = money53.toString();
    core.Money money62 = core.Money.dollars(10.0d);
    core.Money money64 = core.Money.dollars(10.0d);
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money money69 = money64.add(money66);
    core.Money money70 = money62.subtract(money64);
    core.Money money71 = money53.add(money70);
    core.Money money73 = core.Money.dollars(10.0d);
    java.lang.String str74 = money73.toString();
    java.math.BigDecimal bigDecimal75 = money73.amount();
    java.util.Currency currency76 = money73.getCurrency();
    boolean b77 = money70.equals(money73);
    java.util.Currency currency78 = money70.getCurrency();
    core.Money money79 = money47.add(money70);
    core.Money money80 = money24.subtract(money79);
    java.util.Locale locale81 = money24.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "$10.00"+ "'", str20.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str37 + "' != '" + "$10.00"+ "'", str37.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "$10.00"+ "'", str44.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str56 + "' != '" + "$10.00"+ "'", str56.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + "$10.00"+ "'", str60.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str74 + "' != '" + "$10.00"+ "'", str74.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale81);

  }

  @Test
  public void test497() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test497"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal2 = money1.amount();
    core.Money[] money_array4 = money1.divide(100);
    core.Money money6 = core.Money.dollars(10.0d);
    java.lang.String str7 = money6.toString();
    core.Money money9 = core.Money.dollars(10.0d);
    java.lang.String str10 = money9.toString();
    java.math.BigDecimal bigDecimal11 = money9.amount();
    core.Money[] money_array13 = money9.divide(10);
    boolean b14 = money6.equals((java.lang.Object)money9);
    boolean b15 = money1.equals(money6);
    core.Money money17 = core.Money.dollars(10.0d);
    core.Money money19 = core.Money.dollars(10.0d);
    core.Money money21 = core.Money.dollars(10.0d);
    java.lang.String str22 = money21.toString();
    java.math.BigDecimal bigDecimal23 = money21.amount();
    core.Money money24 = money19.add(money21);
    core.Money money25 = money17.subtract(money19);
    java.math.BigDecimal bigDecimal26 = money17.amount();
    core.Money money27 = new core.Money();
    core.Money money29 = core.Money.dollars(10.0d);
    core.Money money31 = core.Money.dollars(10.0d);
    java.lang.String str32 = money31.toString();
    java.math.BigDecimal bigDecimal33 = money31.amount();
    core.Money money34 = money29.add(money31);
    core.Money money35 = money27.add(money31);
    core.Money money37 = core.Money.dollars(10.0d);
    core.Money money39 = core.Money.dollars(10.0d);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money money44 = money39.add(money41);
    core.Money money45 = money37.subtract(money39);
    java.lang.String str46 = money39.toString();
    core.Money money48 = core.Money.dollars(10.0d);
    core.Money money50 = core.Money.dollars(10.0d);
    core.Money money52 = core.Money.dollars(10.0d);
    java.lang.String str53 = money52.toString();
    java.math.BigDecimal bigDecimal54 = money52.amount();
    core.Money money55 = money50.add(money52);
    core.Money money56 = money48.subtract(money50);
    core.Money money57 = money39.add(money56);
    boolean b58 = money27.equals((java.lang.Object)money39);
    core.Money money60 = core.Money.dollars(10.0d);
    java.math.BigDecimal bigDecimal61 = money60.amount();
    core.Money money63 = core.Money.dollars(10.0d);
    java.lang.String str64 = money63.toString();
    core.Money money66 = core.Money.dollars(10.0d);
    java.lang.String str67 = money66.toString();
    java.math.BigDecimal bigDecimal68 = money66.amount();
    core.Money[] money_array70 = money66.divide(10);
    boolean b71 = money63.equals((java.lang.Object)money66);
    money66.setAmount(100.0d);
    boolean b74 = money60.equals(money66);
    money66.setAmount(10.0d);
    boolean b77 = money27.equals(money66);
    core.Money money78 = money17.add(money66);
    core.Money money79 = money1.subtract(money66);
    core.Money money82 = core.Money.dollars(10.0d);
    java.lang.String str83 = money82.toString();
    java.math.BigDecimal bigDecimal84 = money82.amount();
    core.Money[] money_array86 = money82.divide(1);
    boolean b88 = money82.equals((java.lang.Object)(-1.0d));
    core.Money money90 = core.Money.dollars(10.0d);
    java.lang.String str91 = money90.toString();
    java.math.BigDecimal bigDecimal92 = money90.amount();
    java.util.Currency currency93 = money90.getCurrency();
    money82.setCurrency(currency93);
    core.Money money95 = new core.Money(10.0d, currency93);
    core.Money money96 = money79.add(money95);
    money96.setAmount(90.0d);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "$10.00"+ "'", str7.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "$10.00"+ "'", str10.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + "$10.00"+ "'", str22.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "$10.00"+ "'", str32.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + "$10.00"+ "'", str46.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "$10.00"+ "'", str53.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str64 + "' != '" + "$10.00"+ "'", str64.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "$10.00"+ "'", str67.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money79);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str83 + "' != '" + "$10.00"+ "'", str83.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str91 + "' != '" + "$10.00"+ "'", str91.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency93);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money96);

  }

  @Test
  public void test498() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test498"); }


    core.Money money8 = core.Money.dollars(10.0d);
    java.lang.String str9 = money8.toString();
    java.math.BigDecimal bigDecimal10 = money8.amount();
    core.Money[] money_array12 = money8.divide(1);
    boolean b14 = money8.equals((java.lang.Object)(-1.0d));
    core.Money money16 = core.Money.dollars(10.0d);
    java.lang.String str17 = money16.toString();
    java.math.BigDecimal bigDecimal18 = money16.amount();
    java.util.Currency currency19 = money16.getCurrency();
    money8.setCurrency(currency19);
    core.Money money21 = new core.Money(10.0d, currency19);
    core.Money money22 = new core.Money(1.0d, currency19);
    core.Money money23 = new core.Money(1L, currency19);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money[] money_array31 = money27.divide(1);
    boolean b33 = money27.equals((java.lang.Object)(-1.0d));
    core.Money money35 = core.Money.dollars(10.0d);
    java.lang.String str36 = money35.toString();
    java.math.BigDecimal bigDecimal37 = money35.amount();
    java.util.Currency currency38 = money35.getCurrency();
    money27.setCurrency(currency38);
    core.Money money41 = core.Money.dollars(10.0d);
    java.lang.String str42 = money41.toString();
    java.math.BigDecimal bigDecimal43 = money41.amount();
    core.Money[] money_array45 = money41.divide(1);
    boolean b47 = money41.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale48 = money41.getLocale();
    core.Money money49 = new core.Money(1.0d, currency38, locale48);
    core.Money money51 = core.Money.dollars(10.0d);
    core.Money money53 = core.Money.dollars(10.0d);
    java.lang.String str54 = money53.toString();
    java.math.BigDecimal bigDecimal55 = money53.amount();
    core.Money[] money_array57 = money53.divide(1);
    boolean b59 = money53.equals((java.lang.Object)(-1.0d));
    java.util.Locale locale60 = money53.getLocale();
    money51.setLocale(locale60);
    core.Money money62 = new core.Money(1.0d, currency38, locale60);
    money23.setCurrency(currency38);
    core.Money money64 = new core.Money(1L, currency38);
    core.Money money65 = new core.Money(100L, currency38);
    core.Money money66 = new core.Money(100L, currency38);
    core.Money money67 = new core.Money(0L, currency38);
    java.math.BigDecimal bigDecimal68 = money67.amount();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str9 + "' != '" + "$10.00"+ "'", str9.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str17 + "' != '" + "$10.00"+ "'", str17.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "$10.00"+ "'", str36.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + "$10.00"+ "'", str42.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + "$10.00"+ "'", str54.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal68);

  }

  @Test
  public void test499() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test499"); }


    core.Money money0 = new core.Money();
    core.Money money2 = core.Money.dollars(10.0d);
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money money7 = money2.add(money4);
    core.Money money8 = money0.add(money4);
    core.Money money10 = core.Money.dollars(10.0d);
    core.Money money12 = core.Money.dollars(10.0d);
    java.lang.String str13 = money12.toString();
    java.math.BigDecimal bigDecimal14 = money12.amount();
    core.Money money15 = money10.add(money12);
    core.Money money17 = core.Money.dollars(10.0d);
    java.lang.String str18 = money17.toString();
    java.math.BigDecimal bigDecimal19 = money17.amount();
    core.Money[] money_array21 = money17.divide(10);
    core.Money money22 = money12.subtract(money17);
    core.Money money23 = money4.add(money22);
    core.Money money25 = core.Money.dollars(10.0d);
    core.Money money27 = core.Money.dollars(10.0d);
    java.lang.String str28 = money27.toString();
    java.math.BigDecimal bigDecimal29 = money27.amount();
    core.Money money30 = money25.add(money27);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money[] money_array36 = money32.divide(10);
    core.Money money37 = money27.subtract(money32);
    java.lang.String str38 = money32.toString();
    core.Money money40 = core.Money.dollars(10.0d);
    java.lang.String str41 = money40.toString();
    java.math.BigDecimal bigDecimal42 = money40.amount();
    java.util.Currency currency43 = money40.getCurrency();
    core.Money money48 = core.Money.dollars(10.0d);
    java.lang.String str49 = money48.toString();
    java.math.BigDecimal bigDecimal50 = money48.amount();
    core.Money[] money_array52 = money48.divide(1);
    boolean b54 = money48.equals((java.lang.Object)(-1.0d));
    core.Money money56 = core.Money.dollars(10.0d);
    java.lang.String str57 = money56.toString();
    java.math.BigDecimal bigDecimal58 = money56.amount();
    java.util.Currency currency59 = money56.getCurrency();
    money48.setCurrency(currency59);
    core.Money money61 = new core.Money(10.0d, currency59);
    core.Money money62 = new core.Money(1.0d, currency59);
    core.Money money63 = new core.Money(0L, currency59);
    core.Money money64 = money40.subtract(money63);
    boolean b65 = money32.equals(money40);
    boolean b66 = money22.equals((java.lang.Object)money32);
    java.util.Locale locale67 = money22.getLocale();
    core.Money[] money_array69 = money22.divide(10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "$10.00"+ "'", str13.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "$10.00"+ "'", str18.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str28 + "' != '" + "$10.00"+ "'", str28.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str38 + "' != '" + "$10.00"+ "'", str38.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "$10.00"+ "'", str41.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "$10.00"+ "'", str49.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "$10.00"+ "'", str57.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(locale67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array69);

  }

  @Test
  public void test500() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test500"); }


    core.Money money1 = core.Money.dollars(10.0d);
    java.lang.String str2 = money1.toString();
    core.Money money4 = core.Money.dollars(10.0d);
    java.lang.String str5 = money4.toString();
    java.math.BigDecimal bigDecimal6 = money4.amount();
    core.Money[] money_array8 = money4.divide(10);
    boolean b9 = money1.equals((java.lang.Object)money4);
    core.Money money11 = core.Money.dollars(10.0d);
    core.Money money13 = core.Money.dollars(10.0d);
    java.lang.String str14 = money13.toString();
    java.math.BigDecimal bigDecimal15 = money13.amount();
    core.Money money16 = money11.add(money13);
    core.Money money17 = money4.add(money16);
    java.math.BigDecimal bigDecimal18 = money4.amount();
    core.Money money20 = core.Money.dollars(10.0d);
    java.lang.String str21 = money20.toString();
    core.Money money23 = core.Money.dollars(10.0d);
    java.lang.String str24 = money23.toString();
    java.math.BigDecimal bigDecimal25 = money23.amount();
    core.Money[] money_array27 = money23.divide(10);
    boolean b28 = money20.equals((java.lang.Object)money23);
    core.Money money30 = core.Money.dollars(10.0d);
    core.Money money32 = core.Money.dollars(10.0d);
    java.lang.String str33 = money32.toString();
    java.math.BigDecimal bigDecimal34 = money32.amount();
    core.Money money35 = money30.add(money32);
    core.Money money36 = money23.add(money35);
    core.Money money38 = core.Money.dollars(10.0d);
    core.Money money39 = money36.add(money38);
    java.util.Currency currency40 = money38.getCurrency();
    boolean b41 = money4.equals((java.lang.Object)money38);
    core.Money money42 = null;
    // The following exception was thrown during execution in test generation
    try {
      core.Money money43 = money4.add(money42);
      org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException");
    } catch (java.lang.NullPointerException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.NullPointerException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str2 + "' != '" + "$10.00"+ "'", str2.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money4);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str5 + "' != '" + "$10.00"+ "'", str5.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "$10.00"+ "'", str14.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "$10.00"+ "'", str21.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str24 + "' != '" + "$10.00"+ "'", str24.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money_array27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str33 + "' != '" + "$10.00"+ "'", str33.equals("$10.00"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(bigDecimal34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(money39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(currency40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);

  }

}
